{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./tests/Client/.fable/fable-library.3.1.2/Types.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Date.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/RegExp.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/String.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Types.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Reflection.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Util.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/MutableMap.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/MutableSet.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/List.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Util.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/lib/big.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Decimal.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Seq.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Option.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Reflection.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Numeric.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Numeric.js","webpack:///./src/Client/.fable/fable-library.3.1.2/RegExp.js","webpack:///./src/Client/.fable/fable-library.3.1.2/String.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Date.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Guid.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/AsyncBuilder.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Choice.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Async.js","webpack:///./tests/Client/.fable/Fable.Mocha.2.10.0/Mocha.fs.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Int32.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/lib/long.js","webpack:///./tests/Client/.fable/fable-library.3.1.2/Long.js","webpack:///./src/Client/.fable/fable-library.3.1.2/lib/long.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Long.js","webpack:///./src/Feliz.ReactFlow/Types.fs.js","webpack:///./src/Client/.fable/fable-library.3.1.2/lib/big.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Decimal.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Seq.js","webpack:///./src/Client/.fable/fable-library.3.1.2/MutableMap.js","webpack:///./src/Client/.fable/fable-library.3.1.2/MutableSet.js","webpack:///./src/Client/.fable/fable-library.3.1.2/List.js","webpack:///./src/Client/.fable/fable-library.3.1.2/AsyncBuilder.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Choice.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Async.js","webpack:///./src/Client/.fable/Fable.Elmish.3.1.0/cmd.fs.js","webpack:///./src/Client/.fable/Feliz.1.47.0/Interop.fs.js","webpack:///./src/Client/.fable/Feliz.1.47.0/React.fs.js","webpack:///./src/Feliz.ReactFlow/Interop.fs.js","webpack:///./src/Client/Index.fs.js","webpack:///./src/Client/.fable/fable-library.3.1.2/Int32.js","webpack:///./src/Shared/Shared.fs.js","webpack:///./tests/Shared/Shared.Tests.fs.js","webpack:///./tests/Client/Client.Tests.fs.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","seqToString","self","count","str","x","toString","callStack","iterator","cons","getPrototypeOf","constructor","entries","map","k","v","join","String","compareList","other","tail","res","compare","head","List","this","cur","next","done","toJSON","Array","from","GetHashCode","combineHashCodes","structuralHash","Equals","CompareTo","Union","cases","tag","fields","concat","withParens","field","indexOf","hashes","numberHash","sameConstructor","equalArrays","compareArrays","recordToJSON","keys","recordToString","recordGetHashCode","values","recordEquals","thisNames","equals","recordCompareTo","Record","FSharpRef","contentsOrGetter","setter","dateOffsetToString","offset","isMinus","hours","Math","abs","minutes","padWithZeros","dateToHalfUTCString","date","half","toISOString","substring","dateToStringWithCustomFormat","format","utc","replace","match","rep","Number","NaN","y","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","h","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","isNaN","dateToStringWithOffset","_a","_b","_c","Date","getTime","dateWithOffset","dateToISOStringWithOffset","Error","dateToStringWithKind","kind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","getTimezoneOffset","dateToISOString","_provider","compareDates","DateTime","escape","fsFormatRegExp","formatRegExp","isLessThan","numericCompare","printf","input","cont","test","createPrinter","padRef","args","strCopy","arg","formatOnce","continuePrint","toText","toFail","formatReplacement","prefix","flags","padLength","precision","sign","isNumeric","toLowerCase","multiply","parseInt","toFixed","toPrecision","toExponential","toHex","toUpperCase","dateToString","zeroFlag","minusFlag","ch","padLeft","str2","contents","_","idx","pattern","intPart","decimalPart","isNullOrWhiteSpace","len","isRight","trim","chars","RegExp","CaseInfo","declaringType","TypeInfo","fullname","generics","construct","parent","enumCases","fullName","gen","isArray","getHashCode","getGenerics","fullnameHash","stringHash","genHashes","t1","t2","equalArraysWith","getRecordElements","k1","v1","k2","v2","class_type","record_type","undefined","union_type","caseNames","tuple_type","lambda_type","argType","returnType","list_type","generic","unit_type","string_type","bool_type","int32_type","float64_type","endsWith","isArrayLike","ArrayBuffer","isView","isHashable","assertEqual","actual","expected","msg","assign","assertNotEqual","dateOffset","date1","int32ToString","radix","ObjectRef","idMap","has","set","charCodeAt","reduce","h1","h2","arrayHash","dateHash","id","eq","isEquatable","xKeys","yKeys","sort","equalObjects","xtime","ytime","comparePrimitives","comp","compareArraysWith","isComparable","compareObjects","min","comparer","max","col","WeakMap","uncurry","arity","f","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","empty","singleton","last","_arg1_mut","_arg1","fold","f_mut","state_mut","xs_mut","state","xs","reverse","acc","List_1","ofSeq","fold_1","iterate","unitVar0","ofArray","tail_1","ofArrayWithTail","choose","matchValue","value_1","contains","list","loop","exists","curry","P","e","cmp","symbol","_this","mul","sd","dp","NAME","INVALID","INVALID_DP","NUMERIC","parse","nl","charAt","search","round","Big","DP","RM","rm","more","xc","unshift","pop","stringify","z","NE","PE","isneg","yc","div","a","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","mod","ygtx","times","add","pow","one","sqrt","valueOf","_Big_","findIndex","normalize","version","Decimal","Enumerator","iter","current","Dispose","getEnumerator","GetEnumerator","toIterator","en","hasNext","Seq","makeSeq","isArrayOrBufferView","delay","unfold","append","ys","firstDone","iters","output","innerIter","hasFinished","collect","fold2","iter1","iter2","cur1","cur2","foldBack2","ar1","ar2","iterateIndexed","isEmpty","pairwise","hd","tl","skip","scan","seed","scanBack","sumBy","adder","Add","GetZero","fst","transpose","source","results","every","Some","some","defaultArg","opt","defaultValue","split","splitters","removeEmpty","arguments","splits","reg","exec","index","lastIndex","year","month","day","ms","dateValue","UTC","setFullYear","isLeapYear","newGuid","random","CancellationToken","cancelled","_id","_cancelled","_listeners","Map","cancel","listener","addListener","removeListener","delete","register","$","OperationCanceledError","super","setPrototypeOf","Trampoline","callCount","incrementAndCheck","maxTrampolineCallCount","hijack","setTimeout","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","err","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","Bind","Combine","computation1","computation2","Delay","generator","For","sequence","body","While","Return","ReturnFrom","TryFinally","compensation","TryWith","catchHandler","ex2","Using","resource","guard","Zero","FSharpChoice$2","emptyContinuation","_x","defaultCancellationToken","catchAsync","work","Choice_makeChoice1Of2","sleep","millisecondsDueTime","tokenId","timeoutId","clearTimeout","startImmediate","cancellationToken","startWithContinuations","start","continuation","exceptionContinuation","cancellationContinuation","FocusState","TestCase","Test_testCase","Test_testList","tests","Env_insideBrowser","Function","Html_Node","Tag","Attributes","Content","Children","Html_createNode","node","el","document","createElement","innerHTML","enumerator","forLoopVar","attrValue","attrName","setAttribute","enumerator_1","childElement","appendChild","Html_simpleDiv","attrs","content","Html_div","children","Mocha_isFocused","pattern_matching_result","tests_1","Mocha_runSyncTestInBrowser","padding","error","message","Mocha_runAsyncTestInBrowser","copyOfStruct","singleton_1","_arg2","div_1","getElementById","Mocha_runAsyncSequentialTestInBrowser","Mocha_renderBrowserTests","hasFocusedTests","test_1","name_1","focus_1","testCases","name_2","header","testCases_1","name_3","testName","focusedState","actualTest","pattern_matching_result_1","testName_1","focusedState_1","actualTest_1","pattern_matching_result_2","Mocha_flattenTests","lastName","state_1","modifiedName_1","test_2","test_3","modifiedName","nodes","tuple","tests_2","header_1","asyncOps","tuple_1","_arg8","op_4","focus","pattern_matching_result_3","Mocha_configureAsyncTest","finished","Mocha_runTests","WorkerGlobalScope","renderedTests","testResults","element","singleton_2","Mocha_invalidateTestResults","passedCount","getElementsByClassName","failedCount","executingCount","skippedCount","total","Mocha_runViaMocha","msg_1","it","finished_1","only","finished_2","describe","test_4","NumberStyles","wasm","WebAssembly","Instance","Module","Uint8Array","Long","low","high","unsigned","isLong","obj","substr","fromBytes","toBytes","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","size","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","isNegative","radixLong","divide","rem1","subtract","rem","remDiv","digits","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","shiftRightUnsigned","shiftLeft","shiftRight","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","numBits","le","hi","lo","toBytesLE","toBytesBE","bytes","fromBytesLE","fromBytesBE","op_Addition","LongLib","op_Subtraction","op_Multiply","op_Division","unixEpochMillisecondsToTicks","ticksToUnixEpochMilliseconds","ticks","makeRangeStepFunction","step","stepComparedWithZero","stepGreaterThanZero","comparedWithLast","NodeType","NodeType__toString","this$","lists","Cmd_none","react","useState","react$002Dflow$002Drenderer","Handle","isEdge","isNode","FlowElement","Id","Descr","Model","NodeList$","NodeList","Msg","initNodes","type","label","style","background","color","border","width","position","init","createNode","flowElement","update","model","newNodes","getRange","bitsize","isValid","getInvalidDigits","AllowHexSpecifier","getRadix","regexMatch","validResponse","umin","umax","shared","description","actual_1","valueType","primitiveTypes","errorMsg","arg20","arg10","client","model_1","expected_1","equals_1","valueType_1","primitiveTypes_1","errorMsg_1","arg20_2","arg10_2","all","process","argv"],"mappings":"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","file":"app.6eb09f8d65da106420ec.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([24,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport class List {\n    constructor(head, tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n    [Symbol.iterator]() {\n        let cur = this;\n        return {\n            next: () => {\n                const value = cur === null || cur === void 0 ? void 0 : cur.head;\n                const done = (cur === null || cur === void 0 ? void 0 : cur.tail) == null;\n                cur = cur === null || cur === void 0 ? void 0 : cur.tail;\n                return { done, value };\n            },\n        };\n    }\n    toJSON() { return Array.from(this); }\n    toString() { return seqToString(this); }\n    GetHashCode() { return combineHashCodes(Array.from(this).map(structuralHash)); }\n    Equals(other) { return compareList(this, other) === 0; }\n    CompareTo(other) { return compareList(this, other); }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        if (this.fields.length === 0) {\n            return this.name;\n        }\n        else {\n            let fields = \"\";\n            let withParens = true;\n            if (this.fields.length === 1) {\n                const field = toString(this.fields[0]);\n                withParens = field.indexOf(\" \") >= 0;\n                fields = field;\n            }\n            else {\n                fields = this.fields.map((x) => toString(x)).join(\", \");\n            }\n            return this.name + (withParens ? \" (\" : \" \") + fields + (withParens ? \")\" : \"\");\n        }\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    if (input === null) {\n        throw new Error(\"Value cannot be null when parsing DateTime\");\n    }\n    if (input.trim() === \"\") {\n        throw new Error(\"An empty string is not recognized as a valid DateTime\");\n    }\n    let date = new Date(input);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            for (let i = 0; i < len - 2; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[len - 2];\n            match.input = arguments[len - 1];\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        // $0 doesn't work with JS regex, see #1155\n        replacement = replacement.replace(/\\$0/g, (_s) => \"$&\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { FSharpRef, toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(input, values) {\n    let i = 0;\n    return input.replace(interpolateRegExp, (_, prefix, flags, padLength, precision, format) => {\n        return formatReplacement(values[i++], prefix, flags, padLength, precision, format);\n    });\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, prefix, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return prefix ? prefix + rep : rep;\n}\nfunction formatOnce(str2, rep, padRef) {\n    return str2.replace(fsFormatRegExp, (match, prefix, flags, padLength, precision, format) => {\n        if (padRef.contents != null) {\n            padLength = padRef.contents;\n            padRef.contents = null;\n        }\n        else if (padLength === \"*\") {\n            if (rep < 0) {\n                throw new Error(\"Non-negative number required\");\n            }\n            padRef.contents = rep;\n            return match;\n        }\n        const once = formatReplacement(rep, prefix, flags, padLength, precision, format);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont, padRef = new FSharpRef(null)) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg, padRef);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont, padRef)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : undefined;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : undefined;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport class List {\n    constructor(head, tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n    [Symbol.iterator]() {\n        let cur = this;\n        return {\n            next: () => {\n                const value = cur === null || cur === void 0 ? void 0 : cur.head;\n                const done = (cur === null || cur === void 0 ? void 0 : cur.tail) == null;\n                cur = cur === null || cur === void 0 ? void 0 : cur.tail;\n                return { done, value };\n            },\n        };\n    }\n    toJSON() { return Array.from(this); }\n    toString() { return seqToString(this); }\n    GetHashCode() { return combineHashCodes(Array.from(this).map(structuralHash)); }\n    Equals(other) { return compareList(this, other) === 0; }\n    CompareTo(other) { return compareList(this, other); }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        if (this.fields.length === 0) {\n            return this.name;\n        }\n        else {\n            let fields = \"\";\n            let withParens = true;\n            if (this.fields.length === 1) {\n                const field = toString(this.fields[0]);\n                withParens = field.indexOf(\" \") >= 0;\n                fields = field;\n            }\n            else {\n                fields = this.fields.map((x) => toString(x)).join(\", \");\n            }\n            return this.name + (withParens ? \" (\" : \" \") + fields + (withParens ? \")\" : \"\");\n        }\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    var _a;\n    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    var _a, _b;\n    return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\") && !isArray(t);\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else {\n        throw new Error(`Cannot access constructor of ${t.fullname}`);\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return undefined;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        // if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return undefined;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(undefined, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(undefined, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(undefined, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(undefined, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { sumBy, iterate, map, iterateIndexed, toIterator, concat, getEnumerator } from \"./Seq.js\";\nimport { equals } from \"./Util.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { format } from \"./String.js\";\n\nexport class Dictionary {\n    constructor(pairs, comparer) {\n        const this$ = new FSharpRef(null);\n        this.comparer = comparer;\n        this$.contents = this;\n        this.hashMap = (new Map([]));\n        this[\"init@8-1\"] = 1;\n        const enumerator = getEnumerator(pairs);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const pair = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                Dictionary__Add_5BDDA1(this$.contents, pair[0], pair[1]);\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"Dictionary\";\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const this$ = this;\n        return getEnumerator(this$);\n    }\n    GetEnumerator() {\n        const this$ = this;\n        return getEnumerator(concat(this$.hashMap.values()));\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\n        const this$ = this;\n        Dictionary__Add_5BDDA1(this$, item[0], item[1]);\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        const this$ = this;\n        Dictionary__Clear(this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\n        const this$ = this;\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\n        let pattern_matching_result;\n        if (matchValue != null) {\n            if (equals(matchValue[1], item[1])) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return true;\n            }\n            case 1: {\n                return false;\n            }\n        }\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\n        const this$ = this;\n        iterateIndexed((i, e) => {\n            array[arrayIndex + i] = e;\n        }, this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const this$ = this;\n        return Dictionary__get_Count(this$) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return false;\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\n        const this$ = this;\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\n        if (matchValue != null) {\n            if (equals(matchValue[1], item[1])) {\n                const value = Dictionary__Remove_2B595(this$, item[0]);\n                void value;\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    get size() {\n        const this$ = this;\n        return Dictionary__get_Count(this$) | 0;\n    }\n    clear() {\n        const this$ = this;\n        Dictionary__Clear(this$);\n    }\n    delete(k) {\n        const this$ = this;\n        return Dictionary__Remove_2B595(this$, k);\n    }\n    entries() {\n        const this$ = this;\n        return map((p) => [p[0], p[1]], this$);\n    }\n    get(k) {\n        const this$ = this;\n        return Dictionary__get_Item_2B595(this$, k);\n    }\n    has(k) {\n        const this$ = this;\n        return Dictionary__ContainsKey_2B595(this$, k);\n    }\n    keys() {\n        const this$ = this;\n        return map((p) => p[0], this$);\n    }\n    set(k, v) {\n        const this$ = this;\n        Dictionary__set_Item_5BDDA1(this$, k, v);\n        return this$;\n    }\n    values() {\n        const this$ = this;\n        return map((p) => p[1], this$);\n    }\n    forEach(f, thisArg) {\n        const this$ = this;\n        iterate((p) => {\n            f(p[1], p[0], this$);\n        }, this$);\n    }\n}\n\nexport function Dictionary$reflection(gen0, gen1) {\n    return class_type(\"Fable.Collections.Dictionary\", [gen0, gen1], Dictionary);\n}\n\nexport function Dictionary_$ctor_6623D9B3(pairs, comparer) {\n    return new Dictionary(pairs, comparer);\n}\n\nfunction Dictionary__TryFindIndex_2B595(this$, k) {\n    const h = this$.comparer.GetHashCode(k) | 0;\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return [true, h, matchValue[1].findIndex((pair) => this$.comparer.Equals(k, pair[0]))];\n    }\n    else {\n        return [false, h, -1];\n    }\n}\n\nexport function Dictionary__TryFind_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Dictionary__get_Comparer(this$) {\n    return this$.comparer;\n}\n\nexport function Dictionary__Clear(this$) {\n    this$.hashMap.clear();\n}\n\nexport function Dictionary__get_Count(this$) {\n    return sumBy((pairs) => pairs.length, this$.hashMap.values(), {\n        GetZero: () => 0,\n        Add: (x, y) => (x + y),\n    });\n}\n\nexport function Dictionary__get_Item_2B595(this$, k) {\n    const matchValue = Dictionary__TryFind_2B595(this$, k);\n    if (matchValue != null) {\n        return matchValue[1];\n    }\n    else {\n        throw (new Error(\"The item was not found in collection\"));\n    }\n}\n\nexport function Dictionary__set_Item_5BDDA1(this$, k, v) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]] = [k, v];\n            break;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\n                void undefined;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [[k, v]]);\n            }\n            break;\n        }\n    }\n}\n\nexport function Dictionary__Add_5BDDA1(this$, k, v) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const msg = format(\"An item with the same key has already been added. Key: {0}\", k);\n            throw (new Error(msg));\n            break;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\n                void undefined;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [[k, v]]);\n            }\n            break;\n        }\n    }\n}\n\nexport function Dictionary__ContainsKey_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\nexport function Dictionary__Remove_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\n","import { sumBy, iterate, map, iterateIndexed, toIterator, concat, getEnumerator } from \"./Seq.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { some } from \"./Option.js\";\n\nexport class HashSet {\n    constructor(items, comparer) {\n        const this$ = new FSharpRef(null);\n        this.comparer = comparer;\n        this$.contents = this;\n        this.hashMap = (new Map([]));\n        this[\"init@8-2\"] = 1;\n        const enumerator = getEnumerator(items);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const value = HashSet__Add_2B595(this$.contents, enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                void value;\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"HashSet\";\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const this$ = this;\n        return getEnumerator(this$);\n    }\n    GetEnumerator() {\n        const this$ = this;\n        return getEnumerator(concat(this$.hashMap.values()));\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\n        const this$ = this;\n        const value = HashSet__Add_2B595(this$, item);\n        void value;\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        const this$ = this;\n        HashSet__Clear(this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\n        const this$ = this;\n        return HashSet__Contains_2B595(this$, item);\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\n        const this$ = this;\n        iterateIndexed((i, e) => {\n            array[arrayIndex + i] = e;\n        }, this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const this$ = this;\n        return HashSet__get_Count(this$) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return false;\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\n        const this$ = this;\n        return HashSet__Remove_2B595(this$, item);\n    }\n    get size() {\n        const this$ = this;\n        return HashSet__get_Count(this$) | 0;\n    }\n    add(k) {\n        const this$ = this;\n        const value = HashSet__Add_2B595(this$, k);\n        void value;\n        return this$;\n    }\n    clear() {\n        const this$ = this;\n        HashSet__Clear(this$);\n    }\n    delete(k) {\n        const this$ = this;\n        return HashSet__Remove_2B595(this$, k);\n    }\n    has(k) {\n        const this$ = this;\n        return HashSet__Contains_2B595(this$, k);\n    }\n    keys() {\n        const this$ = this;\n        return map((x) => x, this$);\n    }\n    values() {\n        const this$ = this;\n        return map((x) => x, this$);\n    }\n    entries() {\n        const this$ = this;\n        return map((v) => [v, v], this$);\n    }\n    forEach(f, thisArg) {\n        const this$ = this;\n        iterate((x) => {\n            f(x, x, this$);\n        }, this$);\n    }\n}\n\nexport function HashSet$reflection(gen0) {\n    return class_type(\"Fable.Collections.HashSet\", [gen0], HashSet);\n}\n\nexport function HashSet_$ctor_Z6150332D(items, comparer) {\n    return new HashSet(items, comparer);\n}\n\nfunction HashSet__TryFindIndex_2B595(this$, k) {\n    const h = this$.comparer.GetHashCode(k) | 0;\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return [true, h, matchValue[1].findIndex((v_1) => this$.comparer.Equals(k, v_1))];\n    }\n    else {\n        return [false, h, -1];\n    }\n}\n\nfunction HashSet__TryFind_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return some(getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]]);\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function HashSet__get_Comparer(this$) {\n    return this$.comparer;\n}\n\nexport function HashSet__Clear(this$) {\n    this$.hashMap.clear();\n}\n\nexport function HashSet__get_Count(this$) {\n    return sumBy((pairs) => pairs.length, this$.hashMap.values(), {\n        GetZero: () => 0,\n        Add: (x, y) => (x + y),\n    });\n}\n\nexport function HashSet__Add_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return false;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push(k));\n                void undefined;\n                return true;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [k]);\n                return true;\n            }\n        }\n    }\n}\n\nexport function HashSet__Contains_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\nexport function HashSet__Remove_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\n","import { List } from \"./Types.js\";\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\nimport { FSharpRef, List as List_1 } from \"./Types.js\";\nimport { transpose as transpose_1, pairwise as pairwise_1, collect as collect_1, scanBack as scanBack_1, scan as scan_1, foldBack2 as foldBack2_1, fold2 as fold2_1, fold as fold_1, map as map_1 } from \"./Seq.js\";\nimport { uncurry, count } from \"./Util.js\";\nimport { splitInto as splitInto_1, chunkBySize as chunkBySize_1, permute as permute_1, findIndexBack as findIndexBack_1, tryFindIndexBack as tryFindIndexBack_1 } from \"./Array.js\";\nimport { HashSet } from \"./MutableSet.js\";\nimport { getItemFromDict, addToDict, tryGetValue, addToSet } from \"./MapUtil.js\";\nimport { Dictionary } from \"./MutableMap.js\";\n\nexport function empty() {\n    return new List();\n}\n\nexport function singleton(x) {\n    return new List(x, empty());\n}\n\nexport function cons(x, xs) {\n    return new List(x, xs);\n}\n\nexport function head(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.head;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function tryHead(_arg1) {\n    if (_arg1.tail != null) {\n        return some(_arg1.head);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function tail(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.tail;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function last(_arg1_mut) {\n    last:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return _arg1.head;\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue last;\n            }\n        }\n        else {\n            throw (new Error(\"List was empty\"));\n        }\n        break;\n    }\n}\n\nexport function tryLast(_arg1_mut) {\n    tryLast:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return some(_arg1.head);\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue tryLast;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function compareWith(comparer, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    else {\n        const loop = (xs_1_mut, ys_1_mut) => {\n            loop:\n            while (true) {\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                const matchValue = [xs_1, ys_1];\n                if (matchValue[0].tail != null) {\n                    if (matchValue[1].tail != null) {\n                        const matchValue_1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n                        if (matchValue_1 === 0) {\n                            xs_1_mut = matchValue[0].tail;\n                            ys_1_mut = matchValue[1].tail;\n                            continue loop;\n                        }\n                        else {\n                            return matchValue_1 | 0;\n                        }\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else if (matchValue[1].tail == null) {\n                    return 0;\n                }\n                else {\n                    return -1;\n                }\n                break;\n            }\n        };\n        return loop(xs, ys) | 0;\n    }\n}\n\nexport function foldIndexedAux(f_mut, i_mut, acc_mut, _arg1_mut) {\n    foldIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            f_mut = f;\n            i_mut = (i + 1);\n            acc_mut = f(i, acc, _arg1.head);\n            _arg1_mut = _arg1.tail;\n            continue foldIndexedAux;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function foldIndexed(f, state, xs) {\n    return foldIndexedAux(f, 0, state, xs);\n}\n\nexport function fold(f_mut, state_mut, xs_mut) {\n    fold:\n    while (true) {\n        const f = f_mut, state = state_mut, xs = xs_mut;\n        if (xs.tail != null) {\n            f_mut = f;\n            state_mut = f(state, xs.head);\n            xs_mut = xs.tail;\n            continue fold;\n        }\n        else {\n            return state;\n        }\n        break;\n    }\n}\n\nexport function reverse(xs) {\n    return fold((acc, x) => (new List_1(x, acc)), new List_1(), xs);\n}\n\nexport function foldBack(f, xs, state) {\n    return fold((acc, x) => f(x, acc), state, reverse(xs));\n}\n\nexport function toSeq(xs) {\n    return map_1((x) => x, xs);\n}\n\nexport function ofSeq(xs) {\n    return reverse(fold_1((acc, x) => (new List_1(x, acc)), new List_1(), xs));\n}\n\nexport function concat(lists) {\n    return reverse(fold_1((state, xs) => fold((acc, x) => (new List_1(x, acc)), state, xs), new List_1(), lists));\n}\n\nexport function foldIndexed2Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut) {\n    foldIndexed2Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y);\n                bs_mut = xs;\n                cs_mut = ys;\n                continue foldIndexed2Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed2(f, state, xs, ys) {\n    return foldIndexed2Aux(f, 0, state, xs, ys);\n}\n\nexport function fold2(f, state, xs, ys) {\n    return fold2_1(f, state, xs, ys);\n}\n\nexport function foldBack2(f, xs, ys, state) {\n    return foldBack2_1(f, xs, ys, state);\n}\n\nexport function unfold(f, state) {\n    const unfoldInner = (acc_mut, state_1_mut) => {\n        unfoldInner:\n        while (true) {\n            const acc = acc_mut, state_1 = state_1_mut;\n            const matchValue = f(state_1);\n            if (matchValue != null) {\n                acc_mut = (new List_1(matchValue[0], acc));\n                state_1_mut = matchValue[1];\n                continue unfoldInner;\n            }\n            else {\n                return reverse(acc);\n            }\n            break;\n        }\n    };\n    return unfoldInner(new List_1(), state);\n}\n\nexport function foldIndexed3Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut, ds_mut) {\n    foldIndexed3Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut, ds = ds_mut;\n        const matchValue = [bs, cs, ds];\n        let pattern_matching_result, x, xs, y, ys, z, zs;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                if (matchValue[2].tail != null) {\n                    pattern_matching_result = 1;\n                    x = matchValue[0].head;\n                    xs = matchValue[0].tail;\n                    y = matchValue[1].head;\n                    ys = matchValue[1].tail;\n                    z = matchValue[2].head;\n                    zs = matchValue[2].tail;\n                }\n                else {\n                    pattern_matching_result = 2;\n                }\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            if (matchValue[2].tail == null) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y, z);\n                bs_mut = xs;\n                cs_mut = ys;\n                ds_mut = zs;\n                continue foldIndexed3Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed3(f, seed, xs, ys, zs) {\n    return foldIndexed3Aux(f, 0, seed, xs, ys, zs);\n}\n\nexport function fold3(f, state, xs, ys, zs) {\n    return foldIndexed3((_arg1, acc, x, y, z) => f(acc, x, y, z), state, xs, ys, zs);\n}\n\nexport function scan(f, state, xs) {\n    return ofSeq(scan_1(f, state, xs));\n}\n\nexport function scanBack(f, xs, state) {\n    return ofSeq(scanBack_1(f, xs, state));\n}\n\nexport function length(xs) {\n    return fold((acc, _arg1) => (acc + 1), 0, xs);\n}\n\nexport function append(xs, ys) {\n    return fold((acc, x) => (new List_1(x, acc)), ys, reverse(xs));\n}\n\nexport function collect(f, xs) {\n    return ofSeq(collect_1(f, xs));\n}\n\nexport function map(f, xs) {\n    return reverse(fold((acc, x) => (new List_1(f(x), acc)), new List_1(), xs));\n}\n\nexport function mapIndexed(f, xs) {\n    return reverse(foldIndexed((i, acc, x) => (new List_1(f(i, x), acc)), new List_1(), xs));\n}\n\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\n\nexport function map2(f, xs, ys) {\n    return reverse(fold2((acc, x, y) => (new List_1(f(x, y), acc)), new List_1(), xs, ys));\n}\n\nexport function mapIndexed2(f, xs, ys) {\n    return reverse(foldIndexed2((i, acc, x, y) => (new List_1(f(i, x, y), acc)), new List_1(), xs, ys));\n}\n\nexport function map3(f, xs, ys, zs) {\n    return reverse(fold3((acc, x, y, z) => (new List_1(f(x, y, z), acc)), new List_1(), xs, ys, zs));\n}\n\nexport function mapIndexed3(f, xs, ys, zs) {\n    return reverse(foldIndexed3((i, acc, x, y, z) => (new List_1(f(i, x, y, z), acc)), new List_1(), xs, ys, zs));\n}\n\nexport function mapFold(f, s, xs) {\n    const patternInput_1 = fold((tupledArg, x) => {\n        const patternInput = f(tupledArg[1], x);\n        return [new List_1(patternInput[0], tupledArg[0]), patternInput[1]];\n    }, [new List_1(), s], xs);\n    return [reverse(patternInput_1[0]), patternInput_1[1]];\n}\n\nexport function mapFoldBack(f, xs, s) {\n    return mapFold((s_1, v) => f(v, s_1), s, reverse(xs));\n}\n\nexport function iterate(f, xs) {\n    fold((unitVar0, x) => {\n        f(x);\n    }, void 0, xs);\n}\n\nexport function iterate2(f, xs, ys) {\n    fold2((unitVar0, x, y) => {\n        f(x, y);\n    }, void 0, xs, ys);\n}\n\nexport function iterateIndexed(f, xs) {\n    foldIndexed((i, unitVar1, x) => {\n        f(i, x);\n    }, void 0, xs);\n}\n\nexport function iterateIndexed2(f, xs, ys) {\n    foldIndexed2((i, unitVar1, x, y) => {\n        f(i, x, y);\n    }, void 0, xs, ys);\n}\n\nexport function ofArrayWithTail(xs, tail_1) {\n    let res = tail_1;\n    for (let i = count(xs) - 1; i >= 0; i--) {\n        res = (new List_1(xs[i], res));\n    }\n    return res;\n}\n\nexport function ofArray(xs) {\n    return ofArrayWithTail(xs, new List_1());\n}\n\nexport function isEmpty(_arg1) {\n    if (_arg1.tail == null) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function tryPickIndexedAux(f_mut, i_mut, _arg1_mut) {\n    tryPickIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            const result = f(i, _arg1.head);\n            if (result == null) {\n                f_mut = f;\n                i_mut = (i + 1);\n                _arg1_mut = _arg1.tail;\n                continue tryPickIndexedAux;\n            }\n            else {\n                return result;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function tryPickIndexed(f, xs) {\n    return tryPickIndexedAux(f, 0, xs);\n}\n\nexport function tryPick(f, xs) {\n    return tryPickIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function pick(f, xs) {\n    const matchValue = tryPick(f, xs);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function tryFindIndexed(f, xs) {\n    return tryPickIndexed((i, x) => (f(i, x) ? some(x) : (void 0)), xs);\n}\n\nexport function tryFind(f, xs) {\n    return tryPickIndexed((_arg1, x) => (f(x) ? some(x) : (void 0)), xs);\n}\n\nexport function findIndexed(f, xs) {\n    const matchValue = tryFindIndexed(f, xs);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function find(f, xs) {\n    return findIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function findBack(f, xs) {\n    return find(f, reverse(xs));\n}\n\nexport function tryFindBack(f, xs) {\n    return tryFind(f, reverse(xs));\n}\n\nexport function tryFindIndex(f, xs) {\n    return tryPickIndexed((i, x) => (f(x) ? i : (void 0)), xs);\n}\n\nexport function tryFindIndexBack(f, xs) {\n    return tryFindIndexBack_1(f, Array.from(xs));\n}\n\nexport function findIndex(f, xs) {\n    const matchValue = tryFindIndex(f, xs);\n    if (matchValue != null) {\n        return matchValue | 0;\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function findIndexBack(f, xs) {\n    return findIndexBack_1(f, Array.from(xs));\n}\n\nexport function item(n, xs) {\n    return findIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function tryItem(n, xs) {\n    return tryFindIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function filter(f, xs) {\n    return reverse(fold((acc, x) => (f(x) ? (new List_1(x, acc)) : acc), new List_1(), xs));\n}\n\nexport function partition(f, xs) {\n    return fold(uncurry(2, (tupledArg) => {\n        const lacc = tupledArg[0];\n        const racc = tupledArg[1];\n        return (x) => (f(x) ? [new List_1(x, lacc), racc] : [lacc, new List_1(x, racc)]);\n    }), [new List_1(), new List_1()], reverse(xs));\n}\n\nexport function choose(f, xs) {\n    return reverse(fold((acc, x) => {\n        const matchValue = f(x);\n        return (matchValue == null) ? acc : (new List_1(value_1(matchValue), acc));\n    }, new List_1(), xs));\n}\n\nexport function contains(value, list, eq) {\n    const loop = (xs_mut) => {\n        loop:\n        while (true) {\n            const xs = xs_mut;\n            if (xs.tail != null) {\n                if (eq.Equals(value, xs.head)) {\n                    return true;\n                }\n                else {\n                    xs_mut = xs.tail;\n                    continue loop;\n                }\n            }\n            else {\n                return false;\n            }\n            break;\n        }\n    };\n    return loop(list);\n}\n\nexport function except(itemsToExclude, array, eq) {\n    if (isEmpty(array)) {\n        return array;\n    }\n    else {\n        const cached = new HashSet(itemsToExclude, eq);\n        return filter((arg00) => addToSet(arg00, cached), array);\n    }\n}\n\nexport function initialize(n, f) {\n    let xs = new List_1();\n    for (let i = 0; i <= (n - 1); i++) {\n        xs = (new List_1(f(i), xs));\n    }\n    return reverse(xs);\n}\n\nexport function replicate(n, x) {\n    return initialize(n, (_arg1) => x);\n}\n\nexport function reduce(f, _arg1) {\n    if (_arg1.tail != null) {\n        return fold(f, _arg1.head, _arg1.tail);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function reduceBack(f, _arg1) {\n    if (_arg1.tail != null) {\n        return foldBack(f, _arg1.tail, _arg1.head);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function forAll(f, xs) {\n    return fold((acc, x) => (acc ? f(x) : false), true, xs);\n}\n\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => (acc ? f(x, y) : false), true, xs, ys);\n}\n\nexport function exists(f_mut, _arg1_mut) {\n    exists:\n    while (true) {\n        const f = f_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (f(_arg1.head)) {\n                return true;\n            }\n            else {\n                f_mut = f;\n                _arg1_mut = _arg1.tail;\n                continue exists;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function exists2(f_mut, bs_mut, cs_mut) {\n    exists2:\n    while (true) {\n        const f = f_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return false;\n            }\n            case 1: {\n                if (f(x, y)) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    bs_mut = xs;\n                    cs_mut = ys;\n                    continue exists2;\n                }\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function unzip(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1])], xs, [new List_1(), new List_1()]);\n}\n\nexport function unzip3(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1]), new List_1(tupledArg[2], tupledArg_1[2])], xs, [new List_1(), new List_1(), new List_1()]);\n}\n\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\n\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n\nexport function sort(xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => comparer.Compare(x, y))), xs_1)));\n}\n\nexport function sortBy(projection, xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y)))), xs_1)));\n}\n\nexport function sortDescending(xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1))), xs_1)));\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1))), xs_1)));\n}\n\nexport function sortWith(comparer, xs) {\n    let comparer_1, xs_1;\n    return ofArray((comparer_1 = comparer, (xs_1 = Array.from(xs), (xs_1.sort(comparer_1), xs_1))));\n}\n\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\n\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(li, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), li);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(xs, averager) {\n    return averager.DivideByInt(fold((acc, x) => averager.Add(acc, x), averager.GetZero(), xs), length(xs));\n}\n\nexport function averageBy(f, xs, averager) {\n    return averager.DivideByInt(fold((acc, x) => averager.Add(acc, f(x)), averager.GetZero(), xs), length(xs));\n}\n\nexport function permute(f, xs) {\n    return ofArray(permute_1(f, Array.from(xs)));\n}\n\nexport function chunkBySize(chunkSize, xs) {\n    return map(ofArray, ofArray(chunkBySize_1(chunkSize, Array.from(xs))));\n}\n\nexport function skip(i, xs) {\n    const skipInner = (i_1_mut, xs_1_mut) => {\n        skipInner:\n        while (true) {\n            const i_1 = i_1_mut, xs_1 = xs_1_mut;\n            const matchValue = [i_1, xs_1];\n            if (matchValue[0] === 0) {\n                return xs_1;\n            }\n            else if (matchValue[1].tail != null) {\n                i_1_mut = (i_1 - 1);\n                xs_1_mut = matchValue[1].tail;\n                continue skipInner;\n            }\n            else {\n                throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n            }\n            break;\n        }\n    };\n    const matchValue_1 = [i, xs];\n    if (matchValue_1[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_4, xs_4;\n        if (matchValue_1[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue_1[0] === 1) {\n            if (matchValue_1[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_4 = matchValue_1[0];\n                xs_4 = matchValue_1[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_4 = matchValue_1[0];\n            xs_4 = matchValue_1[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return xs;\n            }\n            case 1: {\n                return matchValue_1[1].tail;\n            }\n            case 2: {\n                return skipInner(i_4, xs_4);\n            }\n        }\n    }\n}\n\nexport function skipWhile(predicate_mut, xs_mut) {\n    skipWhile:\n    while (true) {\n        const predicate = predicate_mut, xs = xs_mut;\n        let pattern_matching_result, h_1, t_1;\n        if (xs.tail != null) {\n            if (predicate(xs.head)) {\n                pattern_matching_result = 0;\n                h_1 = xs.head;\n                t_1 = xs.tail;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                predicate_mut = predicate;\n                xs_mut = t_1;\n                continue skipWhile;\n            }\n            case 1: {\n                return xs;\n            }\n        }\n        break;\n    }\n}\n\nexport function takeSplitAux(error_mut, i_mut, acc_mut, xs_mut) {\n    takeSplitAux:\n    while (true) {\n        const error = error_mut, i = i_mut, acc = acc_mut, xs = xs_mut;\n        const matchValue = [i, xs];\n        if (matchValue[0] === 0) {\n            return [reverse(acc), xs];\n        }\n        else if (matchValue[1].tail != null) {\n            error_mut = error;\n            i_mut = (i - 1);\n            acc_mut = (new List_1(matchValue[1].head, acc));\n            xs_mut = matchValue[1].tail;\n            continue takeSplitAux;\n        }\n        else if (error) {\n            throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n        }\n        else {\n            return [reverse(acc), xs];\n        }\n        break;\n    }\n}\n\nexport function take(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_1)[0];\n            }\n        }\n    }\n}\n\nexport function takeWhile(predicate, xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail == null) {\n            if (predicate(xs.head)) {\n                return xs;\n            }\n            else {\n                return xs.tail;\n            }\n        }\n        else if (!predicate(xs.head)) {\n            return new List_1();\n        }\n        else {\n            return new List_1(xs.head, takeWhile(predicate, xs.tail));\n        }\n    }\n    else {\n        return xs;\n    }\n}\n\nexport function truncate(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                return takeSplitAux(false, i_3, new List_1(), xs_1)[0];\n            }\n        }\n    }\n}\n\nexport function splitAt(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_2;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_2 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_2 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return [new List_1(), xs];\n            }\n            case 1: {\n                return [new List_1(matchValue[1].head, new List_1()), matchValue[1].tail];\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_2);\n            }\n        }\n    }\n}\n\nexport function outOfRange() {\n    throw (new Error(\"Index out of range\"));\n}\n\nexport function getSlice(lower, upper, xs) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const hasUpper = upper != null;\n    if (lower_1 < 0) {\n        return outOfRange();\n    }\n    else if (hasUpper ? (value_1(upper) < lower_1) : false) {\n        return new List_1();\n    }\n    else {\n        let lastIndex = -1;\n        const res = foldIndexed((i, acc, x) => {\n            lastIndex = i;\n            if ((lower_1 <= i) ? ((!hasUpper) ? true : (i <= value_1(upper))) : false) {\n                return new List_1(x, acc);\n            }\n            else {\n                return acc;\n            }\n        }, new List_1(), xs);\n        if ((lower_1 > (lastIndex + 1)) ? true : (hasUpper ? (value_1(upper) > lastIndex) : false)) {\n            outOfRange();\n        }\n        return reverse(res);\n    }\n}\n\nexport function distinctBy(projection, xs, eq) {\n    const hashSet = new HashSet([], eq);\n    return filter((arg) => addToSet(projection(arg), hashSet), xs);\n}\n\nexport function distinct(xs, eq) {\n    return distinctBy((x) => x, xs, eq);\n}\n\nexport function exactlyOne(xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail != null) {\n            throw (new Error(\"Input list too long\\\\nParameter name: list\"));\n        }\n        else {\n            return xs.head;\n        }\n    }\n    else {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: list\"));\n    }\n}\n\nexport function groupBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, new List_1(v, matchValue[1]));\n        }\n        else {\n            addToDict(dict, key, new List_1(v, new List_1()));\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    iterate((key_1) => {\n        result = (new List_1([key_1, reverse(getItemFromDict(dict, key_1))], result));\n    }, keys);\n    return result;\n}\n\nexport function countBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, matchValue[1] + 1);\n        }\n        else {\n            dict.set(key, 1);\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    iterate((key_1) => {\n        result = (new List_1([key_1, getItemFromDict(dict, key_1)], result));\n    }, keys);\n    return result;\n}\n\nexport function where(predicate, source) {\n    return filter(predicate, source);\n}\n\nexport function pairwise(source) {\n    return ofSeq(pairwise_1(source));\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res = new List_1();\n    for (let i = length(source); i >= windowSize; i--) {\n        res = (new List_1(getSlice(i - windowSize, i - 1, source), res));\n    }\n    return res;\n}\n\nexport function splitInto(chunks, source) {\n    return map(ofArray, ofArray(splitInto_1(chunks, Array.from(source))));\n}\n\nexport function transpose(lists) {\n    return ofSeq(map_1(ofSeq, transpose_1(lists)));\n}\n\n","// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return undefined;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        // if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return undefined;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(undefined, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(undefined, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(undefined, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(undefined, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\nimport { symbol } from \"../Numeric.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n    [symbol]() {\n        const _this = this;\n        return {\n            multiply: y => _this.mul(y),\n            toPrecision: sd => _this.toPrecision(sd),\n            toExponential: dp => _this.toExponential(dp),\n            toFixed: dp => _this.toFixed(dp),\n            toHex: () => (Number(_this) >>> 0).toString(16),\n        };\n    }\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[i];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = step.cmp(get_Zero);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = x.cmp(last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","import { makeRangeStepFunction as makeDecimalRangeStepFunction } from \"./Decimal.js\";\nimport { makeRangeStepFunction as makeLongRangeStepFunction } from \"./Long.js\";\nimport { some, value } from \"./Option.js\";\nimport { compare, equals } from \"./Util.js\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nclass Seq {\n    constructor(f) {\n        this.f = f;\n    }\n    [Symbol.iterator]() { return new Seq(this.f); }\n    next() {\n        var _a;\n        this.iter = (_a = this.iter) !== null && _a !== void 0 ? _a : this.f();\n        return this.iter.next();\n    }\n    toString() {\n        return \"seq [\" + Array.from(this).join(\"; \") + \"]\";\n    }\n}\nfunction makeSeq(f) {\n    return new Seq(f);\n}\nfunction isArrayOrBufferView(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs);\n}\nexport function ofArray(xs) {\n    if (Array.isArray(xs)) {\n        return delay(() => xs);\n    }\n    else {\n        return delay(() => unfold((i) => i != null && i < xs.length ? [xs[i], i + 1] : undefined, 0));\n    }\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map((y) => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, undefined];\n        return unfold(() => {\n            var _a, _b;\n            let cur;\n            if (!firstDone) {\n                cur = (_a = iters[0]) === null || _a === void 0 ? void 0 : _a.next();\n                if (cur != null && !cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [undefined, ys[Symbol.iterator]()];\n                }\n            }\n            cur = (_b = iters[1]) === null || _b === void 0 ? void 0 : _b.next();\n            return cur != null && !cur.done ? [cur.value, iters] : undefined;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output;\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = cur.value;\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = undefined;\n                    }\n                }\n            }\n            return innerIter != null ? [output, innerIter] : undefined;\n        }, undefined);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    let cur1;\n    let cur2;\n    let c = 0;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        c = f(cur1.value, cur2.value);\n        if (c !== 0) {\n            break;\n        }\n    }\n    return (c !== 0) ? c : (cur1.done && !cur2.done) ? -1 : (!cur1.done && cur2.done) ? 1 : 0;\n}\nexport function delay(f) {\n    return makeSeq(() => f()[Symbol.iterator]());\n}\nexport function empty() {\n    return delay(() => []);\n}\nexport function singleton(y) {\n    return delay(() => [y]);\n}\nexport function enumerateFromFunctions(factory, moveNext, current) {\n    return delay(() => unfold((e) => moveNext(e) ? [current(e), e] : undefined, factory()));\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : undefined, undefined));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            try {\n                return empty();\n            }\n            finally {\n                finalFn();\n            }\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : undefined;\n            }\n            catch (err) {\n                return undefined;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const ar2 = isArrayOrBufferView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? undefined : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : undefined, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return undefined;\n    }\n    if (isArrayOrBufferView(xs)) {\n        return i < xs.length ? some(xs[i]) : undefined;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return undefined;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => (f(x), undefined), undefined, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => (f(x, y), undefined), undefined, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => (f(i !== null && i !== void 0 ? i : 0, x), undefined), undefined, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => (f(i !== null && i !== void 0 ? i : 0, x, y), undefined), undefined, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? undefined : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return isArrayOrBufferView(xs)\n        ? xs.length\n        : fold((acc, _x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : undefined;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        const cur = iter.next();\n        if (cur.done) {\n            return empty();\n        }\n        const hd = cur.value;\n        const tl = tail(xs);\n        const ys = scan(([_, last], next) => [last, next], [hd, hd], tl);\n        return skip(1, ys);\n    });\n}\nexport function rangeChar(first, last) {\n    const firstNum = first.charCodeAt(0);\n    const lastNum = last.charCodeAt(0);\n    return delay(() => unfold((x) => x <= lastNum ? [String.fromCharCode(x), x + 1] : undefined, firstNum));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeLongRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeDecimal(first, step, last) {\n    const stepFn = makeDecimalRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : undefined, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return undefined;\n        }, undefined);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function skip(n, xs) {\n    return makeSeq(() => {\n        const iter = xs[Symbol.iterator]();\n        for (let i = 1; i <= n; i++) {\n            if (iter.next().done) {\n                throw new Error(\"Seq has not enough elements\");\n            }\n        }\n        return iter;\n    });\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    return skip(1, xs);\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold(() => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, undefined];\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? undefined : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return undefined;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return makeSeq(() => {\n        // Capture a copy of the first value in the closure\n        // so the sequence is restarted every time, see #1230\n        let acc = fst;\n        const iter = {\n            next() {\n                const res = f(acc);\n                if (res != null) {\n                    const v = value(res);\n                    if (v != null) {\n                        acc = v[1];\n                        return { done: false, value: v[0] };\n                    }\n                }\n                return { done: true, value: undefined };\n            },\n        };\n        return iter;\n    });\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return makeSeq(() => {\n        let window = [];\n        const iter = source[Symbol.iterator]();\n        const iter2 = {\n            next() {\n                let cur;\n                while (window.length < windowSize) {\n                    if ((cur = iter.next()).done) {\n                        return { done: true, value: undefined };\n                    }\n                    window.push(cur.value);\n                }\n                const value = window;\n                window = window.slice(1);\n                return { done: false, value };\n            },\n        };\n        return iter2;\n    });\n}\nexport function transpose(source) {\n    return makeSeq(() => {\n        const iters = Array.from(source, (x) => x[Symbol.iterator]());\n        const iter = {\n            next() {\n                if (iters.length === 0) {\n                    return { done: true, value: undefined }; // empty sequence\n                }\n                const results = Array.from(iters, (iter) => iter.next());\n                if (results[0].done) {\n                    if (!results.every((x) => x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    return { done: true, value: undefined };\n                }\n                else {\n                    if (!results.every((x) => !x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    const values = results.map((x) => x.value);\n                    return { done: false, value: values };\n                }\n            },\n        };\n        return iter;\n    });\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    var _a;\n    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    var _a, _b;\n    return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\") && !isArray(t);\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else {\n        throw new Error(`Cannot access constructor of ${t.fullname}`);\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            for (let i = 0; i < len - 2; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[len - 2];\n            match.input = arguments[len - 1];\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        // $0 doesn't work with JS regex, see #1155\n        replacement = replacement.replace(/\\$0/g, (_s) => \"$&\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { FSharpRef, toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(input, values) {\n    let i = 0;\n    return input.replace(interpolateRegExp, (_, prefix, flags, padLength, precision, format) => {\n        return formatReplacement(values[i++], prefix, flags, padLength, precision, format);\n    });\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, prefix, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return prefix ? prefix + rep : rep;\n}\nfunction formatOnce(str2, rep, padRef) {\n    return str2.replace(fsFormatRegExp, (match, prefix, flags, padLength, precision, format) => {\n        if (padRef.contents != null) {\n            padLength = padRef.contents;\n            padRef.contents = null;\n        }\n        else if (padLength === \"*\") {\n            if (rep < 0) {\n                throw new Error(\"Non-negative number required\");\n            }\n            padRef.contents = rep;\n            return match;\n        }\n        const once = formatReplacement(rep, prefix, flags, padLength, precision, format);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont, padRef = new FSharpRef(null)) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg, padRef);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont, padRef)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : undefined;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : undefined;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    if (input === null) {\n        throw new Error(\"Value cannot be null when parsing DateTime\");\n    }\n    if (input.trim() === \"\") {\n        throw new Error(\"An empty string is not recognized as a valid DateTime\");\n    }\n    let date = new Date(input);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","import { trim } from \"./String.js\";\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[\\(\\{]{0,2}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[\\)\\}]{0,2}$/;\nconst guidRegexNoHyphen = /^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/;\nconst guidRegexHex = /^\\{0x[0-9a-f]{8},(0x[0-9a-f]{4},){2}\\{(0x[0-9a-f]{2},){7}0x[0-9a-f]{2}\\}\\}$/;\nconst guidHexCaptures = /^([0-9a-f]{8})-(([0-9a-f]{4})-)(([0-9a-f]{4})-)([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;\nexport function toString(str, format, _provider) {\n    if (format && (format === null || format === void 0 ? void 0 : format.length) > 0) {\n        switch (format) {\n            case \"N\":\n                return str.replace(/-/g, '');\n            case \"D\":\n                return str;\n            case \"B\":\n                return \"{\" + str + \"}\";\n            case \"P\":\n                return \"(\" + str + \")\";\n            case \"X\":\n                return str.replace(guidHexCaptures, \"{0x$1,0x$3,0x$5,{0x$6,0x$7,0x$8,0x$9,0x$10,0x$11,0x$12,0x$13}}\");\n            default:\n                throw new Error(\"Unrecognized Guid print format\");\n        }\n    }\n    else {\n        return str;\n    }\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). */\nexport function parse(str) {\n    function hyphenateGuid(str) {\n        return str.replace(guidRegexNoHyphen, \"$1-$2-$3-$4-$5\");\n    }\n    const wsTrimAndLowered = str.trim().toLowerCase();\n    if (guidRegex.test(wsTrimAndLowered)) {\n        return trim(wsTrimAndLowered, \"{\", \"}\", \"(\", \")\");\n    }\n    else if (guidRegexNoHyphen.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered);\n    }\n    else if (guidRegexHex.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered.replace(/[\\{\\},]|0x/g, ''));\n    }\n    else {\n        throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n    }\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = parse(str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n    return guid;\n}\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { Union } from \"./Types.js\";\nimport { union_type } from \"./Reflection.js\";\nimport { some } from \"./Option.js\";\n\nexport class FSharpResult$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Ok\", \"Error\"];\n    }\n}\n\nexport function FSharpResult$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\n}\n\nexport function Result_Map(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, mapping(result.fields[0]));\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport function Result_MapError(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, mapping(result.fields[0]));\n    }\n}\n\nexport function Result_Bind(binder, result) {\n    if (result.tag === 0) {\n        return binder(result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport class FSharpChoice$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of2\", \"Choice2Of2\"];\n    }\n}\n\nexport function FSharpChoice$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\n}\n\nexport class FSharpChoice$3 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\n    }\n}\n\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\n}\n\nexport class FSharpChoice$4 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\n    }\n}\n\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\n}\n\nexport class FSharpChoice$5 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\n    }\n}\n\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\n}\n\nexport class FSharpChoice$6 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\n    }\n}\n\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\n}\n\nexport class FSharpChoice$7 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\n    }\n}\n\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\n}\n\nexport function Choice_makeChoice1Of2(x) {\n    return new FSharpChoice$2(0, x);\n}\n\nexport function Choice_makeChoice2Of2(x) {\n    return new FSharpChoice$2(1, x);\n}\n\nexport function Choice_tryValueIfChoice1Of2(x) {\n    if (x.tag === 0) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Choice_tryValueIfChoice2Of2(x) {\n    if (x.tag === 1) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { map } from \"./Seq.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { Record, toString, Union } from \"../fable-library.3.1.2/Types.js\";\r\nimport { record_type, tuple_type, equals, float64_type, int32_type, bool_type, list_type, class_type, lambda_type, unit_type, string_type, union_type } from \"../fable-library.3.1.2/Reflection.js\";\r\nimport { iterate, choose, map, ofSeq, exists, empty, contains, ofArray, singleton } from \"../fable-library.3.1.2/List.js\";\r\nimport { int32ToString, structuralHash, assertEqual, assertNotEqual } from \"../fable-library.3.1.2/Util.js\";\r\nimport { isNullOrWhiteSpace, toFail, printf, toText } from \"../fable-library.3.1.2/String.js\";\r\nimport { singleton as singleton_2, append, collect, delay, getEnumerator, isEmpty } from \"../fable-library.3.1.2/Seq.js\";\r\nimport { newGuid } from \"../fable-library.3.1.2/Guid.js\";\r\nimport { ignore, catchAsync, sleep, startImmediate } from \"../fable-library.3.1.2/Async.js\";\r\nimport { singleton as singleton_1 } from \"../fable-library.3.1.2/AsyncBuilder.js\";\r\n\r\nexport class FocusState extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Normal\", \"Pending\", \"Focused\"];\r\n    }\r\n}\r\n\r\nexport function FocusState$reflection() {\r\n    return union_type(\"Fable.Mocha.FocusState\", [], FocusState, () => [[], [], []]);\r\n}\r\n\r\nexport class TestCase extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"SyncTest\", \"AsyncTest\", \"TestList\", \"TestListSequential\"];\r\n    }\r\n}\r\n\r\nexport function TestCase$reflection() {\r\n    return union_type(\"Fable.Mocha.TestCase\", [], TestCase, () => [[[\"Item1\", string_type], [\"Item2\", lambda_type(unit_type, unit_type)], [\"Item3\", FocusState$reflection()]], [[\"Item1\", string_type], [\"Item2\", class_type(\"Microsoft.FSharp.Control.FSharpAsync`1\", [unit_type])], [\"Item3\", FocusState$reflection()]], [[\"Item1\", string_type], [\"Item2\", list_type(TestCase$reflection())]], [[\"Item1\", string_type], [\"Item2\", list_type(TestCase$reflection())]]]);\r\n}\r\n\r\nexport function Test_testCase(name, body) {\r\n    return new TestCase(0, name, body, new FocusState(0));\r\n}\r\n\r\nexport function Test_ptestCase(name, body) {\r\n    return new TestCase(0, name, body, new FocusState(1));\r\n}\r\n\r\nexport function Test_ftestCase(name, body) {\r\n    return new TestCase(0, name, body, new FocusState(2));\r\n}\r\n\r\nexport function Test_testCaseAsync(name, body) {\r\n    return new TestCase(1, name, body, new FocusState(0));\r\n}\r\n\r\nexport function Test_ptestCaseAsync(name, body) {\r\n    return new TestCase(1, name, body, new FocusState(1));\r\n}\r\n\r\nexport function Test_ftestCaseAsync(name, body) {\r\n    return new TestCase(1, name, body, new FocusState(2));\r\n}\r\n\r\nexport function Test_testList(name, tests) {\r\n    return new TestCase(2, name, tests);\r\n}\r\n\r\nexport function Test_testSequenced(test) {\r\n    switch (test.tag) {\r\n        case 1: {\r\n            const test_2 = test.fields[1];\r\n            const state_1 = test.fields[2];\r\n            const name_1 = test.fields[0];\r\n            return new TestCase(3, name_1, singleton(new TestCase(1, name_1, test_2, state_1)));\r\n        }\r\n        case 2: {\r\n            const tests = test.fields[1];\r\n            const name_2 = test.fields[0];\r\n            return new TestCase(3, name_2, tests);\r\n        }\r\n        case 3: {\r\n            const tests_1 = test.fields[1];\r\n            const name_3 = test.fields[0];\r\n            return new TestCase(3, name_3, tests_1);\r\n        }\r\n        default: {\r\n            const test_1 = test.fields[1];\r\n            const state = test.fields[2];\r\n            const name = test.fields[0];\r\n            return new TestCase(3, name, singleton(new TestCase(0, name, test_1, state)));\r\n        }\r\n    }\r\n}\r\n\r\nexport const Env_insideBrowser = (new Function(\"try {return this===window;}catch(e){ return false;}\"))();\r\n\r\nexport function Expect_notEqual(actual, expected, msg) {\r\n    assertNotEqual(actual, expected, msg);\r\n}\r\n\r\nexport function Expect_isTrue(cond) {\r\n    return (msg) => {\r\n        const actual = cond;\r\n        const expected_1 = true;\r\n        const msg_1 = msg;\r\n        if ((actual === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n            assertEqual(actual, expected_1, msg_1);\r\n        }\r\n        else {\r\n            let valueType;\r\n            let copyOfStruct = actual;\r\n            valueType = bool_type;\r\n            const primitiveTypes = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n            let errorMsg;\r\n            if (contains(valueType, primitiveTypes, {\r\n                Equals: equals,\r\n                GetHashCode: structuralHash,\r\n            })) {\r\n                const arg20 = toString(actual);\r\n                const arg10 = toString(expected_1);\r\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg_1);\r\n            }\r\n            else {\r\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual)(msg_1);\r\n            }\r\n            throw (new Error(errorMsg));\r\n        }\r\n    };\r\n}\r\n\r\nexport function Expect_isFalse(cond) {\r\n    return (msg) => {\r\n        const actual = cond;\r\n        const expected_1 = false;\r\n        const msg_1 = msg;\r\n        if ((actual === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n            assertEqual(actual, expected_1, msg_1);\r\n        }\r\n        else {\r\n            let valueType;\r\n            let copyOfStruct = actual;\r\n            valueType = bool_type;\r\n            const primitiveTypes = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n            let errorMsg;\r\n            if (contains(valueType, primitiveTypes, {\r\n                Equals: equals,\r\n                GetHashCode: structuralHash,\r\n            })) {\r\n                const arg20 = toString(actual);\r\n                const arg10 = toString(expected_1);\r\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg_1);\r\n            }\r\n            else {\r\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual)(msg_1);\r\n            }\r\n            throw (new Error(errorMsg));\r\n        }\r\n    };\r\n}\r\n\r\nexport function Expect_isZero(number) {\r\n    return (msg) => {\r\n        const actual_1 = 0;\r\n        const expected = number | 0;\r\n        const msg_1 = msg;\r\n        if ((actual_1 === expected) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n            assertEqual(actual_1, expected, msg_1);\r\n        }\r\n        else {\r\n            let valueType;\r\n            let copyOfStruct = actual_1 | 0;\r\n            valueType = int32_type;\r\n            const primitiveTypes = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n            let errorMsg;\r\n            if (contains(valueType, primitiveTypes, {\r\n                Equals: equals,\r\n                GetHashCode: structuralHash,\r\n            })) {\r\n                const arg20 = int32ToString(actual_1);\r\n                const arg10 = int32ToString(expected);\r\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg_1);\r\n            }\r\n            else {\r\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected)(actual_1)(msg_1);\r\n            }\r\n            throw (new Error(errorMsg));\r\n        }\r\n    };\r\n}\r\n\r\nexport function Expect_isEmpty(x) {\r\n    const expected = isEmpty(x);\r\n    return (msg) => {\r\n        const actual_1 = true;\r\n        const expected_1 = expected;\r\n        const msg_1 = msg;\r\n        if ((actual_1 === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n            assertEqual(actual_1, expected_1, msg_1);\r\n        }\r\n        else {\r\n            let valueType;\r\n            let copyOfStruct = actual_1;\r\n            valueType = bool_type;\r\n            const primitiveTypes = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n            let errorMsg;\r\n            if (contains(valueType, primitiveTypes, {\r\n                Equals: equals,\r\n                GetHashCode: structuralHash,\r\n            })) {\r\n                const arg20 = toString(actual_1);\r\n                const arg10 = toString(expected_1);\r\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg_1);\r\n            }\r\n            else {\r\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual_1)(msg_1);\r\n            }\r\n            throw (new Error(errorMsg));\r\n        }\r\n    };\r\n}\r\n\r\nexport function Expect_pass() {\r\n    const actual = true;\r\n    const expected = true;\r\n    const msg = \"The test passed\";\r\n    if ((actual === expected) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n        assertEqual(actual, expected, msg);\r\n    }\r\n    else {\r\n        let valueType;\r\n        let copyOfStruct = actual;\r\n        valueType = bool_type;\r\n        const primitiveTypes = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n        let errorMsg;\r\n        if (contains(valueType, primitiveTypes, {\r\n            Equals: equals,\r\n            GetHashCode: structuralHash,\r\n        })) {\r\n            const arg20 = toString(actual);\r\n            const arg10 = toString(expected);\r\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg);\r\n        }\r\n        else {\r\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected)(actual)(msg);\r\n        }\r\n        throw (new Error(errorMsg));\r\n    }\r\n}\r\n\r\nexport function Expect_passWithMsg(message) {\r\n    const actual = true;\r\n    const expected = true;\r\n    const msg = message;\r\n    if ((actual === expected) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n        assertEqual(actual, expected, msg);\r\n    }\r\n    else {\r\n        let valueType;\r\n        let copyOfStruct = actual;\r\n        valueType = bool_type;\r\n        const primitiveTypes = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n        let errorMsg;\r\n        if (contains(valueType, primitiveTypes, {\r\n            Equals: equals,\r\n            GetHashCode: structuralHash,\r\n        })) {\r\n            const arg20 = toString(actual);\r\n            const arg10 = toString(expected);\r\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg);\r\n        }\r\n        else {\r\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected)(actual)(msg);\r\n        }\r\n        throw (new Error(errorMsg));\r\n    }\r\n}\r\n\r\nexport function Expect_isOk(x, message) {\r\n    if (x.tag === 1) {\r\n        const x$0027 = x.fields[0];\r\n        toFail(printf(\"%s. Expected Ok, was Error(%A).\"))(message)(x$0027);\r\n    }\r\n    else {\r\n        Expect_passWithMsg(message);\r\n    }\r\n}\r\n\r\nexport function Expect_stringContains(subject, substring, message) {\r\n    if (!(subject.indexOf(substring) >= 0)) {\r\n        toFail(printf(\"%s. Expected subject string \\u0027%s\\u0027 to contain substring \\u0027%s\\u0027.\"))(message)(subject)(substring);\r\n    }\r\n    else {\r\n        Expect_passWithMsg(message);\r\n    }\r\n}\r\n\r\nclass Html_Node extends Record {\r\n    constructor(Tag, Attributes, Content, Children) {\r\n        super();\r\n        this.Tag = Tag;\r\n        this.Attributes = Attributes;\r\n        this.Content = Content;\r\n        this.Children = Children;\r\n    }\r\n}\r\n\r\nfunction Html_Node$reflection() {\r\n    return record_type(\"Fable.Mocha.Html.Node\", [], Html_Node, () => [[\"Tag\", string_type], [\"Attributes\", list_type(tuple_type(string_type, string_type))], [\"Content\", string_type], [\"Children\", list_type(Html_Node$reflection())]]);\r\n}\r\n\r\nfunction Html_createNode(node) {\r\n    const el = document.createElement(node.Tag);\r\n    el.innerHTML = node.Content;\r\n    const enumerator = getEnumerator(node.Attributes);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const forLoopVar = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            const attrValue = forLoopVar[1];\r\n            const attrName = forLoopVar[0];\r\n            el.setAttribute(attrName, attrValue);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    const enumerator_1 = getEnumerator(node.Children);\r\n    try {\r\n        while (enumerator_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const child = enumerator_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            const childElement = Html_createNode(child);\r\n            el.appendChild(childElement);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator_1.Dispose();\r\n    }\r\n    return el;\r\n}\r\n\r\nfunction Html_simpleDiv(attrs, content) {\r\n    return new Html_Node(\"div\", attrs, content, empty());\r\n}\r\n\r\nfunction Html_div(attrs, children) {\r\n    return new Html_Node(\"div\", attrs, \"\", children);\r\n}\r\n\r\nexport function Mocha_isFocused(test) {\r\n    let pattern_matching_result, tests, tests_1;\r\n    if (test.tag === 1) {\r\n        if (test.fields[2].tag === 2) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n    }\r\n    else if (test.tag === 2) {\r\n        pattern_matching_result = 2;\r\n        tests = test.fields[1];\r\n    }\r\n    else if (test.tag === 3) {\r\n        pattern_matching_result = 3;\r\n        tests_1 = test.fields[1];\r\n    }\r\n    else if (test.fields[2].tag === 2) {\r\n        pattern_matching_result = 0;\r\n    }\r\n    else {\r\n        pattern_matching_result = 4;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return true;\r\n        }\r\n        case 2: {\r\n            return exists(Mocha_isFocused, tests);\r\n        }\r\n        case 3: {\r\n            return exists(Mocha_isFocused, tests_1);\r\n        }\r\n        case 4: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nfunction Mocha_runSyncTestInBrowser(name, test, padding) {\r\n    try {\r\n        test();\r\n        return Html_simpleDiv(ofArray([[\"data-test\", name], [\"class\", \"passed\"], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:green\"))(padding)]]), toText(printf(\"✔ %s\"))(name));\r\n    }\r\n    catch (ex) {\r\n        const error = new Html_Node(\"div\", singleton([\"style\", \"font-size:16px;color:red;margin:10px; padding:10px; border: 1px solid red; border-radius: 10px;\"]), ex.message, empty());\r\n        return Html_div(empty(), ofArray([Html_simpleDiv(ofArray([[\"data-test\", name], [\"class\", \"failed\"], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:red\"))(padding)]]), toText(printf(\"✘ %s\"))(name)), error]));\r\n    }\r\n}\r\n\r\nfunction Mocha_runAsyncTestInBrowser(name, test, padding) {\r\n    let id;\r\n    let copyOfStruct = newGuid();\r\n    id = copyOfStruct;\r\n    startImmediate(singleton_1.Delay(() => singleton_1.Bind(sleep(1000), () => singleton_1.Bind(catchAsync(test), (_arg2) => {\r\n        if (_arg2.tag === 1) {\r\n            const err = _arg2.fields[0];\r\n            const div_1 = document.getElementById(id);\r\n            div_1.innerHTML = toText(printf(\"✘ %s\"))(name);\r\n            const error = new Html_Node(\"div\", singleton([\"style\", \"margin:10px; padding:10px; border: 1px solid red; border-radius: 10px\"]), err.message, empty());\r\n            div_1.setAttribute(\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:red\"))(padding));\r\n            div_1.setAttribute(\"class\", \"failed\");\r\n            div_1.appendChild(Html_createNode(error));\r\n            return singleton_1.Zero();\r\n        }\r\n        else {\r\n            const div = document.getElementById(id);\r\n            div.innerHTML = toText(printf(\"✔ %s\"))(name);\r\n            div.setAttribute(\"class\", \"passed\");\r\n            div.setAttribute(\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:green\"))(padding));\r\n            return singleton_1.Zero();\r\n        }\r\n    }))));\r\n    return Html_simpleDiv(ofArray([[\"id\", id], [\"data-test\", name], [\"class\", \"executing\"], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:gray\"))(padding)]]), toText(printf(\"⏳ %s\"))(name));\r\n}\r\n\r\nfunction Mocha_runAsyncSequentialTestInBrowser(name, test, padding) {\r\n    let id;\r\n    let copyOfStruct = newGuid();\r\n    id = copyOfStruct;\r\n    return [singleton_1.Delay(() => singleton_1.Bind(sleep(1000), () => singleton_1.Bind(catchAsync(test), (_arg2) => {\r\n        if (_arg2.tag === 1) {\r\n            const err = _arg2.fields[0];\r\n            const div_1 = document.getElementById(id);\r\n            div_1.innerHTML = toText(printf(\"✘ %s\"))(name);\r\n            const error = new Html_Node(\"div\", singleton([\"style\", \"margin:10px; padding:10px; border: 1px solid red; border-radius: 10px\"]), err.message, empty());\r\n            div_1.setAttribute(\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:red\"))(padding));\r\n            div_1.setAttribute(\"class\", \"failed\");\r\n            div_1.appendChild(Html_createNode(error));\r\n            return singleton_1.Zero();\r\n        }\r\n        else {\r\n            const div = document.getElementById(id);\r\n            div.innerHTML = toText(printf(\"✔ %s\"))(name);\r\n            div.setAttribute(\"class\", \"passed\");\r\n            div.setAttribute(\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:green\"))(padding));\r\n            return singleton_1.Zero();\r\n        }\r\n    }))), Html_simpleDiv(ofArray([[\"id\", id], [\"data-test\", name], [\"class\", \"executing\"], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:gray\"))(padding)]]), toText(printf(\"⏳ %s\"))(name))];\r\n}\r\n\r\nfunction Mocha_flattenTests(lastName, _arg1) {\r\n    switch (_arg1.tag) {\r\n        case 1: {\r\n            const test_1 = _arg1.fields[1];\r\n            const state_1 = _arg1.fields[2];\r\n            const name_1 = _arg1.fields[0];\r\n            const modifiedName_1 = isNullOrWhiteSpace(lastName) ? name_1 : toText(printf(\"%s - %s\"))(lastName)(name_1);\r\n            return singleton(new TestCase(1, modifiedName_1, test_1, state_1));\r\n        }\r\n        case 2: {\r\n            const tests = _arg1.fields[1];\r\n            const name_2 = _arg1.fields[0];\r\n            return ofSeq(delay(() => collect((test_2) => Mocha_flattenTests(name_2, test_2), tests)));\r\n        }\r\n        case 3: {\r\n            const tests_1 = _arg1.fields[1];\r\n            const name_3 = _arg1.fields[0];\r\n            return ofSeq(delay(() => collect((test_3) => Mocha_flattenTests(name_3, test_3), tests_1)));\r\n        }\r\n        default: {\r\n            const test = _arg1.fields[1];\r\n            const state = _arg1.fields[2];\r\n            const name = _arg1.fields[0];\r\n            const modifiedName = isNullOrWhiteSpace(lastName) ? name : toText(printf(\"%s - %s\"))(lastName)(name);\r\n            return singleton(new TestCase(0, modifiedName, test, state));\r\n        }\r\n    }\r\n}\r\n\r\nfunction Mocha_renderBrowserTests(hasFocusedTests, tests, padding) {\r\n    return map((_arg1) => {\r\n        switch (_arg1.tag) {\r\n            case 1: {\r\n                const test_1 = _arg1.fields[1];\r\n                const name_1 = _arg1.fields[0];\r\n                const focus_1 = _arg1.fields[2];\r\n                let pattern_matching_result;\r\n                if (focus_1.tag === 0) {\r\n                    if (hasFocusedTests) {\r\n                        pattern_matching_result = 0;\r\n                    }\r\n                    else {\r\n                        pattern_matching_result = 1;\r\n                    }\r\n                }\r\n                else {\r\n                    pattern_matching_result = 1;\r\n                }\r\n                switch (pattern_matching_result) {\r\n                    case 0: {\r\n                        return Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_1], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to other focused tests\"))(name_1));\r\n                    }\r\n                    case 1: {\r\n                        switch (focus_1.tag) {\r\n                            case 1: {\r\n                                return Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_1], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to it being marked as pending\"))(name_1));\r\n                            }\r\n                            case 2: {\r\n                                return Mocha_runAsyncTestInBrowser(name_1, test_1, padding);\r\n                            }\r\n                            default: {\r\n                                return Mocha_runAsyncTestInBrowser(name_1, test_1, padding);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            case 2: {\r\n                const testCases = _arg1.fields[1];\r\n                const name_2 = _arg1.fields[0];\r\n                const tests_1 = Html_div(empty(), Mocha_renderBrowserTests(hasFocusedTests, testCases, padding + 10));\r\n                const header = new Html_Node(\"div\", ofArray([[\"class\", \"module\"], [\"data-module\", name_2], [\"style\", toText(printf(\"font-size:20px; padding:%dpx\"))(padding)]]), name_2, singleton(tests_1));\r\n                return Html_div(empty(), singleton(header));\r\n            }\r\n            case 3: {\r\n                const testCases_1 = _arg1.fields[1];\r\n                const name_3 = _arg1.fields[0];\r\n                const xs = choose((_arg2) => {\r\n                    switch (_arg2.tag) {\r\n                        case 0: {\r\n                            const testName = _arg2.fields[0];\r\n                            const focusedState = _arg2.fields[2];\r\n                            const actualTest = _arg2.fields[1];\r\n                            let pattern_matching_result_1;\r\n                            if (focusedState.tag === 0) {\r\n                                if (hasFocusedTests) {\r\n                                    pattern_matching_result_1 = 0;\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_1 = 1;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_1 = 1;\r\n                            }\r\n                            switch (pattern_matching_result_1) {\r\n                                case 0: {\r\n                                    const op = singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => singleton_1.Return()));\r\n                                    const result = [op, Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_3], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to other focused tests\"))(name_3))];\r\n                                    return result;\r\n                                }\r\n                                case 1: {\r\n                                    switch (focusedState.tag) {\r\n                                        case 2:\r\n                                        case 0: {\r\n                                            const operation = singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => {\r\n                                                actualTest();\r\n                                                return singleton_1.Zero();\r\n                                            }));\r\n                                            return Mocha_runAsyncSequentialTestInBrowser(testName, operation, padding + 10);\r\n                                        }\r\n                                        default: {\r\n                                            const op_1 = singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => singleton_1.Return()));\r\n                                            const result_1 = [op_1, Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_3], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to it being marked as pending\"))(name_3))];\r\n                                            return result_1;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        case 1: {\r\n                            const testName_1 = _arg2.fields[0];\r\n                            const focusedState_1 = _arg2.fields[2];\r\n                            const actualTest_1 = _arg2.fields[1];\r\n                            let pattern_matching_result_2;\r\n                            if (focusedState_1.tag === 0) {\r\n                                if (hasFocusedTests) {\r\n                                    pattern_matching_result_2 = 0;\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_2 = 1;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_2 = 1;\r\n                            }\r\n                            switch (pattern_matching_result_2) {\r\n                                case 0: {\r\n                                    const op_2 = singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => singleton_1.Return()));\r\n                                    const result_2 = [op_2, Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_3], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to other focused tests\"))(name_3))];\r\n                                    return result_2;\r\n                                }\r\n                                case 1: {\r\n                                    switch (focusedState_1.tag) {\r\n                                        case 2:\r\n                                        case 0: {\r\n                                            return Mocha_runAsyncSequentialTestInBrowser(testName_1, actualTest_1, padding + 10);\r\n                                        }\r\n                                        default: {\r\n                                            const op_3 = singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => singleton_1.Return()));\r\n                                            const result_3 = [op_3, Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_3], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to it being marked as pending\"))(name_3))];\r\n                                            return result_3;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        default: {\r\n                            return void 0;\r\n                        }\r\n                    }\r\n                }, Mocha_flattenTests(\"\", new TestCase(3, \"\", testCases_1)));\r\n                const nodes = map((tuple) => tuple[1], xs);\r\n                const tests_2 = Html_div(empty(), nodes);\r\n                const header_1 = new Html_Node(\"div\", ofArray([[\"class\", \"module\"], [\"data-module\", name_3], [\"style\", toText(printf(\"font-size:20px; padding:%dpx\"))(padding)]]), name_3, singleton(tests_2));\r\n                const asyncOps = map((tuple_1) => tuple_1[0], xs);\r\n                startImmediate(ignore(singleton_1.Delay(() => singleton_1.Combine(singleton_1.For(asyncOps, (_arg8) => {\r\n                    const op_4 = _arg8;\r\n                    return singleton_1.Bind(op_4, () => {\r\n                        return singleton_1.Zero();\r\n                    });\r\n                }), singleton_1.Delay(() => singleton_1.Return())))));\r\n                return Html_div(empty(), singleton(header_1));\r\n            }\r\n            default: {\r\n                const test = _arg1.fields[1];\r\n                const name = _arg1.fields[0];\r\n                const focus = _arg1.fields[2];\r\n                let pattern_matching_result_3;\r\n                if (focus.tag === 0) {\r\n                    if (hasFocusedTests) {\r\n                        pattern_matching_result_3 = 0;\r\n                    }\r\n                    else {\r\n                        pattern_matching_result_3 = 1;\r\n                    }\r\n                }\r\n                else {\r\n                    pattern_matching_result_3 = 1;\r\n                }\r\n                switch (pattern_matching_result_3) {\r\n                    case 0: {\r\n                        return Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to other focused tests\"))(name));\r\n                    }\r\n                    case 1: {\r\n                        switch (focus.tag) {\r\n                            case 1: {\r\n                                return Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to it being marked as pending\"))(name));\r\n                            }\r\n                            case 2: {\r\n                                return Mocha_runSyncTestInBrowser(name, test, padding);\r\n                            }\r\n                            default: {\r\n                                return Mocha_runSyncTestInBrowser(name, test, padding);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, tests);\r\n}\r\n\r\nfunction Mocha_configureAsyncTest(test, finished) {\r\n    startImmediate(singleton_1.Delay(() => singleton_1.Bind(catchAsync(test), (_arg1) => {\r\n        if (_arg1.tag === 1) {\r\n            const err = _arg1.fields[0];\r\n            finished(err);\r\n            return singleton_1.Zero();\r\n        }\r\n        else {\r\n            finished();\r\n            return singleton_1.Zero();\r\n        }\r\n    })));\r\n}\r\n\r\nexport function Mocha_invalidateTestResults() {\r\n    startImmediate(singleton_1.Delay(() => {\r\n        const passedCount = (document.getElementsByClassName(\"passed\").length) | 0;\r\n        const failedCount = (document.getElementsByClassName(\"failed\").length) | 0;\r\n        const executingCount = (document.getElementsByClassName(\"executing\").length) | 0;\r\n        const skippedCount = (document.getElementsByClassName(\"pending\").length) | 0;\r\n        const total = (((passedCount + failedCount) + executingCount) + skippedCount) | 0;\r\n        (document.getElementById(\"total-tests\")).innerHTML = toText(printf(\"Test Results (%d total)\"))(total);\r\n        (document.getElementById(\"passed-tests\")).innerHTML = toText(printf(\"✔ %d passed\"))(passedCount);\r\n        (document.getElementById(\"failed-tests\")).innerHTML = toText(printf(\"✘ %d failed\"))(failedCount);\r\n        (document.getElementById(\"executing-tests\")).innerHTML = toText(printf(\"⏳ %d being executed (async)\"))(executingCount);\r\n        (document.getElementById(\"skipped-tests\")).innerHTML = toText(printf(\"🚧 %d pending\"))(skippedCount);\r\n        return (executingCount > 0) ? singleton_1.Bind(sleep(50), () => {\r\n            Mocha_invalidateTestResults();\r\n            return singleton_1.Zero();\r\n        }) : singleton_1.Return();\r\n    }));\r\n}\r\n\r\nfunction Mocha_runViaMocha(test) {\r\n    switch (test.tag) {\r\n        case 1: {\r\n            const test_2 = test.fields[1];\r\n            const msg_1 = test.fields[0];\r\n            const focus_1 = test.fields[2];\r\n            switch (focus_1.tag) {\r\n                case 1: {\r\n                    it.skip(msg_1, ((finished_1) => {\r\n                        Mocha_configureAsyncTest(test_2, finished_1);\r\n                    }));\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    it.only(msg_1, ((finished_2) => {\r\n                        Mocha_configureAsyncTest(test_2, finished_2);\r\n                    }));\r\n                    break;\r\n                }\r\n                default: {\r\n                    it(msg_1, ((finished) => {\r\n                        Mocha_configureAsyncTest(test_2, finished);\r\n                    }));\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        case 2: {\r\n            const testCases = test.fields[1];\r\n            const name = test.fields[0];\r\n            describe(name, () => {\r\n                iterate((test_3) => {\r\n                    Mocha_runViaMocha(test_3);\r\n                }, testCases);\r\n            });\r\n            break;\r\n        }\r\n        case 3: {\r\n            const testCases_1 = test.fields[1];\r\n            const name_1 = test.fields[0];\r\n            describe(name_1, () => {\r\n                iterate((test_4) => {\r\n                    Mocha_runViaMocha(test_4);\r\n                }, testCases_1);\r\n            });\r\n            break;\r\n        }\r\n        default: {\r\n            const test_1 = test.fields[1];\r\n            const msg = test.fields[0];\r\n            const focus = test.fields[2];\r\n            switch (focus.tag) {\r\n                case 1: {\r\n                    it.skip(msg, test_1);\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    it.only(msg, test_1);\r\n                    break;\r\n                }\r\n                default: {\r\n                    it(msg, test_1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function Mocha_runViaDotnet(test) {\r\n    throw (new Error(\"Currently not implemented, use Expecto for now.\"));\r\n    return 1;\r\n}\r\n\r\nexport function Mocha_runTests(test) {\r\n    if (Env_insideBrowser ? true : (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)) {\r\n        const hasFocusedTests = Mocha_isFocused(test);\r\n        const renderedTests = Mocha_renderBrowserTests(hasFocusedTests, singleton(test), 0);\r\n        const testResults = Html_div(singleton([\"style\", \"margin-bottom: 20px\"]), ofArray([Html_simpleDiv(ofArray([[\"id\", \"total-tests\"], [\"style\", \"font-size:20px; margin-bottom:5px\"]]), \"Test Results\"), Html_simpleDiv(ofArray([[\"id\", \"passed-tests\"], [\"style\", \"color:green; margin-left:5px;\"]]), \"Passed\"), Html_simpleDiv(ofArray([[\"id\", \"skipped-tests\"], [\"style\", \"color:#B8860B\"]]), \"Pending\"), Html_simpleDiv(ofArray([[\"id\", \"failed-tests\"], [\"style\", \"color:red;margin-left:5px\"]]), \"Failed\"), Html_simpleDiv(ofArray([[\"id\", \"executing-tests\"], [\"style\", \"color:gray;margin-left:5px\"]]), \"Executing\")]));\r\n        const container = Html_div(singleton([\"style\", \"padding:20px;\"]), ofSeq(delay(() => append(singleton_2(testResults), delay(() => renderedTests)))));\r\n        const element = Html_createNode(container);\r\n        (document.body).appendChild(element);\r\n        Mocha_invalidateTestResults();\r\n        return 0;\r\n    }\r\n    else {\r\n        Mocha_runViaMocha(test);\r\n        return 0;\r\n    }\r\n}\r\n\r\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = LongLib.compare(x, last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = LongLib.compare(x, last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","import { Union } from \"../Client/.fable/fable-library.3.1.2/Types.js\";\r\nimport { union_type, string_type } from \"../Client/.fable/fable-library.3.1.2/Reflection.js\";\r\n\r\nexport class NodeType extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Input\", \"Output\", \"Default\", \"Custom\"];\r\n    }\r\n}\r\n\r\nexport function NodeType$reflection() {\r\n    return union_type(\"Feliz.ReactFlow.NodeType\", [], NodeType, () => [[], [], [], [[\"Item\", string_type]]]);\r\n}\r\n\r\nexport function NodeType__toString(this$) {\r\n    switch (this$.tag) {\r\n        case 1: {\r\n            return \"output\";\r\n        }\r\n        case 2: {\r\n            return \"default\";\r\n        }\r\n        case 3: {\r\n            const name = this$.fields[0];\r\n            return name;\r\n        }\r\n        default: {\r\n            return \"input\";\r\n        }\r\n    }\r\n}\r\n\r\n","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\nimport { symbol } from \"../Numeric.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n    [symbol]() {\n        const _this = this;\n        return {\n            multiply: y => _this.mul(y),\n            toPrecision: sd => _this.toPrecision(sd),\n            toExponential: dp => _this.toExponential(dp),\n            toFixed: dp => _this.toFixed(dp),\n            toHex: () => (Number(_this) >>> 0).toString(16),\n        };\n    }\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[i];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = step.cmp(get_Zero);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = x.cmp(last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","import { makeRangeStepFunction as makeDecimalRangeStepFunction } from \"./Decimal.js\";\nimport { makeRangeStepFunction as makeLongRangeStepFunction } from \"./Long.js\";\nimport { some, value } from \"./Option.js\";\nimport { compare, equals } from \"./Util.js\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nclass Seq {\n    constructor(f) {\n        this.f = f;\n    }\n    [Symbol.iterator]() { return new Seq(this.f); }\n    next() {\n        var _a;\n        this.iter = (_a = this.iter) !== null && _a !== void 0 ? _a : this.f();\n        return this.iter.next();\n    }\n    toString() {\n        return \"seq [\" + Array.from(this).join(\"; \") + \"]\";\n    }\n}\nfunction makeSeq(f) {\n    return new Seq(f);\n}\nfunction isArrayOrBufferView(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs);\n}\nexport function ofArray(xs) {\n    if (Array.isArray(xs)) {\n        return delay(() => xs);\n    }\n    else {\n        return delay(() => unfold((i) => i != null && i < xs.length ? [xs[i], i + 1] : undefined, 0));\n    }\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map((y) => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, undefined];\n        return unfold(() => {\n            var _a, _b;\n            let cur;\n            if (!firstDone) {\n                cur = (_a = iters[0]) === null || _a === void 0 ? void 0 : _a.next();\n                if (cur != null && !cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [undefined, ys[Symbol.iterator]()];\n                }\n            }\n            cur = (_b = iters[1]) === null || _b === void 0 ? void 0 : _b.next();\n            return cur != null && !cur.done ? [cur.value, iters] : undefined;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output;\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = cur.value;\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = undefined;\n                    }\n                }\n            }\n            return innerIter != null ? [output, innerIter] : undefined;\n        }, undefined);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    let cur1;\n    let cur2;\n    let c = 0;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        c = f(cur1.value, cur2.value);\n        if (c !== 0) {\n            break;\n        }\n    }\n    return (c !== 0) ? c : (cur1.done && !cur2.done) ? -1 : (!cur1.done && cur2.done) ? 1 : 0;\n}\nexport function delay(f) {\n    return makeSeq(() => f()[Symbol.iterator]());\n}\nexport function empty() {\n    return delay(() => []);\n}\nexport function singleton(y) {\n    return delay(() => [y]);\n}\nexport function enumerateFromFunctions(factory, moveNext, current) {\n    return delay(() => unfold((e) => moveNext(e) ? [current(e), e] : undefined, factory()));\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : undefined, undefined));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            try {\n                return empty();\n            }\n            finally {\n                finalFn();\n            }\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : undefined;\n            }\n            catch (err) {\n                return undefined;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const ar2 = isArrayOrBufferView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? undefined : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : undefined, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return undefined;\n    }\n    if (isArrayOrBufferView(xs)) {\n        return i < xs.length ? some(xs[i]) : undefined;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return undefined;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => (f(x), undefined), undefined, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => (f(x, y), undefined), undefined, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => (f(i !== null && i !== void 0 ? i : 0, x), undefined), undefined, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => (f(i !== null && i !== void 0 ? i : 0, x, y), undefined), undefined, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? undefined : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return isArrayOrBufferView(xs)\n        ? xs.length\n        : fold((acc, _x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : undefined;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        const cur = iter.next();\n        if (cur.done) {\n            return empty();\n        }\n        const hd = cur.value;\n        const tl = tail(xs);\n        const ys = scan(([_, last], next) => [last, next], [hd, hd], tl);\n        return skip(1, ys);\n    });\n}\nexport function rangeChar(first, last) {\n    const firstNum = first.charCodeAt(0);\n    const lastNum = last.charCodeAt(0);\n    return delay(() => unfold((x) => x <= lastNum ? [String.fromCharCode(x), x + 1] : undefined, firstNum));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeLongRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeDecimal(first, step, last) {\n    const stepFn = makeDecimalRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : undefined, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return undefined;\n        }, undefined);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function skip(n, xs) {\n    return makeSeq(() => {\n        const iter = xs[Symbol.iterator]();\n        for (let i = 1; i <= n; i++) {\n            if (iter.next().done) {\n                throw new Error(\"Seq has not enough elements\");\n            }\n        }\n        return iter;\n    });\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    return skip(1, xs);\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold(() => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, undefined];\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? undefined : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return undefined;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return makeSeq(() => {\n        // Capture a copy of the first value in the closure\n        // so the sequence is restarted every time, see #1230\n        let acc = fst;\n        const iter = {\n            next() {\n                const res = f(acc);\n                if (res != null) {\n                    const v = value(res);\n                    if (v != null) {\n                        acc = v[1];\n                        return { done: false, value: v[0] };\n                    }\n                }\n                return { done: true, value: undefined };\n            },\n        };\n        return iter;\n    });\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return makeSeq(() => {\n        let window = [];\n        const iter = source[Symbol.iterator]();\n        const iter2 = {\n            next() {\n                let cur;\n                while (window.length < windowSize) {\n                    if ((cur = iter.next()).done) {\n                        return { done: true, value: undefined };\n                    }\n                    window.push(cur.value);\n                }\n                const value = window;\n                window = window.slice(1);\n                return { done: false, value };\n            },\n        };\n        return iter2;\n    });\n}\nexport function transpose(source) {\n    return makeSeq(() => {\n        const iters = Array.from(source, (x) => x[Symbol.iterator]());\n        const iter = {\n            next() {\n                if (iters.length === 0) {\n                    return { done: true, value: undefined }; // empty sequence\n                }\n                const results = Array.from(iters, (iter) => iter.next());\n                if (results[0].done) {\n                    if (!results.every((x) => x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    return { done: true, value: undefined };\n                }\n                else {\n                    if (!results.every((x) => !x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    const values = results.map((x) => x.value);\n                    return { done: false, value: values };\n                }\n            },\n        };\n        return iter;\n    });\n}\n","import { sumBy, iterate, map, iterateIndexed, toIterator, concat, getEnumerator } from \"./Seq.js\";\nimport { equals } from \"./Util.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { format } from \"./String.js\";\n\nexport class Dictionary {\n    constructor(pairs, comparer) {\n        const this$ = new FSharpRef(null);\n        this.comparer = comparer;\n        this$.contents = this;\n        this.hashMap = (new Map([]));\n        this[\"init@8-1\"] = 1;\n        const enumerator = getEnumerator(pairs);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const pair = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                Dictionary__Add_5BDDA1(this$.contents, pair[0], pair[1]);\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"Dictionary\";\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const this$ = this;\n        return getEnumerator(this$);\n    }\n    GetEnumerator() {\n        const this$ = this;\n        return getEnumerator(concat(this$.hashMap.values()));\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\n        const this$ = this;\n        Dictionary__Add_5BDDA1(this$, item[0], item[1]);\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        const this$ = this;\n        Dictionary__Clear(this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\n        const this$ = this;\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\n        let pattern_matching_result;\n        if (matchValue != null) {\n            if (equals(matchValue[1], item[1])) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return true;\n            }\n            case 1: {\n                return false;\n            }\n        }\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\n        const this$ = this;\n        iterateIndexed((i, e) => {\n            array[arrayIndex + i] = e;\n        }, this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const this$ = this;\n        return Dictionary__get_Count(this$) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return false;\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\n        const this$ = this;\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\n        if (matchValue != null) {\n            if (equals(matchValue[1], item[1])) {\n                const value = Dictionary__Remove_2B595(this$, item[0]);\n                void value;\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    get size() {\n        const this$ = this;\n        return Dictionary__get_Count(this$) | 0;\n    }\n    clear() {\n        const this$ = this;\n        Dictionary__Clear(this$);\n    }\n    delete(k) {\n        const this$ = this;\n        return Dictionary__Remove_2B595(this$, k);\n    }\n    entries() {\n        const this$ = this;\n        return map((p) => [p[0], p[1]], this$);\n    }\n    get(k) {\n        const this$ = this;\n        return Dictionary__get_Item_2B595(this$, k);\n    }\n    has(k) {\n        const this$ = this;\n        return Dictionary__ContainsKey_2B595(this$, k);\n    }\n    keys() {\n        const this$ = this;\n        return map((p) => p[0], this$);\n    }\n    set(k, v) {\n        const this$ = this;\n        Dictionary__set_Item_5BDDA1(this$, k, v);\n        return this$;\n    }\n    values() {\n        const this$ = this;\n        return map((p) => p[1], this$);\n    }\n    forEach(f, thisArg) {\n        const this$ = this;\n        iterate((p) => {\n            f(p[1], p[0], this$);\n        }, this$);\n    }\n}\n\nexport function Dictionary$reflection(gen0, gen1) {\n    return class_type(\"Fable.Collections.Dictionary\", [gen0, gen1], Dictionary);\n}\n\nexport function Dictionary_$ctor_6623D9B3(pairs, comparer) {\n    return new Dictionary(pairs, comparer);\n}\n\nfunction Dictionary__TryFindIndex_2B595(this$, k) {\n    const h = this$.comparer.GetHashCode(k) | 0;\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return [true, h, matchValue[1].findIndex((pair) => this$.comparer.Equals(k, pair[0]))];\n    }\n    else {\n        return [false, h, -1];\n    }\n}\n\nexport function Dictionary__TryFind_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Dictionary__get_Comparer(this$) {\n    return this$.comparer;\n}\n\nexport function Dictionary__Clear(this$) {\n    this$.hashMap.clear();\n}\n\nexport function Dictionary__get_Count(this$) {\n    return sumBy((pairs) => pairs.length, this$.hashMap.values(), {\n        GetZero: () => 0,\n        Add: (x, y) => (x + y),\n    });\n}\n\nexport function Dictionary__get_Item_2B595(this$, k) {\n    const matchValue = Dictionary__TryFind_2B595(this$, k);\n    if (matchValue != null) {\n        return matchValue[1];\n    }\n    else {\n        throw (new Error(\"The item was not found in collection\"));\n    }\n}\n\nexport function Dictionary__set_Item_5BDDA1(this$, k, v) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]] = [k, v];\n            break;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\n                void undefined;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [[k, v]]);\n            }\n            break;\n        }\n    }\n}\n\nexport function Dictionary__Add_5BDDA1(this$, k, v) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const msg = format(\"An item with the same key has already been added. Key: {0}\", k);\n            throw (new Error(msg));\n            break;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\n                void undefined;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [[k, v]]);\n            }\n            break;\n        }\n    }\n}\n\nexport function Dictionary__ContainsKey_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\nexport function Dictionary__Remove_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\n","import { sumBy, iterate, map, iterateIndexed, toIterator, concat, getEnumerator } from \"./Seq.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { some } from \"./Option.js\";\n\nexport class HashSet {\n    constructor(items, comparer) {\n        const this$ = new FSharpRef(null);\n        this.comparer = comparer;\n        this$.contents = this;\n        this.hashMap = (new Map([]));\n        this[\"init@8-2\"] = 1;\n        const enumerator = getEnumerator(items);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const value = HashSet__Add_2B595(this$.contents, enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                void value;\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"HashSet\";\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const this$ = this;\n        return getEnumerator(this$);\n    }\n    GetEnumerator() {\n        const this$ = this;\n        return getEnumerator(concat(this$.hashMap.values()));\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\n        const this$ = this;\n        const value = HashSet__Add_2B595(this$, item);\n        void value;\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        const this$ = this;\n        HashSet__Clear(this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\n        const this$ = this;\n        return HashSet__Contains_2B595(this$, item);\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\n        const this$ = this;\n        iterateIndexed((i, e) => {\n            array[arrayIndex + i] = e;\n        }, this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const this$ = this;\n        return HashSet__get_Count(this$) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return false;\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\n        const this$ = this;\n        return HashSet__Remove_2B595(this$, item);\n    }\n    get size() {\n        const this$ = this;\n        return HashSet__get_Count(this$) | 0;\n    }\n    add(k) {\n        const this$ = this;\n        const value = HashSet__Add_2B595(this$, k);\n        void value;\n        return this$;\n    }\n    clear() {\n        const this$ = this;\n        HashSet__Clear(this$);\n    }\n    delete(k) {\n        const this$ = this;\n        return HashSet__Remove_2B595(this$, k);\n    }\n    has(k) {\n        const this$ = this;\n        return HashSet__Contains_2B595(this$, k);\n    }\n    keys() {\n        const this$ = this;\n        return map((x) => x, this$);\n    }\n    values() {\n        const this$ = this;\n        return map((x) => x, this$);\n    }\n    entries() {\n        const this$ = this;\n        return map((v) => [v, v], this$);\n    }\n    forEach(f, thisArg) {\n        const this$ = this;\n        iterate((x) => {\n            f(x, x, this$);\n        }, this$);\n    }\n}\n\nexport function HashSet$reflection(gen0) {\n    return class_type(\"Fable.Collections.HashSet\", [gen0], HashSet);\n}\n\nexport function HashSet_$ctor_Z6150332D(items, comparer) {\n    return new HashSet(items, comparer);\n}\n\nfunction HashSet__TryFindIndex_2B595(this$, k) {\n    const h = this$.comparer.GetHashCode(k) | 0;\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return [true, h, matchValue[1].findIndex((v_1) => this$.comparer.Equals(k, v_1))];\n    }\n    else {\n        return [false, h, -1];\n    }\n}\n\nfunction HashSet__TryFind_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return some(getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]]);\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function HashSet__get_Comparer(this$) {\n    return this$.comparer;\n}\n\nexport function HashSet__Clear(this$) {\n    this$.hashMap.clear();\n}\n\nexport function HashSet__get_Count(this$) {\n    return sumBy((pairs) => pairs.length, this$.hashMap.values(), {\n        GetZero: () => 0,\n        Add: (x, y) => (x + y),\n    });\n}\n\nexport function HashSet__Add_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return false;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push(k));\n                void undefined;\n                return true;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [k]);\n                return true;\n            }\n        }\n    }\n}\n\nexport function HashSet__Contains_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\nexport function HashSet__Remove_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\n","import { List } from \"./Types.js\";\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\nimport { FSharpRef, List as List_1 } from \"./Types.js\";\nimport { transpose as transpose_1, pairwise as pairwise_1, collect as collect_1, scanBack as scanBack_1, scan as scan_1, foldBack2 as foldBack2_1, fold2 as fold2_1, fold as fold_1, map as map_1 } from \"./Seq.js\";\nimport { uncurry, count } from \"./Util.js\";\nimport { splitInto as splitInto_1, chunkBySize as chunkBySize_1, permute as permute_1, findIndexBack as findIndexBack_1, tryFindIndexBack as tryFindIndexBack_1 } from \"./Array.js\";\nimport { HashSet } from \"./MutableSet.js\";\nimport { getItemFromDict, addToDict, tryGetValue, addToSet } from \"./MapUtil.js\";\nimport { Dictionary } from \"./MutableMap.js\";\n\nexport function empty() {\n    return new List();\n}\n\nexport function singleton(x) {\n    return new List(x, empty());\n}\n\nexport function cons(x, xs) {\n    return new List(x, xs);\n}\n\nexport function head(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.head;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function tryHead(_arg1) {\n    if (_arg1.tail != null) {\n        return some(_arg1.head);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function tail(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.tail;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function last(_arg1_mut) {\n    last:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return _arg1.head;\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue last;\n            }\n        }\n        else {\n            throw (new Error(\"List was empty\"));\n        }\n        break;\n    }\n}\n\nexport function tryLast(_arg1_mut) {\n    tryLast:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return some(_arg1.head);\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue tryLast;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function compareWith(comparer, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    else {\n        const loop = (xs_1_mut, ys_1_mut) => {\n            loop:\n            while (true) {\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                const matchValue = [xs_1, ys_1];\n                if (matchValue[0].tail != null) {\n                    if (matchValue[1].tail != null) {\n                        const matchValue_1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n                        if (matchValue_1 === 0) {\n                            xs_1_mut = matchValue[0].tail;\n                            ys_1_mut = matchValue[1].tail;\n                            continue loop;\n                        }\n                        else {\n                            return matchValue_1 | 0;\n                        }\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else if (matchValue[1].tail == null) {\n                    return 0;\n                }\n                else {\n                    return -1;\n                }\n                break;\n            }\n        };\n        return loop(xs, ys) | 0;\n    }\n}\n\nexport function foldIndexedAux(f_mut, i_mut, acc_mut, _arg1_mut) {\n    foldIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            f_mut = f;\n            i_mut = (i + 1);\n            acc_mut = f(i, acc, _arg1.head);\n            _arg1_mut = _arg1.tail;\n            continue foldIndexedAux;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function foldIndexed(f, state, xs) {\n    return foldIndexedAux(f, 0, state, xs);\n}\n\nexport function fold(f_mut, state_mut, xs_mut) {\n    fold:\n    while (true) {\n        const f = f_mut, state = state_mut, xs = xs_mut;\n        if (xs.tail != null) {\n            f_mut = f;\n            state_mut = f(state, xs.head);\n            xs_mut = xs.tail;\n            continue fold;\n        }\n        else {\n            return state;\n        }\n        break;\n    }\n}\n\nexport function reverse(xs) {\n    return fold((acc, x) => (new List_1(x, acc)), new List_1(), xs);\n}\n\nexport function foldBack(f, xs, state) {\n    return fold((acc, x) => f(x, acc), state, reverse(xs));\n}\n\nexport function toSeq(xs) {\n    return map_1((x) => x, xs);\n}\n\nexport function ofSeq(xs) {\n    return reverse(fold_1((acc, x) => (new List_1(x, acc)), new List_1(), xs));\n}\n\nexport function concat(lists) {\n    return reverse(fold_1((state, xs) => fold((acc, x) => (new List_1(x, acc)), state, xs), new List_1(), lists));\n}\n\nexport function foldIndexed2Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut) {\n    foldIndexed2Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y);\n                bs_mut = xs;\n                cs_mut = ys;\n                continue foldIndexed2Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed2(f, state, xs, ys) {\n    return foldIndexed2Aux(f, 0, state, xs, ys);\n}\n\nexport function fold2(f, state, xs, ys) {\n    return fold2_1(f, state, xs, ys);\n}\n\nexport function foldBack2(f, xs, ys, state) {\n    return foldBack2_1(f, xs, ys, state);\n}\n\nexport function unfold(f, state) {\n    const unfoldInner = (acc_mut, state_1_mut) => {\n        unfoldInner:\n        while (true) {\n            const acc = acc_mut, state_1 = state_1_mut;\n            const matchValue = f(state_1);\n            if (matchValue != null) {\n                acc_mut = (new List_1(matchValue[0], acc));\n                state_1_mut = matchValue[1];\n                continue unfoldInner;\n            }\n            else {\n                return reverse(acc);\n            }\n            break;\n        }\n    };\n    return unfoldInner(new List_1(), state);\n}\n\nexport function foldIndexed3Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut, ds_mut) {\n    foldIndexed3Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut, ds = ds_mut;\n        const matchValue = [bs, cs, ds];\n        let pattern_matching_result, x, xs, y, ys, z, zs;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                if (matchValue[2].tail != null) {\n                    pattern_matching_result = 1;\n                    x = matchValue[0].head;\n                    xs = matchValue[0].tail;\n                    y = matchValue[1].head;\n                    ys = matchValue[1].tail;\n                    z = matchValue[2].head;\n                    zs = matchValue[2].tail;\n                }\n                else {\n                    pattern_matching_result = 2;\n                }\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            if (matchValue[2].tail == null) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y, z);\n                bs_mut = xs;\n                cs_mut = ys;\n                ds_mut = zs;\n                continue foldIndexed3Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed3(f, seed, xs, ys, zs) {\n    return foldIndexed3Aux(f, 0, seed, xs, ys, zs);\n}\n\nexport function fold3(f, state, xs, ys, zs) {\n    return foldIndexed3((_arg1, acc, x, y, z) => f(acc, x, y, z), state, xs, ys, zs);\n}\n\nexport function scan(f, state, xs) {\n    return ofSeq(scan_1(f, state, xs));\n}\n\nexport function scanBack(f, xs, state) {\n    return ofSeq(scanBack_1(f, xs, state));\n}\n\nexport function length(xs) {\n    return fold((acc, _arg1) => (acc + 1), 0, xs);\n}\n\nexport function append(xs, ys) {\n    return fold((acc, x) => (new List_1(x, acc)), ys, reverse(xs));\n}\n\nexport function collect(f, xs) {\n    return ofSeq(collect_1(f, xs));\n}\n\nexport function map(f, xs) {\n    return reverse(fold((acc, x) => (new List_1(f(x), acc)), new List_1(), xs));\n}\n\nexport function mapIndexed(f, xs) {\n    return reverse(foldIndexed((i, acc, x) => (new List_1(f(i, x), acc)), new List_1(), xs));\n}\n\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\n\nexport function map2(f, xs, ys) {\n    return reverse(fold2((acc, x, y) => (new List_1(f(x, y), acc)), new List_1(), xs, ys));\n}\n\nexport function mapIndexed2(f, xs, ys) {\n    return reverse(foldIndexed2((i, acc, x, y) => (new List_1(f(i, x, y), acc)), new List_1(), xs, ys));\n}\n\nexport function map3(f, xs, ys, zs) {\n    return reverse(fold3((acc, x, y, z) => (new List_1(f(x, y, z), acc)), new List_1(), xs, ys, zs));\n}\n\nexport function mapIndexed3(f, xs, ys, zs) {\n    return reverse(foldIndexed3((i, acc, x, y, z) => (new List_1(f(i, x, y, z), acc)), new List_1(), xs, ys, zs));\n}\n\nexport function mapFold(f, s, xs) {\n    const patternInput_1 = fold((tupledArg, x) => {\n        const patternInput = f(tupledArg[1], x);\n        return [new List_1(patternInput[0], tupledArg[0]), patternInput[1]];\n    }, [new List_1(), s], xs);\n    return [reverse(patternInput_1[0]), patternInput_1[1]];\n}\n\nexport function mapFoldBack(f, xs, s) {\n    return mapFold((s_1, v) => f(v, s_1), s, reverse(xs));\n}\n\nexport function iterate(f, xs) {\n    fold((unitVar0, x) => {\n        f(x);\n    }, void 0, xs);\n}\n\nexport function iterate2(f, xs, ys) {\n    fold2((unitVar0, x, y) => {\n        f(x, y);\n    }, void 0, xs, ys);\n}\n\nexport function iterateIndexed(f, xs) {\n    foldIndexed((i, unitVar1, x) => {\n        f(i, x);\n    }, void 0, xs);\n}\n\nexport function iterateIndexed2(f, xs, ys) {\n    foldIndexed2((i, unitVar1, x, y) => {\n        f(i, x, y);\n    }, void 0, xs, ys);\n}\n\nexport function ofArrayWithTail(xs, tail_1) {\n    let res = tail_1;\n    for (let i = count(xs) - 1; i >= 0; i--) {\n        res = (new List_1(xs[i], res));\n    }\n    return res;\n}\n\nexport function ofArray(xs) {\n    return ofArrayWithTail(xs, new List_1());\n}\n\nexport function isEmpty(_arg1) {\n    if (_arg1.tail == null) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function tryPickIndexedAux(f_mut, i_mut, _arg1_mut) {\n    tryPickIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            const result = f(i, _arg1.head);\n            if (result == null) {\n                f_mut = f;\n                i_mut = (i + 1);\n                _arg1_mut = _arg1.tail;\n                continue tryPickIndexedAux;\n            }\n            else {\n                return result;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function tryPickIndexed(f, xs) {\n    return tryPickIndexedAux(f, 0, xs);\n}\n\nexport function tryPick(f, xs) {\n    return tryPickIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function pick(f, xs) {\n    const matchValue = tryPick(f, xs);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function tryFindIndexed(f, xs) {\n    return tryPickIndexed((i, x) => (f(i, x) ? some(x) : (void 0)), xs);\n}\n\nexport function tryFind(f, xs) {\n    return tryPickIndexed((_arg1, x) => (f(x) ? some(x) : (void 0)), xs);\n}\n\nexport function findIndexed(f, xs) {\n    const matchValue = tryFindIndexed(f, xs);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function find(f, xs) {\n    return findIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function findBack(f, xs) {\n    return find(f, reverse(xs));\n}\n\nexport function tryFindBack(f, xs) {\n    return tryFind(f, reverse(xs));\n}\n\nexport function tryFindIndex(f, xs) {\n    return tryPickIndexed((i, x) => (f(x) ? i : (void 0)), xs);\n}\n\nexport function tryFindIndexBack(f, xs) {\n    return tryFindIndexBack_1(f, Array.from(xs));\n}\n\nexport function findIndex(f, xs) {\n    const matchValue = tryFindIndex(f, xs);\n    if (matchValue != null) {\n        return matchValue | 0;\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function findIndexBack(f, xs) {\n    return findIndexBack_1(f, Array.from(xs));\n}\n\nexport function item(n, xs) {\n    return findIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function tryItem(n, xs) {\n    return tryFindIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function filter(f, xs) {\n    return reverse(fold((acc, x) => (f(x) ? (new List_1(x, acc)) : acc), new List_1(), xs));\n}\n\nexport function partition(f, xs) {\n    return fold(uncurry(2, (tupledArg) => {\n        const lacc = tupledArg[0];\n        const racc = tupledArg[1];\n        return (x) => (f(x) ? [new List_1(x, lacc), racc] : [lacc, new List_1(x, racc)]);\n    }), [new List_1(), new List_1()], reverse(xs));\n}\n\nexport function choose(f, xs) {\n    return reverse(fold((acc, x) => {\n        const matchValue = f(x);\n        return (matchValue == null) ? acc : (new List_1(value_1(matchValue), acc));\n    }, new List_1(), xs));\n}\n\nexport function contains(value, list, eq) {\n    const loop = (xs_mut) => {\n        loop:\n        while (true) {\n            const xs = xs_mut;\n            if (xs.tail != null) {\n                if (eq.Equals(value, xs.head)) {\n                    return true;\n                }\n                else {\n                    xs_mut = xs.tail;\n                    continue loop;\n                }\n            }\n            else {\n                return false;\n            }\n            break;\n        }\n    };\n    return loop(list);\n}\n\nexport function except(itemsToExclude, array, eq) {\n    if (isEmpty(array)) {\n        return array;\n    }\n    else {\n        const cached = new HashSet(itemsToExclude, eq);\n        return filter((arg00) => addToSet(arg00, cached), array);\n    }\n}\n\nexport function initialize(n, f) {\n    let xs = new List_1();\n    for (let i = 0; i <= (n - 1); i++) {\n        xs = (new List_1(f(i), xs));\n    }\n    return reverse(xs);\n}\n\nexport function replicate(n, x) {\n    return initialize(n, (_arg1) => x);\n}\n\nexport function reduce(f, _arg1) {\n    if (_arg1.tail != null) {\n        return fold(f, _arg1.head, _arg1.tail);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function reduceBack(f, _arg1) {\n    if (_arg1.tail != null) {\n        return foldBack(f, _arg1.tail, _arg1.head);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function forAll(f, xs) {\n    return fold((acc, x) => (acc ? f(x) : false), true, xs);\n}\n\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => (acc ? f(x, y) : false), true, xs, ys);\n}\n\nexport function exists(f_mut, _arg1_mut) {\n    exists:\n    while (true) {\n        const f = f_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (f(_arg1.head)) {\n                return true;\n            }\n            else {\n                f_mut = f;\n                _arg1_mut = _arg1.tail;\n                continue exists;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function exists2(f_mut, bs_mut, cs_mut) {\n    exists2:\n    while (true) {\n        const f = f_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return false;\n            }\n            case 1: {\n                if (f(x, y)) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    bs_mut = xs;\n                    cs_mut = ys;\n                    continue exists2;\n                }\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function unzip(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1])], xs, [new List_1(), new List_1()]);\n}\n\nexport function unzip3(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1]), new List_1(tupledArg[2], tupledArg_1[2])], xs, [new List_1(), new List_1(), new List_1()]);\n}\n\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\n\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n\nexport function sort(xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => comparer.Compare(x, y))), xs_1)));\n}\n\nexport function sortBy(projection, xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y)))), xs_1)));\n}\n\nexport function sortDescending(xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1))), xs_1)));\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1))), xs_1)));\n}\n\nexport function sortWith(comparer, xs) {\n    let comparer_1, xs_1;\n    return ofArray((comparer_1 = comparer, (xs_1 = Array.from(xs), (xs_1.sort(comparer_1), xs_1))));\n}\n\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\n\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(li, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), li);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(xs, averager) {\n    return averager.DivideByInt(fold((acc, x) => averager.Add(acc, x), averager.GetZero(), xs), length(xs));\n}\n\nexport function averageBy(f, xs, averager) {\n    return averager.DivideByInt(fold((acc, x) => averager.Add(acc, f(x)), averager.GetZero(), xs), length(xs));\n}\n\nexport function permute(f, xs) {\n    return ofArray(permute_1(f, Array.from(xs)));\n}\n\nexport function chunkBySize(chunkSize, xs) {\n    return map(ofArray, ofArray(chunkBySize_1(chunkSize, Array.from(xs))));\n}\n\nexport function skip(i, xs) {\n    const skipInner = (i_1_mut, xs_1_mut) => {\n        skipInner:\n        while (true) {\n            const i_1 = i_1_mut, xs_1 = xs_1_mut;\n            const matchValue = [i_1, xs_1];\n            if (matchValue[0] === 0) {\n                return xs_1;\n            }\n            else if (matchValue[1].tail != null) {\n                i_1_mut = (i_1 - 1);\n                xs_1_mut = matchValue[1].tail;\n                continue skipInner;\n            }\n            else {\n                throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n            }\n            break;\n        }\n    };\n    const matchValue_1 = [i, xs];\n    if (matchValue_1[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_4, xs_4;\n        if (matchValue_1[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue_1[0] === 1) {\n            if (matchValue_1[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_4 = matchValue_1[0];\n                xs_4 = matchValue_1[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_4 = matchValue_1[0];\n            xs_4 = matchValue_1[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return xs;\n            }\n            case 1: {\n                return matchValue_1[1].tail;\n            }\n            case 2: {\n                return skipInner(i_4, xs_4);\n            }\n        }\n    }\n}\n\nexport function skipWhile(predicate_mut, xs_mut) {\n    skipWhile:\n    while (true) {\n        const predicate = predicate_mut, xs = xs_mut;\n        let pattern_matching_result, h_1, t_1;\n        if (xs.tail != null) {\n            if (predicate(xs.head)) {\n                pattern_matching_result = 0;\n                h_1 = xs.head;\n                t_1 = xs.tail;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                predicate_mut = predicate;\n                xs_mut = t_1;\n                continue skipWhile;\n            }\n            case 1: {\n                return xs;\n            }\n        }\n        break;\n    }\n}\n\nexport function takeSplitAux(error_mut, i_mut, acc_mut, xs_mut) {\n    takeSplitAux:\n    while (true) {\n        const error = error_mut, i = i_mut, acc = acc_mut, xs = xs_mut;\n        const matchValue = [i, xs];\n        if (matchValue[0] === 0) {\n            return [reverse(acc), xs];\n        }\n        else if (matchValue[1].tail != null) {\n            error_mut = error;\n            i_mut = (i - 1);\n            acc_mut = (new List_1(matchValue[1].head, acc));\n            xs_mut = matchValue[1].tail;\n            continue takeSplitAux;\n        }\n        else if (error) {\n            throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n        }\n        else {\n            return [reverse(acc), xs];\n        }\n        break;\n    }\n}\n\nexport function take(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_1)[0];\n            }\n        }\n    }\n}\n\nexport function takeWhile(predicate, xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail == null) {\n            if (predicate(xs.head)) {\n                return xs;\n            }\n            else {\n                return xs.tail;\n            }\n        }\n        else if (!predicate(xs.head)) {\n            return new List_1();\n        }\n        else {\n            return new List_1(xs.head, takeWhile(predicate, xs.tail));\n        }\n    }\n    else {\n        return xs;\n    }\n}\n\nexport function truncate(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                return takeSplitAux(false, i_3, new List_1(), xs_1)[0];\n            }\n        }\n    }\n}\n\nexport function splitAt(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_2;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_2 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_2 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return [new List_1(), xs];\n            }\n            case 1: {\n                return [new List_1(matchValue[1].head, new List_1()), matchValue[1].tail];\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_2);\n            }\n        }\n    }\n}\n\nexport function outOfRange() {\n    throw (new Error(\"Index out of range\"));\n}\n\nexport function getSlice(lower, upper, xs) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const hasUpper = upper != null;\n    if (lower_1 < 0) {\n        return outOfRange();\n    }\n    else if (hasUpper ? (value_1(upper) < lower_1) : false) {\n        return new List_1();\n    }\n    else {\n        let lastIndex = -1;\n        const res = foldIndexed((i, acc, x) => {\n            lastIndex = i;\n            if ((lower_1 <= i) ? ((!hasUpper) ? true : (i <= value_1(upper))) : false) {\n                return new List_1(x, acc);\n            }\n            else {\n                return acc;\n            }\n        }, new List_1(), xs);\n        if ((lower_1 > (lastIndex + 1)) ? true : (hasUpper ? (value_1(upper) > lastIndex) : false)) {\n            outOfRange();\n        }\n        return reverse(res);\n    }\n}\n\nexport function distinctBy(projection, xs, eq) {\n    const hashSet = new HashSet([], eq);\n    return filter((arg) => addToSet(projection(arg), hashSet), xs);\n}\n\nexport function distinct(xs, eq) {\n    return distinctBy((x) => x, xs, eq);\n}\n\nexport function exactlyOne(xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail != null) {\n            throw (new Error(\"Input list too long\\\\nParameter name: list\"));\n        }\n        else {\n            return xs.head;\n        }\n    }\n    else {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: list\"));\n    }\n}\n\nexport function groupBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, new List_1(v, matchValue[1]));\n        }\n        else {\n            addToDict(dict, key, new List_1(v, new List_1()));\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    iterate((key_1) => {\n        result = (new List_1([key_1, reverse(getItemFromDict(dict, key_1))], result));\n    }, keys);\n    return result;\n}\n\nexport function countBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, matchValue[1] + 1);\n        }\n        else {\n            dict.set(key, 1);\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    iterate((key_1) => {\n        result = (new List_1([key_1, getItemFromDict(dict, key_1)], result));\n    }, keys);\n    return result;\n}\n\nexport function where(predicate, source) {\n    return filter(predicate, source);\n}\n\nexport function pairwise(source) {\n    return ofSeq(pairwise_1(source));\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res = new List_1();\n    for (let i = length(source); i >= windowSize; i--) {\n        res = (new List_1(getSlice(i - windowSize, i - 1, source), res));\n    }\n    return res;\n}\n\nexport function splitInto(chunks, source) {\n    return map(ofArray, ofArray(splitInto_1(chunks, Array.from(source))));\n}\n\nexport function transpose(lists) {\n    return ofSeq(map_1(ofSeq, transpose_1(lists)));\n}\n\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { Union } from \"./Types.js\";\nimport { union_type } from \"./Reflection.js\";\nimport { some } from \"./Option.js\";\n\nexport class FSharpResult$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Ok\", \"Error\"];\n    }\n}\n\nexport function FSharpResult$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\n}\n\nexport function Result_Map(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, mapping(result.fields[0]));\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport function Result_MapError(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, mapping(result.fields[0]));\n    }\n}\n\nexport function Result_Bind(binder, result) {\n    if (result.tag === 0) {\n        return binder(result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport class FSharpChoice$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of2\", \"Choice2Of2\"];\n    }\n}\n\nexport function FSharpChoice$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\n}\n\nexport class FSharpChoice$3 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\n    }\n}\n\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\n}\n\nexport class FSharpChoice$4 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\n    }\n}\n\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\n}\n\nexport class FSharpChoice$5 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\n    }\n}\n\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\n}\n\nexport class FSharpChoice$6 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\n    }\n}\n\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\n}\n\nexport class FSharpChoice$7 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\n    }\n}\n\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\n}\n\nexport function Choice_makeChoice1Of2(x) {\n    return new FSharpChoice$2(0, x);\n}\n\nexport function Choice_makeChoice2Of2(x) {\n    return new FSharpChoice$2(1, x);\n}\n\nexport function Choice_tryValueIfChoice1Of2(x) {\n    if (x.tag === 0) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Choice_tryValueIfChoice2Of2(x) {\n    if (x.tag === 1) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { map } from \"./Seq.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { singleton, concat, map, empty, iterate } from \"../fable-library.3.1.2/List.js\";\r\nimport { singleton as singleton_1 } from \"../fable-library.3.1.2/AsyncBuilder.js\";\r\nimport { startImmediate, catchAsync } from \"../fable-library.3.1.2/Async.js\";\r\nimport { Timer_delay } from \"./prelude.fs.js\";\r\n\r\nexport function Cmd_exec(onError, dispatch, cmd) {\r\n    iterate((call) => {\r\n        try {\r\n            call(dispatch);\r\n        }\r\n        catch (ex) {\r\n            onError(ex);\r\n        }\r\n    }, cmd);\r\n}\r\n\r\nexport function Cmd_none() {\r\n    return empty();\r\n}\r\n\r\nexport function Cmd_map(f, cmd) {\r\n    return map((g) => ((arg_1) => {\r\n        g((arg) => {\r\n            arg_1(f(arg));\r\n        });\r\n    }), cmd);\r\n}\r\n\r\nexport function Cmd_batch(cmds) {\r\n    return concat(cmds);\r\n}\r\n\r\nexport function Cmd_ofSub(sub) {\r\n    return singleton(sub);\r\n}\r\n\r\nexport function Cmd_OfFunc_either(task, arg, ofSuccess, ofError) {\r\n    const bind = (dispatch) => {\r\n        try {\r\n            return dispatch(ofSuccess(task(arg)));\r\n        }\r\n        catch (x) {\r\n            return dispatch(ofError(x));\r\n        }\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfFunc_perform(task, arg, ofSuccess) {\r\n    const bind = (dispatch) => {\r\n        try {\r\n            dispatch(ofSuccess(task(arg)));\r\n        }\r\n        catch (x) {\r\n        }\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfFunc_attempt(task, arg, ofError) {\r\n    const bind = (dispatch) => {\r\n        try {\r\n            task(arg);\r\n        }\r\n        catch (x) {\r\n            dispatch(ofError(x));\r\n        }\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfFunc_result(msg) {\r\n    return singleton((dispatch) => {\r\n        dispatch(msg);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsyncWith_either(start, task, arg, ofSuccess, ofError) {\r\n    const bind = (dispatch) => singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\r\n        let x_1, x;\r\n        const r = _arg1;\r\n        dispatch((r.tag === 1) ? (x_1 = r.fields[0], ofError(x_1)) : (x = r.fields[0], ofSuccess(x)));\r\n        return singleton_1.Zero();\r\n    }));\r\n    return singleton((arg_1) => {\r\n        start(bind(arg_1));\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsyncWith_perform(start, task, arg, ofSuccess) {\r\n    const bind = (dispatch) => singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\r\n        const r = _arg1;\r\n        if (r.tag === 0) {\r\n            const x = r.fields[0];\r\n            dispatch(ofSuccess(x));\r\n            return singleton_1.Zero();\r\n        }\r\n        else {\r\n            return singleton_1.Zero();\r\n        }\r\n    }));\r\n    return singleton((arg_1) => {\r\n        start(bind(arg_1));\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsyncWith_attempt(start, task, arg, ofError) {\r\n    const bind = (dispatch) => singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\r\n        const r = _arg1;\r\n        if (r.tag === 1) {\r\n            const x = r.fields[0];\r\n            dispatch(ofError(x));\r\n            return singleton_1.Zero();\r\n        }\r\n        else {\r\n            return singleton_1.Zero();\r\n        }\r\n    }));\r\n    return singleton((arg_1) => {\r\n        start(bind(arg_1));\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsyncWith_result(start, task) {\r\n    const bind = (dispatch) => singleton_1.Delay(() => singleton_1.Bind(task, (_arg1) => {\r\n        const r = _arg1;\r\n        dispatch(r);\r\n        return singleton_1.Zero();\r\n    }));\r\n    return singleton((arg) => {\r\n        start(bind(arg));\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsync_start(x) {\r\n    Timer_delay(0, (_arg1) => {\r\n        startImmediate(x);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfPromise_either(task, arg, ofSuccess, ofError) {\r\n    const bind = (dispatch) => {\r\n        const value_1 = task(arg).then((arg_1) => dispatch(ofSuccess(arg_1))).catch((arg_3) => dispatch(ofError(arg_3)));\r\n        void value_1;\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfPromise_perform(task, arg, ofSuccess) {\r\n    const bind = (dispatch) => {\r\n        const value = task(arg).then((arg_1) => dispatch(ofSuccess(arg_1)));\r\n        void value;\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfPromise_attempt(task, arg, ofError) {\r\n    const bind = (dispatch) => {\r\n        const value_1 = task(arg).catch((arg_2) => {\r\n            dispatch(ofError(arg_2));\r\n        });\r\n        void value_1;\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfPromise_result(task) {\r\n    const bind = (dispatch) => {\r\n        const value = task.then(dispatch);\r\n        void value;\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_attemptFunc(task, arg, ofError) {\r\n    return Cmd_OfFunc_attempt(task, arg, ofError);\r\n}\r\n\r\n","import { some } from \"../fable-library.3.1.2/Option.js\";\r\nimport { create, isLeapYear } from \"../fable-library.3.1.2/Date.js\";\r\nimport { parse } from \"../fable-library.3.1.2/Int32.js\";\r\nimport { split, isNullOrWhiteSpace } from \"../fable-library.3.1.2/String.js\";\r\nimport { equalsWith } from \"../fable-library.3.1.2/Array.js\";\r\nimport { comparePrimitives } from \"../fable-library.3.1.2/Util.js\";\r\nimport react from \"react\";\r\n\r\nexport function DateParsing_$007CBetween$007C_$007C(x, y, input) {\r\n    if ((input >= x) ? (input <= y) : false) {\r\n        return some(void 0);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function DateParsing_isLeapYear(year) {\r\n    return isLeapYear(year);\r\n}\r\n\r\nexport function DateParsing_$007CInt$007C_$007C(input) {\r\n    try {\r\n        return parse(input, 511, false, 32);\r\n    }\r\n    catch (matchValue) {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function DateParsing_parse(input) {\r\n    try {\r\n        if (isNullOrWhiteSpace(input)) {\r\n            return void 0;\r\n        }\r\n        else {\r\n            const parts = split(input, [\"-\"], null, 0);\r\n            let patternInput;\r\n            let pattern_matching_result, month, year;\r\n            if ((!equalsWith(comparePrimitives, parts, null)) ? (parts.length === 2) : false) {\r\n                const activePatternResult5202 = DateParsing_$007CInt$007C_$007C(parts[0]);\r\n                if (activePatternResult5202 != null) {\r\n                    const activePatternResult5203 = DateParsing_$007CInt$007C_$007C(parts[1]);\r\n                    if (activePatternResult5203 != null) {\r\n                        pattern_matching_result = 0;\r\n                        month = activePatternResult5203;\r\n                        year = activePatternResult5202;\r\n                    }\r\n                    else {\r\n                        pattern_matching_result = 1;\r\n                    }\r\n                }\r\n                else {\r\n                    pattern_matching_result = 1;\r\n                }\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n            switch (pattern_matching_result) {\r\n                case 0: {\r\n                    patternInput = [year, month, 1, 0, 0];\r\n                    break;\r\n                }\r\n                case 1: {\r\n                    let pattern_matching_result_1, day, month_1, year_1;\r\n                    if ((!equalsWith(comparePrimitives, parts, null)) ? (parts.length === 3) : false) {\r\n                        const activePatternResult5199 = DateParsing_$007CInt$007C_$007C(parts[0]);\r\n                        if (activePatternResult5199 != null) {\r\n                            const activePatternResult5200 = DateParsing_$007CInt$007C_$007C(parts[1]);\r\n                            if (activePatternResult5200 != null) {\r\n                                const activePatternResult5201 = DateParsing_$007CInt$007C_$007C(parts[2]);\r\n                                if (activePatternResult5201 != null) {\r\n                                    pattern_matching_result_1 = 0;\r\n                                    day = activePatternResult5201;\r\n                                    month_1 = activePatternResult5200;\r\n                                    year_1 = activePatternResult5199;\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_1 = 1;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_1 = 1;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_1 = 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        pattern_matching_result_1 = 1;\r\n                    }\r\n                    switch (pattern_matching_result_1) {\r\n                        case 0: {\r\n                            patternInput = [year_1, month_1, day, 0, 0];\r\n                            break;\r\n                        }\r\n                        case 1: {\r\n                            let pattern_matching_result_2, day_1, month_2, year_2;\r\n                            if ((!equalsWith(comparePrimitives, parts, null)) ? (parts.length === 3) : false) {\r\n                                const activePatternResult5197 = DateParsing_$007CInt$007C_$007C(parts[0]);\r\n                                if (activePatternResult5197 != null) {\r\n                                    const activePatternResult5198 = DateParsing_$007CInt$007C_$007C(parts[1]);\r\n                                    if (activePatternResult5198 != null) {\r\n                                        pattern_matching_result_2 = 0;\r\n                                        day_1 = parts[2];\r\n                                        month_2 = activePatternResult5198;\r\n                                        year_2 = activePatternResult5197;\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 1;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_2 = 1;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_2 = 1;\r\n                            }\r\n                            switch (pattern_matching_result_2) {\r\n                                case 0: {\r\n                                    if (day_1.indexOf(\"T\") >= 0) {\r\n                                        const matchValue = split(day_1, [\"T\"], null, 0);\r\n                                        let pattern_matching_result_3, parsedDay, time;\r\n                                        if ((!equalsWith(comparePrimitives, matchValue, null)) ? (matchValue.length === 2) : false) {\r\n                                            const activePatternResult5196 = DateParsing_$007CInt$007C_$007C(matchValue[0]);\r\n                                            if (activePatternResult5196 != null) {\r\n                                                pattern_matching_result_3 = 0;\r\n                                                parsedDay = activePatternResult5196;\r\n                                                time = matchValue[1];\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result_3 = 1;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_3 = 1;\r\n                                        }\r\n                                        switch (pattern_matching_result_3) {\r\n                                            case 0: {\r\n                                                const matchValue_1 = split(time, [\":\"], null, 0);\r\n                                                let pattern_matching_result_4, hour, minute;\r\n                                                if ((!equalsWith(comparePrimitives, matchValue_1, null)) ? (matchValue_1.length === 2) : false) {\r\n                                                    const activePatternResult5194 = DateParsing_$007CInt$007C_$007C(matchValue_1[0]);\r\n                                                    if (activePatternResult5194 != null) {\r\n                                                        const activePatternResult5195 = DateParsing_$007CInt$007C_$007C(matchValue_1[1]);\r\n                                                        if (activePatternResult5195 != null) {\r\n                                                            pattern_matching_result_4 = 0;\r\n                                                            hour = activePatternResult5194;\r\n                                                            minute = activePatternResult5195;\r\n                                                        }\r\n                                                        else {\r\n                                                            pattern_matching_result_4 = 1;\r\n                                                        }\r\n                                                    }\r\n                                                    else {\r\n                                                        pattern_matching_result_4 = 1;\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    pattern_matching_result_4 = 1;\r\n                                                }\r\n                                                switch (pattern_matching_result_4) {\r\n                                                    case 0: {\r\n                                                        const matchValue_2 = [hour, minute];\r\n                                                        let pattern_matching_result_5;\r\n                                                        if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[0]) != null) {\r\n                                                            if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[1]) != null) {\r\n                                                                pattern_matching_result_5 = 0;\r\n                                                            }\r\n                                                            else {\r\n                                                                pattern_matching_result_5 = 1;\r\n                                                            }\r\n                                                        }\r\n                                                        else {\r\n                                                            pattern_matching_result_5 = 1;\r\n                                                        }\r\n                                                        switch (pattern_matching_result_5) {\r\n                                                            case 0: {\r\n                                                                patternInput = [year_2, month_2, parsedDay, hour, minute];\r\n                                                                break;\r\n                                                            }\r\n                                                            case 1: {\r\n                                                                patternInput = [-1, 1, 1, 0, 0];\r\n                                                                break;\r\n                                                            }\r\n                                                        }\r\n                                                        break;\r\n                                                    }\r\n                                                    case 1: {\r\n                                                        patternInput = [-1, 1, 1, 0, 0];\r\n                                                        break;\r\n                                                    }\r\n                                                }\r\n                                                break;\r\n                                            }\r\n                                            case 1: {\r\n                                                patternInput = [-1, 1, 1, 0, 0];\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        patternInput = [-1, 1, 1, 0, 0];\r\n                                    }\r\n                                    break;\r\n                                }\r\n                                case 1: {\r\n                                    patternInput = [-1, 1, 1, 0, 0];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            const year_3 = patternInput[0] | 0;\r\n            const month_3 = patternInput[1] | 0;\r\n            const minute_1 = patternInput[4] | 0;\r\n            const hour_1 = patternInput[3] | 0;\r\n            const day_2 = patternInput[2] | 0;\r\n            if (year_3 <= 0) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue_3 = [month_3, day_2];\r\n                let pattern_matching_result_6;\r\n                if (matchValue_3[0] === 2) {\r\n                    if (DateParsing_$007CBetween$007C_$007C(1, 29, matchValue_3[1]) != null) {\r\n                        if (DateParsing_isLeapYear(year_3)) {\r\n                            pattern_matching_result_6 = 0;\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_6 = 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        pattern_matching_result_6 = 1;\r\n                    }\r\n                }\r\n                else {\r\n                    pattern_matching_result_6 = 1;\r\n                }\r\n                switch (pattern_matching_result_6) {\r\n                    case 0: {\r\n                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\r\n                    }\r\n                    case 1: {\r\n                        let pattern_matching_result_7;\r\n                        if (matchValue_3[0] === 2) {\r\n                            if (DateParsing_$007CBetween$007C_$007C(1, 28, matchValue_3[1]) != null) {\r\n                                if (!DateParsing_isLeapYear(year_3)) {\r\n                                    pattern_matching_result_7 = 0;\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_7 = 1;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_7 = 1;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_7 = 1;\r\n                        }\r\n                        switch (pattern_matching_result_7) {\r\n                            case 0: {\r\n                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\r\n                            }\r\n                            case 1: {\r\n                                let pattern_matching_result_8;\r\n                                if (matchValue_3[0] === 1) {\r\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\r\n                                        pattern_matching_result_8 = 0;\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_8 = 1;\r\n                                    }\r\n                                }\r\n                                else if (matchValue_3[0] === 3) {\r\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\r\n                                        pattern_matching_result_8 = 0;\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_8 = 1;\r\n                                    }\r\n                                }\r\n                                else if (matchValue_3[0] === 5) {\r\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\r\n                                        pattern_matching_result_8 = 0;\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_8 = 1;\r\n                                    }\r\n                                }\r\n                                else if (matchValue_3[0] === 7) {\r\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\r\n                                        pattern_matching_result_8 = 0;\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_8 = 1;\r\n                                    }\r\n                                }\r\n                                else if (matchValue_3[0] === 8) {\r\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\r\n                                        pattern_matching_result_8 = 0;\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_8 = 1;\r\n                                    }\r\n                                }\r\n                                else if (matchValue_3[0] === 10) {\r\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\r\n                                        pattern_matching_result_8 = 0;\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_8 = 1;\r\n                                    }\r\n                                }\r\n                                else if (matchValue_3[0] === 12) {\r\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\r\n                                        pattern_matching_result_8 = 0;\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_8 = 1;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_8 = 1;\r\n                                }\r\n                                switch (pattern_matching_result_8) {\r\n                                    case 0: {\r\n                                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\r\n                                    }\r\n                                    case 1: {\r\n                                        let pattern_matching_result_9;\r\n                                        if (matchValue_3[0] === 4) {\r\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\r\n                                                pattern_matching_result_9 = 0;\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result_9 = 1;\r\n                                            }\r\n                                        }\r\n                                        else if (matchValue_3[0] === 6) {\r\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\r\n                                                pattern_matching_result_9 = 0;\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result_9 = 1;\r\n                                            }\r\n                                        }\r\n                                        else if (matchValue_3[0] === 9) {\r\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\r\n                                                pattern_matching_result_9 = 0;\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result_9 = 1;\r\n                                            }\r\n                                        }\r\n                                        else if (matchValue_3[0] === 11) {\r\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\r\n                                                pattern_matching_result_9 = 0;\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result_9 = 1;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_9 = 1;\r\n                                        }\r\n                                        switch (pattern_matching_result_9) {\r\n                                            case 0: {\r\n                                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\r\n                                            }\r\n                                            case 1: {\r\n                                                return void 0;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (matchValue_4) {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport const Interop_reactApi = react;\r\n\r\n","import { useLayoutEffectWithDeps, useLayoutEffect, useEffectWithDeps, useEffect, useDebugValue } from \"./ReactInterop.js\";\r\nimport { class_type } from \"../fable-library.3.1.2/Reflection.js\";\r\nimport { iterate } from \"../fable-library.3.1.2/Seq.js\";\r\nimport { defaultArg, some, toArray } from \"../fable-library.3.1.2/Option.js\";\r\nimport { Interop_reactApi } from \"./Interop.fs.js\";\r\nimport { curry, uncurry } from \"../fable-library.3.1.2/Util.js\";\r\nimport { useState } from \"react\";\r\nimport * as react from \"react\";\r\n\r\nexport const ReactInterop_useDebugValueWithFormatter = useDebugValue;\r\n\r\nexport const ReactInterop_useEffect = useEffect;\r\n\r\nexport const ReactInterop_useEffectWithDeps = useEffectWithDeps;\r\n\r\nexport const ReactInterop_useLayoutEffect = useLayoutEffect;\r\n\r\nexport const ReactInterop_useLayoutEffectWithDeps = useLayoutEffectWithDeps;\r\n\r\nexport class Internal {\r\n    constructor() {\r\n    }\r\n}\r\n\r\nexport function Internal$reflection() {\r\n    return class_type(\"Feliz.Internal\", void 0, Internal);\r\n}\r\n\r\nexport function Internal_$ctor() {\r\n    return new Internal();\r\n}\r\n\r\n(() => {\r\n})();\r\n\r\nexport function Internal_functionComponent_Z1B155329(renderElement, name, withKey) {\r\n    iterate((name_1) => {\r\n        renderElement.displayName = name_1;\r\n    }, toArray(name));\r\n    console.warn(some(\"Feliz: using React.functionComponent in Fable 3 is obsolete, please consider using the [\\u003cReactComponent\\u003e] attribute instead which makes Feliz output better Javascript code that is compatible with react-refresh\"));\r\n    return (props) => {\r\n        const props_2 = Internal_propsWithKey(withKey, props);\r\n        return Interop_reactApi.createElement(renderElement, props_2);\r\n    };\r\n}\r\n\r\nexport function Internal_memo_Z603636D8(renderElement, name, areEqual, withKey) {\r\n    const memoElementType = Interop_reactApi.memo(renderElement, uncurry(2, defaultArg(curry(2, areEqual), null)));\r\n    iterate((name_1) => {\r\n        renderElement.displayName = name_1;\r\n    }, toArray(name));\r\n    return (props) => {\r\n        const props_2 = Internal_propsWithKey(withKey, props);\r\n        return Interop_reactApi.createElement(memoElementType, props_2);\r\n    };\r\n}\r\n\r\nfunction Internal_propsWithKey(withKey, props) {\r\n    if (withKey == null) {\r\n        return props;\r\n    }\r\n    else {\r\n        const f = withKey;\r\n        props.key = f(props);\r\n        return props;\r\n    }\r\n}\r\n\r\nexport class React {\r\n    constructor() {\r\n    }\r\n}\r\n\r\nexport function React$reflection() {\r\n    return class_type(\"Feliz.React\", void 0, React);\r\n}\r\n\r\nexport function React_createDisposable_3A5B6456(dispose) {\r\n    return {\r\n        Dispose() {\r\n            dispose();\r\n        },\r\n    };\r\n}\r\n\r\nexport function useReact_useState_FCFD9EF(initializer) {\r\n    return Interop_reactApi.useState(initializer);\r\n}\r\n\r\nexport function useReact_useReducer_2B9E6EA0(update, initialState) {\r\n    return Interop_reactApi.useReducer(update, initialState);\r\n}\r\n\r\nexport function useReact_useEffect_Z5ECA432F(effect) {\r\n    ReactInterop_useEffect(effect);\r\n}\r\n\r\nexport function useReact_useEffect_Z5234A374(effect, dependencies) {\r\n    ReactInterop_useEffectWithDeps(effect, dependencies);\r\n}\r\n\r\nexport function useReact_useLayoutEffect_Z5ECA432F(effect) {\r\n    ReactInterop_useLayoutEffect(effect);\r\n}\r\n\r\nexport function useReact_useLayoutEffect_Z5234A374(effect, dependencies) {\r\n    ReactInterop_useLayoutEffectWithDeps(effect, dependencies);\r\n}\r\n\r\nexport function useReact_useLayoutEffect_3A5B6456(effect) {\r\n    ReactInterop_useLayoutEffect((_arg1) => {\r\n        effect();\r\n        return React_createDisposable_3A5B6456(() => {\r\n            void undefined;\r\n        });\r\n    });\r\n}\r\n\r\nexport function useReact_useLayoutEffect_Z101E1A95(effect, dependencies) {\r\n    ReactInterop_useLayoutEffectWithDeps((_arg2) => {\r\n        effect();\r\n        return React_createDisposable_3A5B6456(() => {\r\n            void undefined;\r\n        });\r\n    }, dependencies);\r\n}\r\n\r\nexport function useReact_useEffectOnce_3A5B6456(effect) {\r\n    useReact_useEffect_Z101E1A95(effect, []);\r\n}\r\n\r\nexport function useReact_useEffectOnce_Z5ECA432F(effect) {\r\n    useReact_useEffect_Z5234A374(effect, []);\r\n}\r\n\r\nexport function useReact_useEffectOnce_6E825304(effect) {\r\n    useReact_useEffect_Z5234A374(() => {\r\n        const disposeOption = effect();\r\n        return {\r\n            Dispose() {\r\n                iterate((d) => {\r\n                    let copyOfStruct = d;\r\n                    copyOfStruct.Dispose();\r\n                }, toArray(disposeOption));\r\n            },\r\n        };\r\n    }, []);\r\n}\r\n\r\nexport function useReact_useEffect_3A5B6456(effect) {\r\n    ReactInterop_useEffect((_arg3) => {\r\n        effect();\r\n        return React_createDisposable_3A5B6456(() => {\r\n            void undefined;\r\n        });\r\n    });\r\n}\r\n\r\nexport function useReact_useEffect_Z101E1A95(effect, dependencies) {\r\n    ReactInterop_useEffectWithDeps((_arg4) => {\r\n        effect();\r\n        return React_createDisposable_3A5B6456(() => {\r\n            void undefined;\r\n        });\r\n    }, dependencies);\r\n}\r\n\r\nexport function useReact_useDebugValue_Z721C83C5(value) {\r\n    ReactInterop_useDebugValueWithFormatter(value, (x) => x);\r\n}\r\n\r\nexport function useReact_useDebugValue_77A55D6D(value, formatter) {\r\n    ReactInterop_useDebugValueWithFormatter(value, formatter);\r\n}\r\n\r\nexport function useReact_useCallback_93353E(callbackFunction, dependencies) {\r\n    return Interop_reactApi.useCallback(callbackFunction, defaultArg(dependencies, []));\r\n}\r\n\r\nexport function useReact_useRef_1505(initialValue) {\r\n    return Interop_reactApi.useRef(initialValue);\r\n}\r\n\r\nexport function useReact_useInputRef() {\r\n    return useReact_useRef_1505(void 0);\r\n}\r\n\r\nexport function useReact_useButtonRef() {\r\n    return useReact_useRef_1505(void 0);\r\n}\r\n\r\nexport function useReact_useElementRef() {\r\n    return useReact_useRef_1505(void 0);\r\n}\r\n\r\nexport function useReact_useMemo_CF4EA67(createFunction, dependencies) {\r\n    return Interop_reactApi.useMemo(createFunction, defaultArg(dependencies, []));\r\n}\r\n\r\nexport function React_functionComponent_2F9D7239(render, withKey) {\r\n    return Internal_functionComponent_Z1B155329(render, void 0, withKey);\r\n}\r\n\r\nexport function React_functionComponent_Z4C5FE1BE(name, render, withKey) {\r\n    return Internal_functionComponent_Z1B155329(render, name, withKey);\r\n}\r\n\r\nexport function React_functionComponent_19A12FB2(render, withKey) {\r\n    return Internal_functionComponent_Z1B155329((arg) => react.createElement(react.Fragment, {}, ...render(arg)), void 0, withKey);\r\n}\r\n\r\nexport function React_functionComponent_2E1DD889(name, render, withKey) {\r\n    return Internal_functionComponent_Z1B155329((arg) => react.createElement(react.Fragment, {}, ...render(arg)), name, withKey);\r\n}\r\n\r\nexport function React_memo_62A0F746(render, withKey, areEqual) {\r\n    return Internal_memo_Z603636D8(render, void 0, areEqual, withKey);\r\n}\r\n\r\nexport function React_memo_6648A89D(name, render, withKey, areEqual) {\r\n    return Internal_memo_Z603636D8(render, name, areEqual, withKey);\r\n}\r\n\r\nexport function React_memo_C2C6BED(render, withKey, areEqual) {\r\n    return Internal_memo_Z603636D8((arg) => react.createElement(react.Fragment, {}, ...render(arg)), void 0, areEqual, withKey);\r\n}\r\n\r\nexport function React_memo_Z4FCC584A(name, render, withKey, areEqual) {\r\n    return Internal_memo_Z603636D8((arg) => react.createElement(react.Fragment, {}, ...render(arg)), name, areEqual, withKey);\r\n}\r\n\r\nexport function React_createContext_1AE444D8(name, defaultValue) {\r\n    const contextObject = Interop_reactApi.createContext(defaultArg(defaultValue, void 0));\r\n    iterate((name_1) => {\r\n        contextObject.displayName = name_1;\r\n    }, toArray(name));\r\n    return contextObject;\r\n}\r\n\r\nexport function React_contextProvider_34D9BBBD(contextObject, contextValue, child) {\r\n    return Interop_reactApi.createElement(contextObject.Provider, {\r\n        value: contextValue,\r\n    }, child);\r\n}\r\n\r\nexport function React_contextProvider_138D2F56(contextObject, contextValue, children) {\r\n    return Interop_reactApi.createElement(contextObject.Provider, {\r\n        value: contextValue,\r\n    }, ...children);\r\n}\r\n\r\nexport function React_contextConsumer_Z68910595(contextObject, render) {\r\n    return Interop_reactApi.createElement(contextObject.Consumer, null, render);\r\n}\r\n\r\nexport function React_contextConsumer_56D53A40(contextObject, render) {\r\n    return Interop_reactApi.createElement(contextObject.Consumer, null, (arg) => react.createElement(react.Fragment, {}, ...render(arg)));\r\n}\r\n\r\nexport function useReact_useContext_37FA55CF(contextObject) {\r\n    return Interop_reactApi.useContext(contextObject);\r\n}\r\n\r\nexport function useReact_useCallbackRef_7C4B0DD6(callback) {\r\n    const lastRenderCallbackRef = useReact_useRef_1505(callback);\r\n    const callbackRef = useReact_useCallback_93353E((arg) => lastRenderCallbackRef.current(arg), []);\r\n    useReact_useLayoutEffect_3A5B6456(() => {\r\n        lastRenderCallbackRef.current = callback;\r\n    });\r\n    return callbackRef;\r\n}\r\n\r\nexport const React_useStateWithUpdater_1505 = useState;\r\n\r\nexport function React_forwardRef_3790D881(render) {\r\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\r\n    return (tupledArg) => {\r\n        let o;\r\n        const props_1 = tupledArg[0];\r\n        const ref_1 = tupledArg[1];\r\n        return Interop_reactApi.createElement(forwardRefType, (o = {\r\n            props: props_1,\r\n            ref: ref_1,\r\n        }, Object.assign({}, o)));\r\n    };\r\n}\r\n\r\nexport function React_forwardRef_7DC3DB1A(name, render) {\r\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\r\n    render.displayName = name;\r\n    return (tupledArg) => {\r\n        let o;\r\n        const props_1 = tupledArg[0];\r\n        const ref_1 = tupledArg[1];\r\n        return Interop_reactApi.createElement(forwardRefType, (o = {\r\n            props: props_1,\r\n            ref: ref_1,\r\n        }, Object.assign({}, o)));\r\n    };\r\n}\r\n\r\nexport function React_strictMode_6E3A73D(children) {\r\n    return Interop_reactApi.createElement(Interop_reactApi.StrictMode, void 0, ...children);\r\n}\r\n\r\nexport function React_lazy$0027_4712D3AE(dynamicImport, props) {\r\n    return Interop_reactApi.createElement(Interop_reactApi.lazy((() => dynamicImport)), props);\r\n}\r\n\r\nexport function React_lazy$0027_Z3D8450FC(dynamicImport, props) {\r\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(dynamicImport), props);\r\n}\r\n\r\nexport function React_suspense_6E3A73D(children) {\r\n    let o;\r\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\r\n        fallback: null,\r\n    }, Object.assign({}, o)), ...children);\r\n}\r\n\r\nexport function React_suspense_Z3796A576(children, fallback) {\r\n    let o;\r\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\r\n        fallback: fallback,\r\n    }, Object.assign({}, o)), ...children);\r\n}\r\n\r\nexport function useReact_useImperativeHandle_596DDC25(ref, createHandle) {\r\n    Interop_reactApi.useImperativeHandle(ref, createHandle);\r\n}\r\n\r\nexport function useReact_useImperativeHandle_Z12F09548(ref, createHandle, dependencies) {\r\n    Interop_reactApi.useImperativeHandle(ref, createHandle, dependencies);\r\n}\r\n\r\nexport function useFeliz_React__React_useState_Static_1505(initial) {\r\n    return Interop_reactApi.useState(initial);\r\n}\r\n\r\nexport const Feliz_React__React_useStateWithUpdater_Static_FCFD9EF = useState;\r\n\r\n","import { isNode, isEdge, Handle } from \"react-flow-renderer\";\r\nimport react$002Dflow$002Drenderer from \"react-flow-renderer\";\r\n\r\nexport const Interop_reactFlow = react$002Dflow$002Drenderer;\r\n\r\nexport const Interop_handle = Handle;\r\n\r\nexport const Helpers_isEdge = isEdge;\r\n\r\nexport const Helpers_isNode = isNode;\r\n\r\n","import { Union, Record } from \"./.fable/fable-library.3.1.2/Types.js\";\r\nimport { union_type, list_type, class_type, record_type, string_type } from \"./.fable/fable-library.3.1.2/Reflection.js\";\r\nimport { NodeType, NodeType__toString } from \"../Feliz.ReactFlow/Types.fs.js\";\r\nimport { singleton, concat, ofArray } from \"./.fable/fable-library.3.1.2/List.js\";\r\nimport { Cmd_none } from \"./.fable/Fable.Elmish.3.1.0/cmd.fs.js\";\r\nimport { useFeliz_React__React_useState_Static_1505 } from \"./.fable/Feliz.1.47.0/React.fs.js\";\r\nimport { createElement } from \"react\";\r\nimport * as react from \"react\";\r\nimport { Interop_reactApi } from \"./.fable/Feliz.1.47.0/Interop.fs.js\";\r\nimport { Interop_reactFlow, Interop_handle } from \"../Feliz.ReactFlow/Interop.fs.js\";\r\nimport { singleton as singleton_1, append, delay } from \"./.fable/fable-library.3.1.2/Seq.js\";\r\nimport { some } from \"./.fable/fable-library.3.1.2/Option.js\";\r\n\r\nexport class FlowElement extends Record {\r\n    constructor(Id, Descr) {\r\n        super();\r\n        this.Id = Id;\r\n        this.Descr = Descr;\r\n    }\r\n}\r\n\r\nexport function FlowElement$reflection() {\r\n    return record_type(\"Index.FlowElement\", [], FlowElement, () => [[\"Id\", string_type], [\"Descr\", string_type]]);\r\n}\r\n\r\nexport class Model extends Record {\r\n    constructor(NodeList$) {\r\n        super();\r\n        this.NodeList = NodeList$;\r\n    }\r\n}\r\n\r\nexport function Model$reflection() {\r\n    return record_type(\"Index.Model\", [], Model, () => [[\"NodeList\", list_type(class_type(\"Feliz.ReactFlow.IElement\"))]]);\r\n}\r\n\r\nexport class Msg extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"AddFlowElement\"];\r\n    }\r\n}\r\n\r\nexport function Msg$reflection() {\r\n    return union_type(\"Index.Msg\", [], Msg, () => [[[\"Item\", FlowElement$reflection()]]]);\r\n}\r\n\r\nexport const initNodes = ofArray([{\r\n    id: \"1\",\r\n    type: NodeType__toString(new NodeType(0)),\r\n    data: {\r\n        label: \"Erdgas Einsatz\",\r\n    },\r\n    style: {\r\n        background: \"yellow\",\r\n        color: \"#332\",\r\n        border: \"1px solid #222138\",\r\n        width: 180,\r\n    },\r\n    position: {\r\n        x: 50,\r\n        y: 30,\r\n    },\r\n}, {\r\n    id: \"2\",\r\n    type: NodeType__toString(new NodeType(2)),\r\n    data: {\r\n        label: \"CityCube\",\r\n    },\r\n    style: {\r\n        background: \"#2e88c9\",\r\n        color: \"white\",\r\n        border: \"1px solid #222138\",\r\n        width: 180,\r\n    },\r\n    position: {\r\n        x: 400,\r\n        y: 30,\r\n    },\r\n}, {\r\n    id: \"3\",\r\n    type: NodeType__toString(new NodeType(1)),\r\n    data: {\r\n        label: \"Strom Absatz\",\r\n    },\r\n    style: {\r\n        background: \"lightblue\",\r\n        color: \"#333\",\r\n        border: \"1px solid #222138\",\r\n        width: 180,\r\n    },\r\n    position: {\r\n        x: 300,\r\n        y: 200,\r\n    },\r\n}, {\r\n    id: \"4\",\r\n    type: NodeType__toString(new NodeType(1)),\r\n    data: {\r\n        label: \"Wärme Absatz\",\r\n    },\r\n    style: {\r\n        background: \"red\",\r\n        color: \"white\",\r\n        border: \"1px solid #222138\",\r\n        width: 180,\r\n    },\r\n    position: {\r\n        x: 500,\r\n        y: 200,\r\n    },\r\n}, {\r\n    id: \"5\",\r\n    type: NodeType__toString(new NodeType(3, \"test\")),\r\n    data: {\r\n        label: \"Test\",\r\n    },\r\n    position: {\r\n        x: 50,\r\n        y: 120,\r\n    },\r\n    style: {\r\n        background: \"lightgreen\",\r\n        border: \"1px solid black\",\r\n        width: 180,\r\n    },\r\n}]);\r\n\r\nexport function init() {\r\n    return [new Model(initNodes), Cmd_none()];\r\n}\r\n\r\nexport function createNode(flowElement) {\r\n    return {\r\n        id: flowElement.Id,\r\n        type: NodeType__toString(new NodeType(2)),\r\n        data: {\r\n            label: flowElement.Descr,\r\n        },\r\n        style: {\r\n            background: \"red\",\r\n            color: \"white\",\r\n            border: \"1px solid #222138\",\r\n            width: 180,\r\n        },\r\n        position: {\r\n            x: 700,\r\n            y: 50,\r\n        },\r\n    };\r\n}\r\n\r\nexport function update(msg, model) {\r\n    const flowElement = msg.fields[0];\r\n    const newNodes = concat([model.NodeList, singleton(createNode(flowElement))]);\r\n    return [new Model(newNodes), Cmd_none()];\r\n}\r\n\r\nexport function Counter() {\r\n    const patternInput = useFeliz_React__React_useState_Static_1505(0);\r\n    const setCount = patternInput[1];\r\n    const count = patternInput[0] | 0;\r\n    return createElement(\"div\", {\r\n        style: {\r\n            padding: 10,\r\n        },\r\n        children: Interop_reactApi.Children.toArray([Interop_reactApi.createElement(Interop_handle, {\r\n            type: \"target\",\r\n            position: \"top\",\r\n        }), createElement(\"button\", {\r\n            style: {\r\n                marginRight: 5,\r\n            },\r\n            onClick: (_arg1) => {\r\n                setCount(count + 1);\r\n            },\r\n            children: \"Increment\",\r\n        }), count]),\r\n    });\r\n}\r\n\r\nexport function view(model, dispatch) {\r\n    return react.createElement(\"div\", {\r\n        style: {\r\n            height: 1000,\r\n        },\r\n    }, Interop_reactApi.createElement(Interop_reactFlow, {\r\n        nodeTypes: {\r\n            test: () => createElement(Counter, null),\r\n        },\r\n        elements: Array.from(delay(() => append(model.NodeList, delay(() => append(singleton_1({\r\n            id: \"e1-2\",\r\n            source: \"1\",\r\n            target: \"2\",\r\n            animated: false,\r\n            label: \"100 MWh\",\r\n            type: \"smoothstep\",\r\n            arrowHeadType: \"arrowclosed\",\r\n            style: {\r\n                stroke: \"blue\",\r\n            },\r\n            labelStyle: {\r\n                fill: \"black\",\r\n                fontWeight: 700,\r\n            },\r\n        }), delay(() => append(singleton_1({\r\n            id: \"e2-3\",\r\n            source: \"2\",\r\n            target: \"3\",\r\n            animated: true,\r\n            label: \"50 MWh\",\r\n            type: \"smoothstep\",\r\n            arrowHeadType: \"arrowclosed\",\r\n            style: {\r\n                stroke: \"blue\",\r\n            },\r\n            labelStyle: {\r\n                fill: \"blue\",\r\n                fontWeight: 700,\r\n            },\r\n        }), delay(() => append(singleton_1({\r\n            id: \"e2-4\",\r\n            source: \"2\",\r\n            target: \"4\",\r\n            animated: true,\r\n            label: \"55 MWh\",\r\n            type: \"smoothstep\",\r\n            arrowHeadType: \"arrowclosed\",\r\n            style: {\r\n                stroke: \"red\",\r\n            },\r\n            labelStyle: {\r\n                fill: \"red\",\r\n                fontWeight: 700,\r\n            },\r\n        }), delay(() => singleton_1({\r\n            id: \"e1-5\",\r\n            source: \"1\",\r\n            target: \"5\",\r\n            type: \"smoothstep\",\r\n            style: {\r\n                stroke: \"black\",\r\n            },\r\n        }))))))))))),\r\n        onElementClick: (delegateArg0, delegateArg1) => {\r\n            console.log(some(delegateArg0));\r\n            window.alert(some(\"You clicked me!\"));\r\n        },\r\n        onNodeDragStop: (delegateArg0_1, delegateArg1_1) => {\r\n            console.log(some(delegateArg0_1));\r\n            window.alert(some(\"You dragged me!\"));\r\n        },\r\n        onElementsRemove: (elements_1) => {\r\n            console.log(some(elements_1));\r\n            window.alert(some(\"You removed me!\"));\r\n        },\r\n        onConnect: (ev_2) => {\r\n            console.log(some(ev_2));\r\n            window.alert(some(\"You connected me!\"));\r\n        },\r\n        onConnectStart: (delegateArg0_2, delegateArg1_2) => {\r\n            console.log(some(delegateArg0_2));\r\n            window.alert(some(\"You started to connect me!\"));\r\n        },\r\n    }));\r\n}\r\n\r\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","import { Record } from \"../Client/.fable/fable-library.3.1.2/Types.js\";\r\nimport { lambda_type, list_type, unit_type, record_type, string_type, class_type } from \"../Client/.fable/fable-library.3.1.2/Reflection.js\";\r\nimport { printf, toText, isNullOrWhiteSpace } from \"../Client/.fable/fable-library.3.1.2/String.js\";\r\nimport { newGuid } from \"../Client/.fable/fable-library.3.1.2/Guid.js\";\r\n\r\nexport class Todo extends Record {\r\n    constructor(Id, Description) {\r\n        super();\r\n        this.Id = Id;\r\n        this.Description = Description;\r\n    }\r\n}\r\n\r\nexport function Todo$reflection() {\r\n    return record_type(\"Shared.Todo\", [], Todo, () => [[\"Id\", class_type(\"System.Guid\")], [\"Description\", string_type]]);\r\n}\r\n\r\nexport function TodoModule_isValid(description) {\r\n    return !isNullOrWhiteSpace(description);\r\n}\r\n\r\nexport function TodoModule_create(description) {\r\n    return new Todo(newGuid(), description);\r\n}\r\n\r\nexport function Route_builder(typeName, methodName) {\r\n    return toText(printf(\"/api/%s/%s\"))(typeName)(methodName);\r\n}\r\n\r\nexport class ITodosApi extends Record {\r\n    constructor(getTodos, addTodo) {\r\n        super();\r\n        this.getTodos = getTodos;\r\n        this.addTodo = addTodo;\r\n    }\r\n}\r\n\r\nexport function ITodosApi$reflection() {\r\n    return record_type(\"Shared.ITodosApi\", [], ITodosApi, () => [[\"getTodos\", lambda_type(unit_type, class_type(\"Microsoft.FSharp.Control.FSharpAsync`1\", [list_type(Todo$reflection())]))], [\"addTodo\", lambda_type(Todo$reflection(), class_type(\"Microsoft.FSharp.Control.FSharpAsync`1\", [Todo$reflection()]))]]);\r\n}\r\n\r\n","import { Test_testCase, Test_testList } from \"../Client/.fable/Fable.Mocha.2.10.0/Mocha.fs.js\";\r\nimport { TodoModule_isValid } from \"../../src/Shared/Shared.fs.js\";\r\nimport { structuralHash, assertEqual } from \"../Client/.fable/fable-library.3.1.2/Util.js\";\r\nimport { equals, class_type, string_type, float64_type, int32_type, bool_type } from \"../Client/.fable/fable-library.3.1.2/Reflection.js\";\r\nimport { singleton, contains, ofArray } from \"../Client/.fable/fable-library.3.1.2/List.js\";\r\nimport { toString } from \"../Client/.fable/fable-library.3.1.2/Types.js\";\r\nimport { printf, toText } from \"../Client/.fable/fable-library.3.1.2/String.js\";\r\n\r\nexport const shared = Test_testList(\"Shared\", singleton(Test_testCase(\"Empty string is not a valid description\", () => {\r\n    const expected = false;\r\n    const actual = TodoModule_isValid(\"\");\r\n    const actual_1 = actual;\r\n    const expected_1 = expected;\r\n    const msg = \"Should be false\";\r\n    if ((actual_1 === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n        assertEqual(actual_1, expected_1, msg);\r\n    }\r\n    else {\r\n        let valueType;\r\n        let copyOfStruct = actual_1;\r\n        valueType = bool_type;\r\n        const primitiveTypes = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n        let errorMsg;\r\n        if (contains(valueType, primitiveTypes, {\r\n            Equals: equals,\r\n            GetHashCode: structuralHash,\r\n        })) {\r\n            const arg20 = toString(actual_1);\r\n            const arg10 = toString(expected_1);\r\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg);\r\n        }\r\n        else {\r\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual_1)(msg);\r\n        }\r\n        throw (new Error(errorMsg));\r\n    }\r\n})));\r\n\r\n","import { Mocha_runTests, Test_testCase, Test_testList } from \"./.fable/Fable.Mocha.2.10.0/Mocha.fs.js\";\r\nimport { createNode, Msg, update, FlowElement, init } from \"../../src/Client/Index.fs.js\";\r\nimport { singleton, last, contains, ofArray, length } from \"./.fable/fable-library.3.1.2/List.js\";\r\nimport { equals as equals_1, int32ToString, structuralHash, assertEqual } from \"./.fable/fable-library.3.1.2/Util.js\";\r\nimport { equals, class_type, string_type, float64_type, bool_type, int32_type } from \"./.fable/fable-library.3.1.2/Reflection.js\";\r\nimport { printf, toText } from \"./.fable/fable-library.3.1.2/String.js\";\r\nimport { toString } from \"./.fable/fable-library.3.1.2/Types.js\";\r\nimport { shared } from \"../Shared/Shared.Tests.fs.js\";\r\n\r\nexport const client = Test_testList(\"Client\", singleton(Test_testCase(\"Added flowElement\", () => {\r\n    const model = init()[0];\r\n    const flowElement = new FlowElement(\"6\", \"AdditionalFlowElement\");\r\n    const model_1 = update(new Msg(0, flowElement), model)[0];\r\n    const actual = 6;\r\n    const expected = length(model_1.NodeList) | 0;\r\n    const msg = \"There should be 7 FlowElements\";\r\n    if ((actual === expected) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n        assertEqual(actual, expected, msg);\r\n    }\r\n    else {\r\n        let valueType;\r\n        let copyOfStruct = actual | 0;\r\n        valueType = int32_type;\r\n        const primitiveTypes = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n        let errorMsg;\r\n        if (contains(valueType, primitiveTypes, {\r\n            Equals: equals,\r\n            GetHashCode: structuralHash,\r\n        })) {\r\n            const arg20 = int32ToString(actual);\r\n            const arg10 = int32ToString(expected);\r\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg);\r\n        }\r\n        else {\r\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected)(actual)(msg);\r\n        }\r\n        throw (new Error(errorMsg));\r\n    }\r\n    const actual_1 = createNode(flowElement);\r\n    const expected_1 = last(model_1.NodeList);\r\n    const msg_1 = \"NodeList should equal new nodeElement\";\r\n    if (equals_1(actual_1, expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\r\n        assertEqual(actual_1, expected_1, msg_1);\r\n    }\r\n    else {\r\n        let valueType_1;\r\n        let copyOfStruct_1 = actual_1;\r\n        valueType_1 = class_type(\"Feliz.ReactFlow.IElement\");\r\n        const primitiveTypes_1 = ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]);\r\n        let errorMsg_1;\r\n        if (contains(valueType_1, primitiveTypes_1, {\r\n            Equals: equals,\r\n            GetHashCode: structuralHash,\r\n        })) {\r\n            const arg20_2 = toString(actual_1);\r\n            const arg10_2 = toString(expected_1);\r\n            errorMsg_1 = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10_2)(arg20_2)(msg_1);\r\n        }\r\n        else {\r\n            errorMsg_1 = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual_1)(msg_1);\r\n        }\r\n        throw (new Error(errorMsg_1));\r\n    }\r\n})));\r\n\r\nexport const all = Test_testList(\"All\", ofArray([shared, client]));\r\n\r\n(function (_arg1) {\r\n    return Mocha_runTests(all);\r\n})(typeof process === 'object' ? process.argv.slice(2) : []);\r\n\r\n"],"sourceRoot":""}