{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Util.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/RegExp.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/String.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/lib/big.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Decimal.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Reflection.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/List.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Option.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/AsyncBuilder.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Types.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Array.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Global.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Seq.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/FSharp.Core.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Numeric.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/SystemException.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Async.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Choice.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Date.js","webpack:///./tests/Client/output/fable_modules/Fable.Mocha.2.12.0/Mocha.fs.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/lib/long.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Long.js","webpack:///./tests/Client/output/src/Feliz.ReactFlow/Types.js","webpack:///./tests/Client/output/fable_modules/Fable.Elmish.3.1.0/cmd.fs.js","webpack:///./tests/Client/output/fable_modules/Feliz.1.58.1/Interop.fs.js","webpack:///./tests/Client/output/fable_modules/Feliz.1.58.1/React.fs.js","webpack:///./tests/Client/output/src/Feliz.ReactFlow/Interop.js","webpack:///./tests/Client/output/src/Client/Index.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Guid.js","webpack:///./tests/Client/output/fable_modules/fable-library.3.7.2/Int32.js","webpack:///./tests/Client/output/src/Shared/Shared.js","webpack:///./tests/Client/output/Shared/Shared.Tests.js","webpack:///./tests/Client/output/Client.Tests.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","isArrayLike","x","Array","isArray","ArrayBuffer","isView","isHashable","GetHashCode","isDisposable","Dispose","disposeSafe","sameConstructor","y","getPrototypeOf","constructor","Enumerator","iter","this","current","cur","next","done","Error","getEnumerator","GetEnumerator","iterator","toIterator","en","hasNext","undefined","assertEqual","actual","expected","msg","equals","assign","assertNotEqual","padWithZeros","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","ObjectRef","idMap","has","set","count","stringHash","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","physicalHash","id","structuralHash","arrayHash","Date","getTime","dateHash","values","map","v","equalArraysWith","eq","equalArrays","Equals","isEquatable","compareDates","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","comparePrimitives","compareArrays","comp","compareArraysWith","compare","CompareTo","isComparable","compareObjects","min","comparer","max","createObj","fields","obj","kv","clear","col","WeakMap","CURRIED","uncurry","arity","f","uncurried","args","res","_curry","arg","concat","curry","escape","replace","fsFormatRegExp","formatRegExp","isLessThan","numericCompare","printf","input","cont","lastIndex","strParts","matches","strIdx","match","exec","matchIndex","index","substring","createPrinter","_strParts","_matches","_result","padArg","flags","_padLength","precision","format","padLength","formatReplacement","continuePrint","toText","toFail","rep","sign","isNumeric","toLowerCase","multiply","indexOf","parseInt","toFixed","toPrecision","toExponential","toHex","toUpperCase","String","dateToString","isNaN","zeroFlag","minusFlag","ch","padLeft","_","idx","pattern","intPart","decimalPart","decimalPartLength","Math","split","thousandGroups","floor","thousands","substr","intPartLength","abs","isNullOrEmpty","isNullOrWhiteSpace","test","join","delimiter","xs","from","isRight","splitters","options","removeEmpty","trim","filter","splits","reg","RegExp","findSplits","candidate","chars","startIndex","P","e","cmp","symbol","_this","mul","sd","dp","Number","NAME","INVALID","INVALID_DP","NUMERIC","parse","nl","charAt","search","round","Big","DP","RM","rm","more","xc","isZero","findIndex","xci","unshift","pop","stringify","doExponential","isNonzero","isneg","yc","k","div","a","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","pow","one","prec","sqrt","half","toJSON","NE","PE","toNumber","strict","valueOf","_Big_","normalize","TypeError","Decimal","CaseInfo","declaringType","tag","TypeInfo","fullname","generics","construct","parent","cases","enumCases","fullName","elemType","getElementType","getHashCode","other","getGenerics","fullnameHash","genHashes","t1","t2","getRecordElements","k1","v1","k2","v2","class_type","record_type","union_type","caseNames","tuple_type","lambda_type","argType","returnType","option_type","generic","list_type","unit_type","string_type","bool_type","int32_type","float64_type","_a","FSharpList","Record","head","tail","super","xs_1_mut","ys_1_mut","loop","xs_1","ys_1","matchValue","xt","yt","i_mut","h_mut","_key","ListEnumerator$1","ListEnumerator$1_$ctor_3002E699","it","__","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Length","FSharpList__get_Head","SR_inputWasEmpty","FSharpList__get_Tail","empty","singleton","isEmpty","tryHead","some","last","xs_mut","tryLast","value_1","toArray","fill","fold","folder","state","acc","iterate","action","unitVar0","ofArray","tail_1","ofArrayWithTail","ofSeq","xs_3","root","node","enumerator","xs_5","t_2","lists","forEach","xs_6","mapping","tryFindIndex","tryItem","choose","contains","exists","Some","opt","defaultArg","defaultValue","CancellationToken","cancelled","_id","_cancelled","_listeners","Map","cancel","listener","addListener","removeListener","delete","register","$","OperationCanceledError","setPrototypeOf","Trampoline","callCount","incrementAndCheck","maxTrampolineCallCount","hijack","setTimeout","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","err","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","Bind","Combine","computation1","computation2","Delay","generator","For","sequence","body","While","Return","ReturnFrom","TryFinally","compensation","TryWith","catchHandler","ex2","Using","resource","guard","Zero","callStack","self","seqToString","cons","entries","Union","fieldStr","withParens","unionToString","recordToJSON","recordToString","recordGetHashCode","recordEquals","thisNames","recordCompareTo","FSharpRef","contentsOrGetter","setter","Exception","message","Helpers_allocateArrayFromCons","differentLengths","target","targetIndex","start","source","mapFold","array","patternInput","mapFoldBack","ar","pairwise","scanBack","tryFindBack","predicate","tryFindIndexBack","iterateIndexed","permute","size","checkFlags","every","chunkBySize","chunkSize","ceil","start_1","equalsWith","array1","array2","length1","length2","foldBack","reduceRight","delegateArg0","delegateArg1","foldBack2","foldBackIndexed2","_arg1","windowed","windowSize","max_1","splitInto","chunks","chunks_1","min_1","minChunkSize","chunksWithExtraItem","transpose","arrays","arrays_1","lenInner","SR_indexOutOfBounds","SR_inputMustBeNonNegative","SR_inputSequenceEmpty","SR_inputSequenceTooLong","SR_keyNotFoundAlt","SR_differentLengths","SR_notEnoughElements","Enumerator_notStarted","Enumerator_alreadyFinished","Enumerator_Seq","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","Enumerator_generateWhileSome","openf","compute","closef","started","curr","x_1","finish","matchValue_1","checkNonNull","argName","Operators_NullArg","mkSeq","Enumerator_Seq_$ctor_673A07F2","delay","sources","outerOpt","innerOpt","finished","inner","outer","copyOfStruct","inner_1","outer_1","Enumerator_concat","singleton_1","toArray_1","toList","ofArray_1","ofSeq_1","generate","append","ys","found","forAll","isEmpty_1","length_1","e_1","collect","emptyContinuation","_x","defaultCancellationToken","catchAsync","work","Choice_makeChoice1Of2","Choice_makeChoice2Of2","ignore","sleep","millisecondsDueTime","tokenId","timeoutId","clearTimeout","startImmediate","cancellationToken","startWithContinuations","continuation","exceptionContinuation","cancellationContinuation","FSharpChoice$2","Choice_tryValueIfChoice1Of2","Choice_tryValueIfChoice2Of2","dateOffsetToString","isMinus","hours","minutes","dateToHalfUTCString","toISOString","dateToStringWithCustomFormat","utc","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","dateToStringWithOffset","_b","_c","dateWithOffset","dateToISOStringWithOffset","dateToStringWithKind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","_provider","DateTime","year","month","day","ms","dateValue","UTC","setFullYear","isLeapYear","FocusState","TestCase","Test_testCase","Test_testList","tests","Env_insideBrowser","Function","Html_Node","Tag","Attributes","Content","Children","Html_createNode","el","document","createElement","innerHTML","forLoopVar","setAttribute","enumerator_1","childElement","appendChild","Html_simpleDiv","attrs","content","Html_div","children","Mocha_isFocused","pattern_matching_result","tests_1","exists_1","Mocha_runSyncTestInBrowser","padding","error","Mocha_runAsyncTestInBrowser","newGuid","_arg2","div_1","getElementById","Mocha_runAsyncSequentialTestInBrowser","Mocha_renderBrowserTests","hasFocusedTests","test_1","name_1","focus_1","name_2","name_3","focusedState","pattern_matching_result_1","focusedState_1","pattern_matching_result_2","Mocha_flattenTests","lastName","test_2","test_3","tests_2","tuple","header_1","asyncOps","tuple_1","_arg8","focus","pattern_matching_result_3","Mocha_configureAsyncTest","Mocha_runTests","WorkerGlobalScope","renderedTests","testResults","element","singleton_2","Mocha_invalidateTestResults","passedCount","getElementsByClassName","failedCount","executingCount","skippedCount","total","Mocha_runViaMocha","msg_1","skip","finished_1","only","finished_2","describe","test_4","wasm","WebAssembly","Instance","Module","Uint8Array","Long","low","high","unsigned","isLong","fromBytes","toBytes","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","isNegative","radixLong","divide","rem1","subtract","rem","remDiv","digits","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","shiftRightUnsigned","shiftLeft","shiftRight","log2","log","LN2","delta","approxRes","approxRem","numBits","le","hi","lo","toBytesLE","toBytesBE","bytes","fromBytesLE","fromBytesBE","op_Addition","LongLib","op_Subtraction","op_Multiply","op_Division","unixEpochMillisecondsToTicks","ticksToUnixEpochMilliseconds","ticks","NodeType","NodeType__toString","this$","Cmd_none","react","useState","react_flow_renderer","Handle","Background","MiniMap","Controls","isEdge","isNode","FlowElement","Id","Descr","Model","NodeList$","NodeList","Msg","initNodes","type","label","style","background","color","border","width","position","init","createNode","flowElement","update","model","random","NumberStyles","getRange","bitsize","isValid","prefix","getInvalidDigits","AllowHexSpecifier","getRadix","regexMatch","validResponse","umin","umax","shared","actual_1","description","errorMsg","arg20","arg10","client","copyOfStruct_1","model_1","expected_1","equals_1","errorMsg_1","arg20_2","arg10_2","all","process","argv"],"mappings":"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","file":"app.d61d56a5850d999da0a7.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([24,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function disposeSafe(x) {\n    if (isDisposable(x)) {\n        x.Dispose();\n    }\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED = Symbol(\"curried\");\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    const uncurried = (...args) => {\n        let res = f;\n        for (let i = 0; i < arity; i++) {\n            res = res(args[i]);\n        }\n        return res;\n    };\n    uncurried[CURRIED] = f;\n    return uncurried;\n}\nfunction _curry(args, arity, f) {\n    return (arg) => arity === 1\n        ? f(...args.concat([arg]))\n        // Note it's important to generate a new args array every time\n        // because a partially applied function can be run multiple times\n        : _curry(args.concat([arg]), arity - 1, f);\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    else if (CURRIED in f) {\n        return f[CURRIED];\n    }\n    else {\n        return _curry([], arity, f);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED in f) {\n        f = f[CURRIED];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        return _curry(args, arity, f);\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.test(input);\n}\nexport function match(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.exec(input);\n}\nexport function matches(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(input);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(input);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        strIdx = interpolateRegExp.lastIndex;\n        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex -= 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        if (idx < 0 || idx >= args.length) {\n            throw new Error(\"Index must be greater or equal to zero and less than the arguments' length.\");\n        }\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            const decimalPartLength = decimalPart != null ? decimalPart.length : 0;\n                            rep = toFixed(rep, Math.max(decimalPartLength - 1, 0));\n                            // Thousands separator\n                            if (intPart.indexOf(\",\") > 0) {\n                                const [intPart, decimalPart] = rep.split(\".\");\n                                const i = intPart.length % 3;\n                                const thousandGroups = Math.floor(intPart.length / 3);\n                                let thousands = i > 0 ? intPart.substr(0, i) + (thousandGroups > 0 ? \",\" : \"\") : \"\";\n                                for (let j = 0; j < thousandGroups; j++) {\n                                    thousands += intPart.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? \",\" : \"\");\n                                }\n                                rep = decimalPart ? thousands + \".\" + decimalPart : thousands;\n                            }\n                            // In .NET you can mix 0/# placeholders but for simplicity we only check the left most character\n                            intPart = intPart.replace(/,/g, \"\");\n                            const intPartLength = intPart.length > 0 && intPart[0] === \"0\" ? intPart.length : 0;\n                            return padLeft(rep, intPartLength - sign.length + decimalPartLength, \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, options) {\n    count = typeof count === \"number\" ? count : undefined;\n    options = typeof options === \"number\" ? options : 0;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    const removeEmpty = (options & 1) === 1;\n    const trim = (options & 2) === 2;\n    splitters = splitters || [];\n    splitters = splitters.filter(x => x).map(escape);\n    splitters = splitters.length > 0 ? splitters : [\"\\\\s\"];\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    let findSplits = true;\n    let i = 0;\n    do {\n        const match = reg.exec(str);\n        if (match === null) {\n            const candidate = trim ? str.substring(i).trim() : str.substring(i);\n            if (!removeEmpty || candidate.length > 0) {\n                splits.push(candidate);\n            }\n            findSplits = false;\n        }\n        else {\n            const candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n            if (!removeEmpty || candidate.length > 0) {\n                if (count != null && splits.length + 1 === count) {\n                    splits.push(trim ? str.substring(i).trim() : str.substring(i));\n                    findSplits = false;\n                }\n                else {\n                    splits.push(candidate);\n                }\n            }\n            i = reg.lastIndex;\n        }\n    } while (findSplits);\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nexport function fmt(strs, ...args) {\n    return ({ strs, args });\n}\nexport function fmtWith(fmts) {\n    return (strs, ...args) => ({ strs, args, fmts });\n}\nexport function getFormat(s) {\n    return s.fmts\n        ? s.strs.reduce((acc, newPart, index) => acc + `{${String(index - 1) + s.fmts[index - 1]}}` + newPart)\n        : s.strs.reduce((acc, newPart, index) => acc + `{${index - 1}}` + newPart);\n}\n","// Adapted from https://github.com/MikeMcl/big.js/blob/0f94dc9110d55c4f324a47ba6a2e832ce23ac589/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\nimport { symbol } from \"../Numeric.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n    [symbol]() {\n        const _this = this;\n        return {\n            multiply: y => _this.mul(y),\n            toPrecision: sd => _this.toPrecision(sd),\n            toExponential: dp => _this.toExponential(dp),\n            toFixed: dp => _this.toFixed(dp),\n            toHex: () => (Number(_this) >>> 0).toString(16),\n        };\n    }\n};\n/*\n *  big.js v6.0.3\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2020 Michael Mclaughlin\n *  https://github.com/MikeMcl/big.js/LICENCE.md\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\n */\nPE = 29, // 0 to 1000000\n/*\n * When true, an error will be thrown if a primitive number is passed to the Big constructor,\n * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\n * primitive number without a loss of precision.\n */\nSTRICT = false, // true or false\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            if (typeof n !== 'string') {\n                if (Big.strict === true) {\n                    throw TypeError(INVALID + 'number');\n                }\n                // Minus zero?\n                n = n === 0 && 1 / n < 0 ? '-0' : String(n);\n            }\n            parse(x, n);\n        }\n        // Retain a reference to this Big constructor.\n        // Shadow Big.prototype.constructor which points to Object.\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.strict = STRICT;\n    return Big;\n}\nfunction normalize(x) {\n    // x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    if (!NUMERIC.test(n)) {\n        throw Error(INVALID + 'number');\n    }\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // original version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP + 1, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\n *\n * x {Big} The Big to round.\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, sd, rm, more) {\n    var xc = x.c;\n    if (rm === UNDEFINED)\n        rm = Big.RM;\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\n        throw Error(INVALID_RM);\n    }\n    if (sd < 1) {\n        more =\n            rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 ||\n                rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));\n        xc.length = 1;\n        if (more) {\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n            x.e = x.e - sd + 1;\n            xc[0] = 1;\n        }\n        else {\n            // Zero.\n            xc[0] = x.e = 0;\n        }\n    }\n    else if (sd < xc.length) {\n        // xc[sd] is the digit after the digit that may be rounded up.\n        const isZero = xc.findIndex((xci, idx) => idx >= sd && xci > 0) < 0;\n        more =\n            rm === 1 && xc[sd] >= 5 ||\n                rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\n                    (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\n                rm === 3 && (more || !isZero);\n        // Remove any digits after the required precision.\n        xc.length = sd--;\n        // Round up?\n        if (more) {\n            // Rounding up may mean the previous digit has to be rounded up.\n            for (; ++xc[sd] > 9;) {\n                xc[sd] = 0;\n                if (!sd--) {\n                    ++x.e;\n                    xc.unshift(1);\n                }\n            }\n        }\n        // Remove trailing zeros.\n        for (sd = xc.length; !xc[--sd];)\n            xc.pop();\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n */\nfunction stringify(x, doExponential, isNonzero) {\n    var e = x.e, s = x.c.join(''), n = s.length;\n    // Exponential notation?\n    if (doExponential) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n) {\n            for (e -= n; e--;)\n                s += '0';\n        }\n        else if (e < n) {\n            s = s.slice(0, e) + '.' + s.slice(e);\n        }\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && isNonzero ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n */\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // original version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n    }\n    // Divisor is zero?\n    if (!b[0]) {\n        throw Error(DIV_BY_ZERO);\n    }\n    // Dividend is 0? Return +-0.\n    if (!a[0]) {\n        y.s = k;\n        y.c = [y.e = 0];\n        return y;\n    }\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, p = dp + (q.e = x.e - y.e) + 1; // precision of the result\n    q.s = k;\n    k = p < 0 ? 0 : p;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n        p--;\n    }\n    // Round?\n    if (qi > p)\n        round(q, p, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return this.cmp(y) === 0;\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        if (yc[0]) {\n            y.s = -b;\n        }\n        else if (xc[0]) {\n            y = new Big(x);\n        }\n        else {\n            y.s = 1;\n        }\n        return y;\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0]) {\n        throw Error(DIV_BY_ZERO);\n    }\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var e, k, t, Big = this.constructor, x = new Big(this), y = new Big(y);\n    // Signs differ?\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        if (!yc[0]) {\n            if (xc[0]) {\n                y = new Big(x);\n            }\n            else {\n                y.s = x.s;\n            }\n        }\n        return y;\n    }\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (e = xe - ye) {\n        if (e > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            e = -e;\n            t = xc;\n        }\n        t.reverse();\n        for (; e--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    e = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (k = 0; e; xc[e] %= 10)\n        k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (k) {\n        xc.unshift(k);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (e = xc.length; xc[--e] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big('1'), one = new Big('1'), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\n        throw Error(INVALID + 'exponent');\n    }\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.prec = function (sd, rm) {\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n        throw Error(INVALID + 'precision');\n    }\n    return round(new this.constructor(this), sd, rm);\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\n * using rounding mode rm, or Big.RM if rm is not specified.\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.round = function (dp, rm) {\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n    }\n    return round(new this.constructor(this), dp + this.e + 1, rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big('0.5');\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0) {\n        throw Error(NAME + 'No square root');\n    }\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s + '');\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0]) {\n        y.c = [y.e = 0];\n        return y;\n    }\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = b;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toExponential = function (dp, rm) {\n    var x = this, n = x.c[0];\n    if (dp !== UNDEFINED) {\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n            throw Error(INVALID_DP);\n        }\n        x = round(new x.constructor(x), ++dp, rm);\n        for (; x.c.length < dp;)\n            x.c.push(0);\n    }\n    return stringify(x, true, !!n);\n};\n/*\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp, rm) {\n    var x = this, n = x.c[0];\n    if (dp !== UNDEFINED) {\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n            throw Error(INVALID_DP);\n        }\n        x = round(new x.constructor(x), dp + x.e + 1, rm);\n        // x.e may have changed if the value is rounded up.\n        for (dp = dp + x.e + 1; x.c.length < dp;)\n            x.c.push(0);\n    }\n    return stringify(x, false, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toJSON = P.toString = function () {\n    var x = this, Big = x.constructor;\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\n};\n/*\n * Return the value of this Big as a primitve number.\n */\nP.toNumber = function () {\n    var n = Number(stringify(this, true, true));\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\n        throw Error(NAME + 'Imprecise conversion');\n    }\n    return n;\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * rounding mode rm, or Big.RM if rm is not specified.\n * Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toPrecision = function (sd, rm) {\n    var x = this, Big = x.constructor, n = x.c[0];\n    if (sd !== UNDEFINED) {\n        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n            throw Error(INVALID + 'precision');\n        }\n        x = round(new Big(x), sd, rm);\n        for (; x.c.length < sd;)\n            x.c.push(0);\n    }\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = function () {\n    var x = this, Big = x.constructor;\n    if (Big.strict === true) {\n        throw Error(NAME + 'valueOf disallowed');\n    }\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\n};\n// Export\nexport var Big = _Big_();\n/// <reference types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts\" />\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\n// export function makeRangeStepFunction(step: Decimal, last: Decimal) {\n//   const stepComparedWithZero = step.cmp(get_Zero);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Decimal) => {\n//     const comparedWithLast = x.cmp(last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nimport Decimal from \"./Decimal.js\";\nimport { fromInt as int64FromInt } from \"./Long.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class MethodInfo {\n    constructor(name, parameters, returnType) {\n        this.name = name;\n        this.parameters = parameters;\n        this.returnType = returnType;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport class GenericParameter extends TypeInfo {\n    constructor(name) {\n        super(name);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(\"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport function measure_type(fullname) {\n    return new TypeInfo(fullname);\n}\nexport function generic_type(name) {\n    return new GenericParameter(name);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof TypeInfo) {\n        const elemType = getElementType(info);\n        if (elemType != null) {\n            return name(elemType) + \"[]\";\n        }\n        else {\n            const i = info.fullname.lastIndexOf(\".\");\n            return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n        }\n    }\n    else {\n        return info.name;\n    }\n}\nexport function fullName(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return fullName(elemType) + \"[]\";\n    }\n    else if (t.generics == null || t.generics.length === 0) {\n        return t.fullname;\n    }\n    else {\n        return t.fullname + \"[\" + t.generics.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n}\nexport function namespace(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return namespace(elemType);\n    }\n    else {\n        const i = t.fullname.lastIndexOf(\".\");\n        return i === -1 ? \"\" : t.fullname.substr(0, i);\n    }\n}\nexport function isArray(t) {\n    return getElementType(t) != null;\n}\nexport function getElementType(t) {\n    var _a;\n    return t.fullname === \"[]\" && ((_a = t.generics) === null || _a === void 0 ? void 0 : _a.length) === 1 ? t.generics[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isGenericParameter(t) {\n    return t instanceof GenericParameter;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    return (t2.fullname === obj_type.fullname) || (t1.parent != null && (t1.parent.Equals(t2) || isSubclassOf(t1.parent, t2)));\n}\nfunction isErasedToNumber(t) {\n    return isEnum(t) || [\n        int8_type.fullname,\n        uint8_type.fullname,\n        int16_type.fullname,\n        uint16_type.fullname,\n        int32_type.fullname,\n        uint32_type.fullname,\n        float32_type.fullname,\n        float64_type.fullname,\n    ].includes(t.fullname);\n}\nexport function isInstanceOfType(t, o) {\n    if (t.fullname === obj_type.fullname)\n        return true;\n    switch (typeof o) {\n        case \"boolean\":\n            return t.fullname === bool_type.fullname;\n        case \"string\":\n            return t.fullname === string_type.fullname;\n        case \"function\":\n            return isFunction(t);\n        case \"number\":\n            return isErasedToNumber(t);\n        default:\n            return t.construct != null && o instanceof t.construct;\n    }\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else if (isErasedToNumber(t)) {\n        return 0;\n    }\n    else {\n        switch (t.fullname) {\n            case obj_type.fullname:\n                return {};\n            case bool_type.fullname:\n                return false;\n            case \"System.Int64\":\n            case \"System.UInt64\":\n                // typeof<int64> and typeof<uint64> get transformed to class_type(\"System.Int64\")\n                // and class_type(\"System.UInt64\") respectively. Test for the name of the primitive type.\n                return int64FromInt(0);\n            case decimal_type.fullname:\n                return new Decimal(0);\n            case char_type.fullname:\n                // Even though char is a value type, it's erased to string, and Unchecked.defaultof<char> is null\n                return null;\n            default:\n                throw new Error(`Cannot access constructor of ${t.fullname}`);\n        }\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","import { join } from \"./String.js\";\r\nimport { uncurry, disposeSafe, isArrayLike, getEnumerator, toIterator, compare, structuralHash, equals } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\r\nimport { SR_inputSequenceTooLong, SR_inputSequenceEmpty, SR_inputMustBeNonNegative, SR_notEnoughElements, SR_differentLengths, SR_keyNotFoundAlt, SR_indexOutOfBounds, SR_inputWasEmpty } from \"./Global.js\";\r\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\r\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\r\n\r\nexport class FSharpList extends Record {\r\n    constructor(head, tail) {\r\n        super();\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        return (\"[\" + join(\"; \", xs)) + \"]\";\r\n    }\r\n    Equals(other) {\r\n        const xs = this;\r\n        if (xs === other) {\r\n            return true;\r\n        }\r\n        else {\r\n            const loop = (xs_1_mut, ys_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                    const matchValue = [xs_1.tail, ys_1.tail];\r\n                    if (matchValue[0] != null) {\r\n                        if (matchValue[1] != null) {\r\n                            const xt = matchValue[0];\r\n                            const yt = matchValue[1];\r\n                            if (equals(xs_1.head, ys_1.head)) {\r\n                                xs_1_mut = xt;\r\n                                ys_1_mut = yt;\r\n                                continue loop;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (matchValue[1] != null) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(xs, other);\r\n        }\r\n    }\r\n    GetHashCode() {\r\n        const xs = this;\r\n        const loop = (i_mut, h_mut, xs_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\r\n                const matchValue = xs_1.tail;\r\n                if (matchValue != null) {\r\n                    const t = matchValue;\r\n                    if (i > 18) {\r\n                        return h | 0;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\r\n                        xs_1_mut = t;\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return h | 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0, 0, xs) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(other) {\r\n        const xs = this;\r\n        const loop = (xs_1_mut, ys_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                const matchValue = [xs_1.tail, ys_1.tail];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const xt = matchValue[0];\r\n                        const yt = matchValue[1];\r\n                        const c = compare(xs_1.head, ys_1.head) | 0;\r\n                        if (c === 0) {\r\n                            xs_1_mut = xt;\r\n                            ys_1_mut = yt;\r\n                            continue loop;\r\n                        }\r\n                        else {\r\n                            return c | 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                else if (matchValue[1] != null) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(xs, other) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const xs = this;\r\n        return ListEnumerator$1_$ctor_3002E699(xs);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const xs = this;\r\n        return getEnumerator(xs);\r\n    }\r\n}\r\n\r\nexport function FSharpList$reflection(gen0) {\r\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList$reflection(gen0))]]);\r\n}\r\n\r\nexport class ListEnumerator$1 {\r\n    constructor(xs) {\r\n        this.xs = xs;\r\n        this.it = this.xs;\r\n        this.current = null;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        const matchValue = __.it.tail;\r\n        if (matchValue != null) {\r\n            const t = matchValue;\r\n            __.current = __.it.head;\r\n            __.it = t;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        const __ = this;\r\n        __.it = __.xs;\r\n        __.current = null;\r\n    }\r\n    Dispose() {\r\n    }\r\n}\r\n\r\nexport function ListEnumerator$1$reflection(gen0) {\r\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\r\n}\r\n\r\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\r\n    return new ListEnumerator$1(xs);\r\n}\r\n\r\nexport function FSharpList_get_Empty() {\r\n    return new FSharpList(null, void 0);\r\n}\r\n\r\nexport function FSharpList_Cons_305B8EAC(x, xs) {\r\n    return new FSharpList(x, xs);\r\n}\r\n\r\nexport function FSharpList__get_IsEmpty(xs) {\r\n    return xs.tail == null;\r\n}\r\n\r\nexport function FSharpList__get_Length(xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = matchValue;\r\n                continue loop;\r\n            }\r\n            else {\r\n                return i | 0;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs) | 0;\r\n}\r\n\r\nexport function FSharpList__get_Head(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return xs.head;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Tail(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                if (i === index) {\r\n                    return xs_1.head;\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    xs_1_mut = matchValue;\r\n                    continue loop;\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpList_get_Empty();\r\n}\r\n\r\nexport function cons(x, xs) {\r\n    return FSharpList_Cons_305B8EAC(x, xs);\r\n}\r\n\r\nexport function singleton(x) {\r\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    return FSharpList__get_IsEmpty(xs);\r\n}\r\n\r\nexport function length(xs) {\r\n    return FSharpList__get_Length(xs);\r\n}\r\n\r\nexport function head(xs) {\r\n    return FSharpList__get_Head(xs);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n}\r\n\r\nexport function tail(xs) {\r\n    return FSharpList__get_Tail(xs);\r\n}\r\n\r\nexport function tryLast(xs_mut) {\r\n    tryLast:\r\n    while (true) {\r\n        const xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return void 0;\r\n        }\r\n        else {\r\n            const t = FSharpList__get_Tail(xs);\r\n            if (FSharpList__get_IsEmpty(t)) {\r\n                return some(FSharpList__get_Head(xs));\r\n            }\r\n            else {\r\n                xs_mut = t;\r\n                continue tryLast;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const loop = (xs_1_mut, ys_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            const matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\r\n            if (matchValue[0]) {\r\n                if (matchValue[1]) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else if (matchValue[1]) {\r\n                return 1;\r\n            }\r\n            else {\r\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\r\n                if (c === 0) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return c | 0;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs, ys) | 0;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    const len = FSharpList__get_Length(xs) | 0;\r\n    const res = fill(new Array(len), 0, len, null);\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (!FSharpList__get_IsEmpty(xs_1)) {\r\n                res[i] = FSharpList__get_Head(xs_1);\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(0, xs);\r\n    return res;\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_1)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function foldIndexed(folder, state, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, state, xs);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    let ys_1 = ys;\r\n    while ((!FSharpList__get_IsEmpty(xs_1)) && (!FSharpList__get_IsEmpty(ys_1))) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n        ys_1 = FSharpList__get_Tail(ys_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function unfold(gen, state) {\r\n    const loop = (acc_mut, node_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, node = node_mut;\r\n            const matchValue = gen(acc);\r\n            if (matchValue != null) {\r\n                acc_mut = matchValue[1];\r\n                node_mut = ((t = (new FSharpList(matchValue[0], void 0)), (node.tail = t, t)));\r\n                continue loop;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(state, root);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function toSeq(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function ofArrayWithTail(xs, tail_1) {\r\n    let res = tail_1;\r\n    for (let i = xs.length - 1; i >= 0; i--) {\r\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function ofArray(xs) {\r\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    let xs_3, t;\r\n    if (isArrayLike(xs)) {\r\n        return ofArray(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        const root = FSharpList_get_Empty();\r\n        let node = root;\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n        const xs_5 = node;\r\n        const t_2 = FSharpList_get_Empty();\r\n        xs_5.tail = t_2;\r\n        return FSharpList__get_Tail(root);\r\n    }\r\n}\r\n\r\nexport function concat(lists) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    const action = (xs) => {\r\n        node = fold((acc, x) => {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }, node, xs);\r\n    };\r\n    if (isArrayLike(lists)) {\r\n        lists.forEach(action);\r\n    }\r\n    else if (lists instanceof FSharpList) {\r\n        iterate(action, lists);\r\n    }\r\n    else {\r\n        const enumerator = getEnumerator(lists);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n    }\r\n    const xs_6 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_6.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    let t, xs_4, t_2;\r\n    const root = FSharpList_get_Empty();\r\n    let node = (t = (new FSharpList(state, void 0)), (root.tail = t, t));\r\n    let acc = state;\r\n    let xs_3 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_3)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_3));\r\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\r\n        xs_3 = FSharpList__get_Tail(xs_3);\r\n    }\r\n    const xs_6 = node;\r\n    const t_4 = FSharpList_get_Empty();\r\n    xs_6.tail = t_4;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return ofArray(scanBack_1(folder, toArray(xs), state));\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    let xs_1, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    let ys = xs;\r\n    while (!FSharpList__get_IsEmpty(ys)) {\r\n        let zs = mapping(FSharpList__get_Head(ys));\r\n        while (!FSharpList__get_IsEmpty(zs)) {\r\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\r\n            zs = FSharpList__get_Tail(zs);\r\n        }\r\n        ys = FSharpList__get_Tail(ys);\r\n    }\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = foldIndexed((i, acc, x) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(i, x), void 0)), (acc.tail = t, t));\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(x), void 0)), (acc.tail = t, t));\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold2((acc, x, y) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(x, y), void 0)), (acc.tail = t, t));\r\n    }, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(0, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\r\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                zs_1_mut = FSharpList__get_Tail(zs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(root, xs, ys, zs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const patternInput_1 = fold((tupledArg, x) => {\r\n        let t;\r\n        const patternInput = mapping(tupledArg[1], x);\r\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\r\n    }, [root, state], xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_2;\r\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\r\n}\r\n\r\nexport function tryPick(f, xs) {\r\n    const loop = (xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = f(FSharpList__get_Head(xs_1));\r\n                if (matchValue == null) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs);\r\n}\r\n\r\nexport function pick(f, xs) {\r\n    const matchValue = tryPick(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(f, xs) {\r\n    return tryPick((x) => (f(x) ? some(x) : (void 0)), xs);\r\n}\r\n\r\nexport function find(f, xs) {\r\n    const matchValue = tryFind(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(f, xs) {\r\n    return tryFindBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findBack(f, xs) {\r\n    const matchValue = tryFindBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(f, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (f(FSharpList__get_Head(xs_1))) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function findIndex(f, xs) {\r\n    const matchValue = tryFindIndex(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(f, xs) {\r\n    return tryFindIndexBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(f, xs) {\r\n    const matchValue = tryFindIndexBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryItem(n, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (i === n) {\r\n                return some(FSharpList__get_Head(xs_1));\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function item(n, xs) {\r\n    return FSharpList__get_Item_Z524259A4(xs, n);\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        if (f(x)) {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function partition(f, xs) {\r\n    const patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\r\n    const root2 = patternInput[1];\r\n    const root1 = patternInput[0];\r\n    const patternInput_1 = fold(uncurry(2, (tupledArg) => {\r\n        const lacc = tupledArg[0];\r\n        const racc = tupledArg[1];\r\n        return (x) => {\r\n            let t, t_2;\r\n            return f(x) ? [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc] : [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\r\n        };\r\n    }), [root1, root2], xs);\r\n    const t_4 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_4;\r\n    const t_5 = FSharpList_get_Empty();\r\n    patternInput_1[1].tail = t_5;\r\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\r\n}\r\n\r\nexport function choose(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const matchValue = f(x);\r\n        if (matchValue == null) {\r\n            return acc;\r\n        }\r\n        else {\r\n            const t = new FSharpList(value_1(matchValue), void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function contains(value, xs, eq) {\r\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\r\n}\r\n\r\nexport function initialize(n, f) {\r\n    let xs, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    for (let i = 0; i <= (n - 1); i++) {\r\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\r\n    }\r\n    const xs_2 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_2.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reduce(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return fold(f, head(xs), tail(xs));\r\n    }\r\n}\r\n\r\nexport function reduceBack(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return foldBack(f, tail(xs), head(xs));\r\n    }\r\n}\r\n\r\nexport function forAll(f, xs) {\r\n    return fold((acc, x) => (acc && f(x)), true, xs);\r\n}\r\n\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2((acc, x, y) => (acc && f(x, y)), true, xs, ys);\r\n}\r\n\r\nexport function exists(f, xs) {\r\n    return tryFindIndex(f, xs) != null;\r\n}\r\n\r\nexport function exists2(f_mut, xs_mut, ys_mut) {\r\n    exists2:\r\n    while (true) {\r\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\r\n        const matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0]) {\r\n            if (matchValue[1]) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 2;\r\n            }\r\n        }\r\n        else if (matchValue[1]) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return false;\r\n            }\r\n            case 1: {\r\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    xs_mut = FSharpList__get_Tail(xs);\r\n                    ys_mut = FSharpList__get_Tail(ys);\r\n                    continue exists2;\r\n                }\r\n            }\r\n            case 2: {\r\n                throw (new Error((SR_differentLengths + \"\\\\nParameter name: \") + \"list2\"));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function unzip(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function unzip3(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const arr = toArray(xs);\r\n    arr.sort(comparer);\r\n    return ofArray(arr);\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    return averager.DivideByInt(total, count);\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    return averager.DivideByInt(total, count);\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return ofArray(permute_1(f, toArray(xs)));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs))));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    iterate((x) => {\r\n        iterate((y) => {\r\n            let xs_1, t;\r\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\r\n        }, ys);\r\n    }, xs);\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function skip(count_mut, xs_mut) {\r\n    skip:\r\n    while (true) {\r\n        const count = count_mut, xs = xs_mut;\r\n        if (count <= 0) {\r\n            return xs;\r\n        }\r\n        else if (FSharpList__get_IsEmpty(xs)) {\r\n            throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n        }\r\n        else {\r\n            count_mut = (count - 1);\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skip;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate_mut, xs_mut) {\r\n    skipWhile:\r\n    while (true) {\r\n        const predicate = predicate_mut, xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return xs;\r\n        }\r\n        else if (!predicate(FSharpList__get_Head(xs))) {\r\n            return xs;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skipWhile;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function take(count, xs) {\r\n    if (count < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\"));\r\n    }\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    const loop = (acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function getSlice(startIndex, endIndex, xs) {\r\n    const len = length(xs) | 0;\r\n    const startIndex_1 = defaultArg(startIndex, 0) | 0;\r\n    const endIndex_1 = defaultArg(endIndex, len - 1) | 0;\r\n    if (startIndex_1 < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"startIndex\"));\r\n    }\r\n    else if (endIndex_1 >= len) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"endIndex\"));\r\n    }\r\n    else if (endIndex_1 < startIndex_1) {\r\n        return FSharpList_get_Empty();\r\n    }\r\n    else {\r\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\r\n    }\r\n}\r\n\r\nexport function splitAt(index, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    if (index > FSharpList__get_Length(xs)) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [take(index, xs), skip(index, xs)];\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return FSharpList__get_Head(xs);\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    if ((!FSharpList__get_IsEmpty(xs)) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return ofArray(pairwise_1(toArray(xs)));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs))));\r\n}\r\n\r\nexport function transpose(lists) {\r\n    return ofArray(map_1(ofArray, transpose_1(map_1(toArray, Array.from(lists)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? FSharpList_Cons_305B8EAC(y, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys_1 = ofSeq(ys);\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, append(ys_1, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? append(ys_1, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    const ys = mapIndexed((i, x) => {\r\n        if (i === index) {\r\n            isDone = true;\r\n            return y;\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr = \"\";\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\r\nimport { min as min_1, disposeSafe, getEnumerator, comparePrimitives, max as max_1 } from \"./Util.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport function Helpers_allocateArrayFromCons(cons, len) {\r\n    if ((typeof cons) === \"function\") {\r\n        return new cons(len);\r\n    }\r\n    else {\r\n        return new Array(len);\r\n    }\r\n}\r\n\r\nfunction indexNotFound() {\r\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\r\n}\r\n\r\nfunction differentLengths() {\r\n    throw (new Error(\"Arrays had different lengths\"));\r\n}\r\n\r\nexport function append(array1, array2, cons) {\r\n    const len1 = array1.length | 0;\r\n    const len2 = array2.length | 0;\r\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\r\n    for (let i = 0; i <= (len1 - 1); i++) {\r\n        newArray[i] = array1[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        newArray[i_1 + len1] = array2[i_1];\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport function filter(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function fill(target, targetIndex, count, value) {\r\n    const start = targetIndex | 0;\r\n    return target.fill(value, start, (start + count));\r\n}\r\n\r\nexport function getSubArray(array, start, count) {\r\n    const start_1 = start | 0;\r\n    return array.slice(start_1, (start_1 + count));\r\n}\r\n\r\nexport function last(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    return array[array.length - 1];\r\n}\r\n\r\nexport function tryLast(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[array.length - 1]);\r\n    }\r\n}\r\n\r\nexport function mapIndexed(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(i, source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function map(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function mapIndexed2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapIndexed3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapFold(mapping, state, array, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = 0; i <= (array.length - 1); i++) {\r\n            const patternInput = mapping(acc, array[i]);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function mapFoldBack(mapping, array, state, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = array.length - 1; i >= 0; i--) {\r\n            const patternInput = mapping(array[i], acc);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function indexed(source) {\r\n    const len = source.length | 0;\r\n    const target = new Array(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = [i, source[i]];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function truncate(count, array) {\r\n    const count_1 = max_1(comparePrimitives, 0, count) | 0;\r\n    const start = 0;\r\n    return array.slice(start, (start + count_1));\r\n}\r\n\r\nexport function concat(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const matchValue = arrays_1.length | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return Helpers_allocateArrayFromCons(cons, 0);\r\n        }\r\n        case 1: {\r\n            return arrays_1[0];\r\n        }\r\n        default: {\r\n            let totalIdx = 0;\r\n            let totalLength = 0;\r\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\r\n                const arr_1 = arrays_1[idx];\r\n                totalLength = ((totalLength + arr_1.length) | 0);\r\n            }\r\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\r\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\r\n                const arr_2 = arrays_1[idx_1];\r\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\r\n                    result[totalIdx] = arr_2[j];\r\n                    totalIdx = ((totalIdx + 1) | 0);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function collect(mapping, array, cons) {\r\n    return concat(map(mapping, array, null), cons);\r\n}\r\n\r\nexport function where(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function contains(value, array, eq) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return false;\r\n            }\r\n            else if (eq.Equals(value, array[i])) {\r\n                return true;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function empty(cons) {\r\n    return Helpers_allocateArrayFromCons(cons, 0);\r\n}\r\n\r\nexport function singleton(value, cons) {\r\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\r\n    ar[0] = value;\r\n    return ar;\r\n}\r\n\r\nexport function initialize(count, initializer, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (count - 1); i++) {\r\n        result[i] = initializer(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function pairwise(array) {\r\n    if (array.length < 2) {\r\n        return [];\r\n    }\r\n    else {\r\n        const count = (array.length - 1) | 0;\r\n        const result = new Array(count);\r\n        for (let i = 0; i <= (count - 1); i++) {\r\n            result[i] = [array[i], array[i + 1]];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function replicate(count, initial, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (result.length - 1); i++) {\r\n        result[i] = initial;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copy(array) {\r\n    return array.slice();\r\n}\r\n\r\nexport function reverse(array) {\r\n    const array_2 = array.slice();\r\n    return array_2.reverse();\r\n}\r\n\r\nexport function scan(folder, state, array, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[0] = state;\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        res[i + 1] = folder(res[i], array[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function scanBack(folder, array, state, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[array.length] = state;\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        res[i] = folder(array[i], res[i + 1]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function skip(count, array, cons) {\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = ((count < 0) ? 0 : count) | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = count | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function take(count, array, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        return array.slice(start, (start + count));\r\n    }\r\n}\r\n\r\nexport function takeWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        const count_1 = count | 0;\r\n        return array.slice(start, (start + count_1));\r\n    }\r\n}\r\n\r\nexport function addInPlace(x, array) {\r\n    array.push(x);\r\n}\r\n\r\nexport function addRangeInPlace(range, array) {\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n}\r\n\r\nexport function insertRangeInPlace(index, range, array) {\r\n    let index_1;\r\n    let i = index;\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            (index_1 = (i | 0), array.splice(index_1, 0, x));\r\n            i = ((i + 1) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n}\r\n\r\nexport function removeInPlace(item_1, array) {\r\n    const i = (array.indexOf(item_1, 0)) | 0;\r\n    if (i > -1) {\r\n        array.splice(i, 1);\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function removeAllInPlace(predicate, array) {\r\n    const countRemoveAll = (count) => {\r\n        const i = (array.findIndex(predicate)) | 0;\r\n        if (i > -1) {\r\n            array.splice(i, 1);\r\n            return (countRemoveAll(count) + 1) | 0;\r\n        }\r\n        else {\r\n            return count | 0;\r\n        }\r\n    };\r\n    return countRemoveAll(0) | 0;\r\n}\r\n\r\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\r\n    const diff = (targetIndex - sourceIndex) | 0;\r\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\r\n        target[i + diff] = source[i];\r\n    }\r\n}\r\n\r\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\r\n    try {\r\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\r\n    }\r\n    catch (matchValue) {\r\n        copyTo(source, sourceIndex, target, targetIndex, count);\r\n    }\r\n}\r\n\r\nexport function indexOf(array, item_1, start, count) {\r\n    const start_1 = defaultArg(start, 0) | 0;\r\n    const i = (array.indexOf(item_1, start_1)) | 0;\r\n    if ((count != null) && (i >= (start_1 + value_2(count)))) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return i | 0;\r\n    }\r\n}\r\n\r\nexport function partition(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\r\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\r\n    let iTrue = 0;\r\n    let iFalse = 0;\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        if (f(source[i])) {\r\n            res1[iTrue] = source[i];\r\n            iTrue = ((iTrue + 1) | 0);\r\n        }\r\n        else {\r\n            res2[iFalse] = source[i];\r\n            iFalse = ((iFalse + 1) | 0);\r\n        }\r\n    }\r\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\r\n}\r\n\r\nexport function find(predicate, array) {\r\n    const matchValue = array.find(predicate);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_2(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, array) {\r\n    return array.find(predicate);\r\n}\r\n\r\nexport function findIndex(predicate, array) {\r\n    const matchValue = (array.findIndex(predicate)) | 0;\r\n    if (matchValue > -1) {\r\n        return matchValue | 0;\r\n    }\r\n    else {\r\n        return indexNotFound() | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, array) {\r\n    const matchValue = (array.findIndex(predicate)) | 0;\r\n    if (matchValue > -1) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function pick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return indexNotFound();\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue != null) {\r\n                    return value_2(matchValue);\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function tryPick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue == null) {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function findBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound();\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return array[i];\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function tryFindBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return some(array[i]);\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function findLastIndex(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return -1;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function findIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound() | 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function choose(chooser, array, cons) {\r\n    const res = [];\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        const matchValue = chooser(array[i]);\r\n        if (matchValue != null) {\r\n            const y = value_2(matchValue);\r\n            res.push(y);\r\n        }\r\n    }\r\n    if ((typeof cons) === \"function\") {\r\n        return map((x) => x, res, cons);\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\n\r\nexport function foldIndexed(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function fold(folder, state, array) {\r\n    return array.reduce((folder), state);\r\n}\r\n\r\nexport function iterate(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(array[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(i, array[i]);\r\n    }\r\n}\r\n\r\nexport function iterate2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(i, array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function isEmpty(array) {\r\n    return array.length === 0;\r\n}\r\n\r\nexport function forAll(predicate, array) {\r\n    return array.every(predicate);\r\n}\r\n\r\nexport function permute(f, array) {\r\n    const size = array.length | 0;\r\n    const res = array.slice();\r\n    const checkFlags = new Array(size);\r\n    iterateIndexed((i, x) => {\r\n        const j = f(i) | 0;\r\n        if ((j < 0) ? true : (j >= size)) {\r\n            throw (new Error(\"Not a valid permutation\"));\r\n        }\r\n        res[j] = x;\r\n        checkFlags[j] = 1;\r\n    }, array);\r\n    if (!(checkFlags.every((y) => (1 === y)))) {\r\n        throw (new Error(\"Not a valid permutation\"));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function setSlice(target, lower, upper, source) {\r\n    const lower_1 = defaultArg(lower, 0) | 0;\r\n    const upper_1 = defaultArg(upper, 0) | 0;\r\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\r\n    for (let i = 0; i <= length; i++) {\r\n        target[i + lower_1] = source[i];\r\n    }\r\n}\r\n\r\nexport function sortInPlaceBy(projection, xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n}\r\n\r\nexport function sortInPlace(xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(x, y));\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(x, y));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    return (xs_1.sort((x, y) => comparer.Compare(projection(x), projection(y))), xs_1);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(x, y) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    return (xs_1.sort((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)), xs_1);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const comparer_1 = comparer;\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(comparer_1);\r\n    return xs_1;\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const len1 = xs.length | 0;\r\n    const len2 = ys.length | 0;\r\n    const res = new Array(len1 * len2);\r\n    for (let i = 0; i <= (xs.length - 1); i++) {\r\n        for (let j = 0; j <= (ys.length - 1); j++) {\r\n            res[(i * len2) + j] = [xs[i], ys[j]];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    const res = [];\r\n    const loop = (state_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const state_1 = state_1_mut;\r\n            const matchValue = generator(state_1);\r\n            if (matchValue != null) {\r\n                const x = matchValue[0];\r\n                const s = matchValue[1];\r\n                res.push(x);\r\n                state_1_mut = s;\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(state);\r\n    return res;\r\n}\r\n\r\nexport function unzip(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n    }, array);\r\n    return [res1, res2];\r\n}\r\n\r\nexport function unzip3(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    const res3 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n        res3[i] = tupledArg[2];\r\n    }, array);\r\n    return [res1, res2, res3];\r\n}\r\n\r\nexport function zip(array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function zip3(array1, array2, array3) {\r\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i], array3[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function chunkBySize(chunkSize, array) {\r\n    if (chunkSize < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\r\n            let slice;\r\n            const start_1 = (x * chunkSize) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function splitAt(index, array) {\r\n    let start;\r\n    if ((index < 0) ? true : (index > array.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\r\n}\r\n\r\nexport function compareWith(comparer, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = 0;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return 1;\r\n        }\r\n        else if (length1 < length2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            while ((i < length1) && (result === 0)) {\r\n                result = (comparer(array1[i], array2[i]) | 0);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function equalsWith(equals, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = true;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return false;\r\n        }\r\n        else if (length1 < length2) {\r\n            return false;\r\n        }\r\n        else {\r\n            while ((i < length1) && result) {\r\n                result = equals(array1[i], array2[i]);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function exactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return array[0];\r\n    }\r\n    else if (array.length === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return some(array[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function head(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        return array[0];\r\n    }\r\n}\r\n\r\nexport function tryHead(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[0]);\r\n    }\r\n}\r\n\r\nexport function tail(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\r\n    }\r\n    return array.slice(1);\r\n}\r\n\r\nexport function item(index, array) {\r\n    return array[index];\r\n}\r\n\r\nexport function tryItem(index, array) {\r\n    if ((index < 0) ? true : (index >= array.length)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[index]);\r\n    }\r\n}\r\n\r\nexport function foldBackIndexed(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldBack(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldIndexed2(folder, state, array1, array2) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        throw (new Error(\"Arrays have different lengths\"));\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        acc = folder(i, acc, array1[i], array2[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function fold2(folder, state, array1, array2) {\r\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\r\n}\r\n\r\nexport function foldBackIndexed2(folder, array1, array2, state) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const size = array1.length | 0;\r\n    for (let i = 1; i <= size; i++) {\r\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(f, array1, array2, state) {\r\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\r\n}\r\n\r\nexport function reduce(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduce(reduction_1);\r\n}\r\n\r\nexport function reduceBack(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduceRight(reduction_1);\r\n}\r\n\r\nexport function forAll2(predicate, array1, array2) {\r\n    return fold2((acc, x, y) => (acc && predicate(x, y)), true, array1, array2);\r\n}\r\n\r\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\r\n    existsOffset:\r\n    while (true) {\r\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\r\n        if (index === array.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array_mut = array;\r\n            index_mut = (index + 1);\r\n            continue existsOffset;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists(predicate, array) {\r\n    return existsOffset(predicate, array, 0);\r\n}\r\n\r\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\r\n    existsOffset2:\r\n    while (true) {\r\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\r\n        if (index === array1.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array1[index], array2[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array1_mut = array1;\r\n            array2_mut = array2;\r\n            index_mut = (index + 1);\r\n            continue existsOffset2;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    return existsOffset2(predicate, array1, array2, 0);\r\n}\r\n\r\nexport function sum(array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, array[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function sumBy(projection, array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, projection(array[i]));\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, array[i]);\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function averageBy(projection, array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, projection(array[i]));\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function windowed(windowSize, source) {\r\n    if (windowSize <= 0) {\r\n        throw (new Error(\"windowSize must be positive\"));\r\n    }\r\n    let res;\r\n    const len = max_1(comparePrimitives, 0, (source.length - windowSize) + 1) | 0;\r\n    res = (new Array(len));\r\n    for (let i = windowSize; i <= source.length; i++) {\r\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function splitInto(chunks, array) {\r\n    if (chunks < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        const chunks_1 = min_1(comparePrimitives, chunks, array.length) | 0;\r\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\r\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\r\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\r\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\r\n            let slice;\r\n            const start_1 = ((i * minChunkSize) + min_1(comparePrimitives, chunksWithExtraItem, i)) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function transpose(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const len = arrays_1.length | 0;\r\n    if (len === 0) {\r\n        return new Array(0);\r\n    }\r\n    else {\r\n        const firstArray = arrays_1[0];\r\n        const lenInner = firstArray.length | 0;\r\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\r\n            differentLengths();\r\n        }\r\n        const result = new Array(lenInner);\r\n        for (let i = 0; i <= (lenInner - 1); i++) {\r\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\r\n            for (let j = 0; j <= (len - 1); j++) {\r\n                result[i][j] = arrays_1[j][i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len + 1);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    target[index] = y;\r\n    for (let i_1 = index; i_1 <= (len - 1); i_1++) {\r\n        target[i_1 + 1] = xs[i_1];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const ys_1 = Array.from(ys);\r\n    const len2 = ys_1.length | 0;\r\n    const target = new xs.constructor(len + len2);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        target[index + i_1] = ys_1[i_1];\r\n    }\r\n    for (let i_2 = index; i_2 <= (len - 1); i_2++) {\r\n        target[i_2 + len2] = xs[i_2];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    if ((index < 0) ? true : (index >= xs.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    let i = -1;\r\n    return filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        return i !== index;\r\n    }, xs);\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index >= len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = ((i === index) ? y : xs[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\n","\r\nexport const SR_indexOutOfBounds = \"The index was outside the range of elements in the collection.\";\r\n\r\nexport const SR_inputWasEmpty = \"Collection was empty.\";\r\n\r\nexport const SR_inputMustBeNonNegative = \"The input must be non-negative.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_differentLengths = \"The collections had different lengths.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\n","import { clear, equals, isArrayLike, isDisposable, toIterator, disposeSafe, getEnumerator } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { Operators_Lock, Operators_NullArg } from \"./FSharp.Core.js\";\r\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, windowed as windowed_1, splitInto as splitInto_1, map as map_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\r\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\r\n\r\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\r\n\r\nexport function Enumerator_noReset() {\r\n    throw (new Error(SR_resetNotSupported));\r\n}\r\n\r\nexport function Enumerator_notStarted() {\r\n    throw (new Error(SR_enumerationNotStarted));\r\n}\r\n\r\nexport function Enumerator_alreadyFinished() {\r\n    throw (new Error(SR_enumerationAlreadyFinished));\r\n}\r\n\r\nexport class Enumerator_Seq {\r\n    constructor(f) {\r\n        this.f = f;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        const maxCount = 4;\r\n        let i = 0;\r\n        let str = \"seq [\";\r\n        const e = getEnumerator(xs);\r\n        try {\r\n            while ((i < maxCount) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                if (i > 0) {\r\n                    str = (str + \"; \");\r\n                }\r\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                i = ((i + 1) | 0);\r\n            }\r\n            if (i === maxCount) {\r\n                str = (str + \"; ...\");\r\n            }\r\n            return str + \"]\";\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n    GetEnumerator() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n}\r\n\r\nexport function Enumerator_Seq$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\r\n}\r\n\r\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\r\n    return new Enumerator_Seq(f);\r\n}\r\n\r\nexport class Enumerator_FromFunctions$1 {\r\n    constructor(current, next, dispose) {\r\n        this.current = current;\r\n        this.next = next;\r\n        this.dispose = dispose;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        return __.next();\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        Enumerator_noReset();\r\n    }\r\n    Dispose() {\r\n        const __ = this;\r\n        __.dispose();\r\n    }\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\r\n    return new Enumerator_FromFunctions$1(current, next, dispose);\r\n}\r\n\r\nexport function Enumerator_cast(e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.IEnumerator.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        if (isDisposable(e)) {\r\n            disposeSafe(e);\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_concat(sources) {\r\n    let outerOpt = void 0;\r\n    let innerOpt = void 0;\r\n    let started = false;\r\n    let finished = false;\r\n    let curr = void 0;\r\n    const finish = () => {\r\n        finished = true;\r\n        if (innerOpt != null) {\r\n            const inner = innerOpt;\r\n            try {\r\n                disposeSafe(inner);\r\n            }\r\n            finally {\r\n                innerOpt = (void 0);\r\n            }\r\n        }\r\n        if (outerOpt != null) {\r\n            const outer = outerOpt;\r\n            try {\r\n                disposeSafe(outer);\r\n            }\r\n            finally {\r\n                outerOpt = (void 0);\r\n            }\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        else if (finished) {\r\n            Enumerator_alreadyFinished();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        let copyOfStruct;\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (finished) {\r\n            return false;\r\n        }\r\n        else {\r\n            let res = void 0;\r\n            while (res == null) {\r\n                const matchValue = [outerOpt, innerOpt];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const inner_1 = matchValue[1];\r\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                            res = true;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                disposeSafe(inner_1);\r\n                            }\r\n                            finally {\r\n                                innerOpt = (void 0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const outer_1 = matchValue[0];\r\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\r\n                        }\r\n                        else {\r\n                            finish();\r\n                            res = false;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    outerOpt = getEnumerator(sources);\r\n                }\r\n            }\r\n            return value_1(res);\r\n        }\r\n    }, () => {\r\n        if (!finished) {\r\n            finish();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_enumerateThenFinally(f, e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        try {\r\n            disposeSafe(e);\r\n        }\r\n        finally {\r\n            f();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\r\n    let started = false;\r\n    let curr = void 0;\r\n    let state = some(openf());\r\n    const dispose = () => {\r\n        if (state != null) {\r\n            const x_1 = value_1(state);\r\n            try {\r\n                closef(x_1);\r\n            }\r\n            finally {\r\n                state = (void 0);\r\n            }\r\n        }\r\n    };\r\n    const finish = () => {\r\n        try {\r\n            dispose();\r\n        }\r\n        finally {\r\n            curr = (void 0);\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (state != null) {\r\n            const s = value_1(state);\r\n            let matchValue_1;\r\n            try {\r\n                matchValue_1 = compute(s);\r\n            }\r\n            catch (matchValue) {\r\n                finish();\r\n                throw matchValue;\r\n            }\r\n            if (matchValue_1 != null) {\r\n                curr = matchValue_1;\r\n                return true;\r\n            }\r\n            else {\r\n                finish();\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, dispose);\r\n}\r\n\r\nexport function Enumerator_unfold(f, state) {\r\n    let curr = void 0;\r\n    let acc = state;\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (curr != null) {\r\n            const x = curr[0];\r\n            const st = curr[1];\r\n            return x;\r\n        }\r\n        else {\r\n            return Enumerator_notStarted();\r\n        }\r\n    }, () => {\r\n        curr = f(acc);\r\n        if (curr != null) {\r\n            const x_1 = curr[0];\r\n            const st_1 = curr[1];\r\n            acc = st_1;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, () => {\r\n    });\r\n}\r\n\r\nexport function indexNotFound() {\r\n    throw (new Error(SR_keyNotFoundAlt));\r\n}\r\n\r\nexport function checkNonNull(argName, arg) {\r\n    if (arg == null) {\r\n        Operators_NullArg(argName);\r\n    }\r\n}\r\n\r\nexport function mkSeq(f) {\r\n    return Enumerator_Seq_$ctor_673A07F2(f);\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return getEnumerator(xs);\r\n}\r\n\r\nexport function delay(generator) {\r\n    return mkSeq(() => getEnumerator(generator()));\r\n}\r\n\r\nexport function concat(sources) {\r\n    return mkSeq(() => Enumerator_concat(sources));\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    return mkSeq(() => Enumerator_unfold(generator, state));\r\n}\r\n\r\nexport function empty() {\r\n    return delay(() => (new Array(0)));\r\n}\r\n\r\nexport function singleton(x) {\r\n    return delay(() => singleton_1(x));\r\n}\r\n\r\nexport function ofArray(arr) {\r\n    return arr;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    if (xs instanceof FSharpList) {\r\n        return toArray_1(xs);\r\n    }\r\n    else {\r\n        return Array.from(xs);\r\n    }\r\n}\r\n\r\nexport function ofList(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function toList(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return ofArray_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        return ofSeq_1(xs);\r\n    }\r\n}\r\n\r\nexport function generate(create, compute, dispose) {\r\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\r\n}\r\n\r\nexport function generateIndexed(create, compute, dispose) {\r\n    return mkSeq(() => {\r\n        let i = -1;\r\n        return Enumerator_generateWhileSome(create, (x) => {\r\n            i = ((i + 1) | 0);\r\n            return compute(i, x);\r\n        }, dispose);\r\n    });\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return concat([xs, ys]);\r\n}\r\n\r\nexport function cast(xs) {\r\n    return mkSeq(() => {\r\n        checkNonNull(\"source\", xs);\r\n        return Enumerator_cast(getEnumerator(xs));\r\n    });\r\n}\r\n\r\nexport function choose(chooser, xs) {\r\n    return generate(() => ofSeq(xs), (e) => {\r\n        let curr = void 0;\r\n        while ((curr == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return curr;\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let c = 0;\r\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            while (((c === 0) && b1) && b2) {\r\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\r\n                if (c === 0) {\r\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                }\r\n            }\r\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function contains(value, xs, comparer) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function enumerateFromFunctions(create, moveNext, current) {\r\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : (void 0)), (x_1) => {\r\n        const matchValue = x_1;\r\n        if (isDisposable(matchValue)) {\r\n            disposeSafe(matchValue);\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateThenFinally(source, compensation) {\r\n    const compensation_1 = compensation;\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\r\n        }\r\n        catch (matchValue) {\r\n            compensation_1();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateUsing(resource, source) {\r\n    const compensation = () => {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            let copyOfStruct = resource;\r\n            disposeSafe(copyOfStruct);\r\n        }\r\n    };\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation, (ofSeq)(source(resource)));\r\n        }\r\n        catch (matchValue_1) {\r\n            compensation();\r\n            throw matchValue_1;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateWhile(guard, xs) {\r\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : (void 0)), 0));\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    return choose((x) => {\r\n        if (f(x)) {\r\n            return some(x);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, xs);\r\n}\r\n\r\nexport function exists(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let found = false;\r\n            while (((!found) && e1[\"System.Collections.IEnumerator.MoveNext\"]()) && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return found;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n            else {\r\n                return v;\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? (void 0) : some(v);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (predicate(c)) {\r\n                res = some(c);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function find(predicate, xs) {\r\n    const matchValue = tryFind(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(predicate, xs) {\r\n    return tryFindBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findBack(predicate, xs) {\r\n    const matchValue = tryFindBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (i_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\r\n                        return i;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return void 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0);\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function findIndex(predicate, xs) {\r\n    const matchValue = tryFindIndex(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, xs) {\r\n    return tryFindIndexBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(predicate, xs) {\r\n    const matchValue = tryFindIndexBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let acc = state;\r\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return acc;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let acc = state;\r\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return acc;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function forAll(predicate, xs) {\r\n    return !exists((x) => (!predicate(x)), xs);\r\n}\r\n\r\nexport function forAll2(predicate, xs, ys) {\r\n    return !exists2((x, y) => (!predicate(x, y)), xs, ys);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryHead_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryHead_2(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function head(xs) {\r\n    const matchValue = tryHead(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function initialize(count, f) {\r\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : (void 0)), 0);\r\n}\r\n\r\nexport function initializeInfinite(f) {\r\n    return initialize(2147483647, f);\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length === 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return isEmpty_1(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function tryItem(index, xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryItem_1(index, xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryItem_2(index, xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            const loop = (index_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const index_1 = index_1_mut;\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        return void 0;\r\n                    }\r\n                    else if (index_1 === 0) {\r\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    }\r\n                    else {\r\n                        index_1_mut = (index_1 - 1);\r\n                        continue loop;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(index);\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function item(index, xs) {\r\n    const matchValue = tryItem(index, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function tryLast(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    return acc;\r\n                }\r\n                else {\r\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                    continue loop;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function length(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length | 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return length_1(xs) | 0;\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            let count = 0;\r\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                count = ((count + 1) | 0);\r\n            }\r\n            return count | 0;\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            disposeSafe(tupledArg_1[1]);\r\n        }\r\n    });\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            disposeSafe(tupledArg_1[1]);\r\n        }\r\n    });\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        const e3 = tupledArg[2];\r\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) && e3[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            try {\r\n                disposeSafe(tupledArg_1[1]);\r\n            }\r\n            finally {\r\n                disposeSafe(tupledArg_1[2]);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function readOnly(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return map((x) => x, xs);\r\n}\r\n\r\nexport class CachedSeq$1 {\r\n    constructor(cleanup, res) {\r\n        this.cleanup = cleanup;\r\n        this.res = res;\r\n    }\r\n    Dispose() {\r\n        const _ = this;\r\n        _.cleanup();\r\n    }\r\n    GetEnumerator() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n}\r\n\r\nexport function CachedSeq$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.CachedSeq`1\", [gen0], CachedSeq$1);\r\n}\r\n\r\nexport function CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\r\n    return new CachedSeq$1(cleanup, res);\r\n}\r\n\r\nexport function CachedSeq$1__Clear(_) {\r\n    _.cleanup();\r\n}\r\n\r\nexport function cache(source) {\r\n    checkNonNull(\"source\", source);\r\n    const prefix = [];\r\n    let enumeratorR = void 0;\r\n    return CachedSeq$1_$ctor_Z7A8347D4(() => {\r\n        Operators_Lock(prefix, () => {\r\n            clear(prefix);\r\n            let pattern_matching_result, e;\r\n            if (enumeratorR != null) {\r\n                if (value_1(enumeratorR) != null) {\r\n                    pattern_matching_result = 0;\r\n                    e = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    pattern_matching_result = 1;\r\n                }\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n            switch (pattern_matching_result) {\r\n                case 0: {\r\n                    disposeSafe(e);\r\n                    break;\r\n                }\r\n            }\r\n            enumeratorR = (void 0);\r\n        });\r\n    }, unfold((i_1) => Operators_Lock(prefix, () => {\r\n        if (i_1 < prefix.length) {\r\n            return [prefix[i_1], i_1 + 1];\r\n        }\r\n        else {\r\n            if (i_1 >= prefix.length) {\r\n                let optEnumerator_2;\r\n                if (enumeratorR != null) {\r\n                    optEnumerator_2 = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    const optEnumerator = getEnumerator(source);\r\n                    enumeratorR = some(optEnumerator);\r\n                    optEnumerator_2 = optEnumerator;\r\n                }\r\n                if (optEnumerator_2 == null) {\r\n                }\r\n                else {\r\n                    const enumerator = optEnumerator_2;\r\n                    if (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        void (prefix.push(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                    }\r\n                    else {\r\n                        disposeSafe(enumerator);\r\n                        enumeratorR = some(void 0);\r\n                    }\r\n                }\r\n            }\r\n            return (i_1 < prefix.length) ? [prefix[i_1], i_1 + 1] : (void 0);\r\n        }\r\n    }), 0));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const ysCache = cache(ys);\r\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function tryPick(chooser, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function pick(chooser, xs) {\r\n    const matchValue = tryPick(chooser, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function reduce(folder, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return acc;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else {\r\n            throw (new Error(SR_inputSequenceEmpty));\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function reduceBack(folder, xs) {\r\n    const arr = toArray(xs);\r\n    if (arr.length > 0) {\r\n        return arr.reduceRight(folder);\r\n    }\r\n    else {\r\n        throw (new Error(SR_inputSequenceEmpty));\r\n    }\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return delay(() => ofArray(reverse_1(toArray(xs))));\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    return delay(() => {\r\n        let acc = state;\r\n        return concat([singleton(state), map((x) => {\r\n            acc = folder(acc, x);\r\n            return acc;\r\n        }, xs)]);\r\n    });\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\r\n}\r\n\r\nexport function skip(count, source) {\r\n    return mkSeq(() => {\r\n        const e = ofSeq(source);\r\n        try {\r\n            for (let _ = 1; _ <= count; _++) {\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n                }\r\n            }\r\n            return Enumerator_enumerateThenFinally(() => {\r\n            }, e);\r\n        }\r\n        catch (matchValue) {\r\n            disposeSafe(e);\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function skipWhile(predicate, xs) {\r\n    return delay(() => {\r\n        let skipped = true;\r\n        return filter((x) => {\r\n            if (skipped) {\r\n                skipped = predicate(x);\r\n            }\r\n            return !skipped;\r\n        }, xs);\r\n    });\r\n}\r\n\r\nexport function tail(xs) {\r\n    return skip(1, xs);\r\n}\r\n\r\nexport function take(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < count) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() && predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) && e[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    return delay(() => concat(map(mapping, xs)));\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs)))));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs)))));\r\n}\r\n\r\nexport function transpose(xss) {\r\n    return delay(() => ofArray(map_1(ofArray, transpose_1(map_1(toArray, toArray(xss))))));\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    return delay(() => {\r\n        const arr = toArray(xs);\r\n        arr.sort(comparer);\r\n        return ofArray(arr);\r\n    });\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if (i === index) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let status = -1;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        if (i === index) {\r\n            status = 0;\r\n        }\r\n        let inserted;\r\n        if (status === 0) {\r\n            if (e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                inserted = some(e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                status = 1;\r\n                inserted = (void 0);\r\n            }\r\n        }\r\n        else {\r\n            inserted = (void 0);\r\n        }\r\n        if (inserted == null) {\r\n            if (e1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                if (status < 1) {\r\n                    throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n                }\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return some(value_1(inserted));\r\n        }\r\n    }, (tupledArg_1) => {\r\n        disposeSafe(tupledArg_1[0]);\r\n        disposeSafe(tupledArg_1[1]);\r\n    });\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < index) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n        }\r\n        else {\r\n            if (i === index) {\r\n                for (let _ = 1; _ <= count; _++) {\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"count\"));\r\n                    }\r\n                }\r\n            }\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\n","import { disposeSafe, structuralHash, equals } from \"./Util.js\";\r\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\r\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\r\n\r\nexport const LanguagePrimitives_GenericEqualityComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport const LanguagePrimitives_GenericEqualityERComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport function LanguagePrimitives_FastGenericComparer() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function Operators_Failure(message) {\r\n    return new Error(message);\r\n}\r\n\r\nexport function Operators_FailurePattern(exn) {\r\n    return exn.message;\r\n}\r\n\r\nexport function Operators_NullArg(x) {\r\n    throw (new Error(x));\r\n}\r\n\r\nexport function Operators_Using(resource, action) {\r\n    try {\r\n        return action(resource);\r\n    }\r\n    finally {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            disposeSafe(resource);\r\n        }\r\n    }\r\n}\r\n\r\nexport function Operators_Lock(_lockObj, action) {\r\n    return action();\r\n}\r\n\r\nexport function ExtraTopLevelOperators_LazyPattern(input) {\r\n    return input.Value;\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\r\n    return format.cont((s) => {\r\n        StringBuilder__Append_Z721C83C5(builder, s);\r\n        return continuation();\r\n    });\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\r\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\r\n    }, builder, format);\r\n}\r\n\r\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","import { Exception } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\n\r\nexport class SystemException extends Exception {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nexport function SystemException$reflection() {\r\n    return class_type(\"System.SystemException\", void 0, SystemException, class_type(\"System.Exception\"));\r\n}\r\n\r\nexport function SystemException_$ctor() {\r\n    return new SystemException();\r\n}\r\n\r\nexport class TimeoutException extends SystemException {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nexport function TimeoutException$reflection() {\r\n    return class_type(\"System.TimeoutException\", void 0, TimeoutException, SystemException$reflection());\r\n}\r\n\r\nexport function TimeoutException_$ctor() {\r\n    return new TimeoutException();\r\n}\r\n\r\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { TimeoutException } from \"./SystemException.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// see AsyncBuilder.Delay\nfunction delay(generator) {\n    return protectedCont((ctx) => generator()(ctx));\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nfunction throwAfter(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onError(new TimeoutException());\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function startChild(computation, ms) {\n    if (ms) {\n        const computationWithTimeout = protectedBind(parallel2(computation, throwAfter(ms)), xs => protectedReturn(xs[0]));\n        return startChild(computationWithTimeout);\n    }\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return delay(() => awaitPromise(Promise.all(Array.from(computations, (w) => startAsPromise(w)))));\n}\nfunction parallel2(a, b) {\n    return delay(() => awaitPromise(Promise.all([startAsPromise(a), startAsPromise(b)])));\n}\nexport function sequential(computations) {\n    function _sequential(computations) {\n        let pr = Promise.resolve([]);\n        for (const c of computations) {\n            pr = pr.then(results => startAsPromise(c).then(r => results.concat([r])));\n        }\n        return pr;\n    }\n    return delay(() => awaitPromise(_sequential(computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function runSynchronously() {\n    throw new Error(\"Asynchronous code cannot be run synchronously in JS\");\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { Union } from \"./Types.js\";\r\nimport { union_type } from \"./Reflection.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class FSharpResult$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Ok\", \"Error\"];\r\n    }\r\n}\r\n\r\nexport function FSharpResult$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\r\n}\r\n\r\nexport function Result_Map(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, mapping(result.fields[0]));\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport function Result_MapError(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, mapping(result.fields[0]));\r\n    }\r\n}\r\n\r\nexport function Result_Bind(binder, result) {\r\n    if (result.tag === 0) {\r\n        return binder(result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport class FSharpChoice$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of2\", \"Choice2Of2\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\r\n}\r\n\r\nexport class FSharpChoice$3 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\r\n}\r\n\r\nexport class FSharpChoice$4 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\r\n}\r\n\r\nexport class FSharpChoice$5 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\r\n}\r\n\r\nexport class FSharpChoice$6 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\r\n}\r\n\r\nexport class FSharpChoice$7 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\r\n}\r\n\r\nexport function Choice_makeChoice1Of2(x) {\r\n    return new FSharpChoice$2(0, x);\r\n}\r\n\r\nexport function Choice_makeChoice2Of2(x) {\r\n    return new FSharpChoice$2(1, x);\r\n}\r\n\r\nexport function Choice_tryValueIfChoice1Of2(x) {\r\n    if (x.tag === 0) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function Choice_tryValueIfChoice2Of2(x) {\r\n    if (x.tag === 1) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 2 /* Local */; // better default than Unspecified\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    function fail() {\n        throw new Error(`The string is not a valid Date: ${input}`);\n    }\n    if (input == null || input.trim() === \"\") {\n        fail();\n    }\n    // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n    if (input.length === 10 && input[4] === \"-\" && input[7] === \"-\") {\n        input += \"T00:00:00\";\n    }\n    let date = new Date(input);\n    let offset = null;\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                if (m[4] === \"Z\") {\n                    offset = \"Z\";\n                }\n                else {\n                    let offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || \"0\", 10);\n                    if (m[4][0] === \"-\") {\n                        offsetInMinutes *= -1;\n                    }\n                    offset = offsetInMinutes;\n                    timeInSeconds -= offsetInMinutes * 60;\n                }\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            fail();\n        }\n        // Check again the date is valid after transformations, see #2229\n        if (isNaN(date.getTime())) {\n            fail();\n        }\n    }\n    return [date, offset];\n}\nexport function parse(str, detectUTC = false) {\n    const [date, offset] = parseRaw(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","import { Record, toString, Union } from \"../fable-library.3.7.2/Types.js\";\nimport { record_type, tuple_type, equals as equals_1, float64_type, int32_type, bool_type, list_type, class_type, lambda_type, unit_type, string_type, union_type } from \"../fable-library.3.7.2/Reflection.js\";\nimport { iterate, choose, map, exists as exists_1, empty, ofArray, contains, singleton } from \"../fable-library.3.7.2/List.js\";\nimport { isNullOrWhiteSpace, printf, toText, toFail } from \"../fable-library.3.7.2/String.js\";\nimport { disposeSafe, getEnumerator, int32ToString, structuralHash, assertEqual, equals, assertNotEqual } from \"../fable-library.3.7.2/Util.js\";\nimport { isInfinity } from \"../fable-library.3.7.2/Double.js\";\nimport { singleton as singleton_2, append, collect, delay, toList, length, forAll, exists, isEmpty } from \"../fable-library.3.7.2/Seq.js\";\nimport { value } from \"../fable-library.3.7.2/Option.js\";\nimport { newGuid } from \"../fable-library.3.7.2/Guid.js\";\nimport { ignore, catchAsync, sleep, startImmediate } from \"../fable-library.3.7.2/Async.js\";\nimport { singleton as singleton_1 } from \"../fable-library.3.7.2/AsyncBuilder.js\";\n\nexport class FocusState extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Normal\", \"Pending\", \"Focused\"];\n    }\n}\n\nexport function FocusState$reflection() {\n    return union_type(\"Fable.Mocha.FocusState\", [], FocusState, () => [[], [], []]);\n}\n\nexport class TestCase extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"SyncTest\", \"AsyncTest\", \"TestList\", \"TestListSequential\"];\n    }\n}\n\nexport function TestCase$reflection() {\n    return union_type(\"Fable.Mocha.TestCase\", [], TestCase, () => [[[\"Item1\", string_type], [\"Item2\", lambda_type(unit_type, unit_type)], [\"Item3\", FocusState$reflection()]], [[\"Item1\", string_type], [\"Item2\", class_type(\"Microsoft.FSharp.Control.FSharpAsync`1\", [unit_type])], [\"Item3\", FocusState$reflection()]], [[\"Item1\", string_type], [\"Item2\", list_type(TestCase$reflection())]], [[\"Item1\", string_type], [\"Item2\", list_type(TestCase$reflection())]]]);\n}\n\nexport function Test_testCase(name, body) {\n    return new TestCase(0, name, body, new FocusState(0));\n}\n\nexport function Test_ptestCase(name, body) {\n    return new TestCase(0, name, body, new FocusState(1));\n}\n\nexport function Test_ftestCase(name, body) {\n    return new TestCase(0, name, body, new FocusState(2));\n}\n\nexport function Test_testCaseAsync(name, body) {\n    return new TestCase(1, name, body, new FocusState(0));\n}\n\nexport function Test_ptestCaseAsync(name, body) {\n    return new TestCase(1, name, body, new FocusState(1));\n}\n\nexport function Test_ftestCaseAsync(name, body) {\n    return new TestCase(1, name, body, new FocusState(2));\n}\n\nexport function Test_testList(name, tests) {\n    return new TestCase(2, name, tests);\n}\n\nexport function Test_testSequenced(test) {\n    switch (test.tag) {\n        case 1: {\n            const name_1 = test.fields[0];\n            return new TestCase(3, name_1, singleton(new TestCase(1, name_1, test.fields[1], test.fields[2])));\n        }\n        case 2: {\n            return new TestCase(3, test.fields[0], test.fields[1]);\n        }\n        case 3: {\n            return new TestCase(3, test.fields[0], test.fields[1]);\n        }\n        default: {\n            const name = test.fields[0];\n            return new TestCase(3, name, singleton(new TestCase(0, name, test.fields[1], test.fields[2])));\n        }\n    }\n}\n\nexport function Test_failtest(msg) {\n    throw (new Error(msg));\n}\n\nexport function Test_failtestf(fmt, msg) {\n    return toFail(fmt)(msg);\n}\n\nexport const Env_insideBrowser = (new Function(\"try {return this===window;}catch(e){ return false;}\"))();\n\nexport function Expect_notEqual(actual, expected, msg) {\n    assertNotEqual(actual, expected, msg);\n}\n\nfunction Expect_isNull$0027(cond) {\n    if (equals(cond, null)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Expect_isNull(cond) {\n    const actual = Expect_isNull$0027(cond);\n    return (msg) => {\n        let copyOfStruct;\n        const actual_1 = actual;\n        const expected_1 = true;\n        const msg_1 = msg;\n        if ((actual_1 === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n            assertEqual(actual_1, expected_1, msg_1);\n        }\n        else {\n            let errorMsg;\n            if (contains((copyOfStruct = actual_1, bool_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n                Equals: equals_1,\n                GetHashCode: structuralHash,\n            })) {\n                const arg20 = toString(actual_1);\n                const arg10 = toString(expected_1);\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg_1);\n            }\n            else {\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual_1)(msg_1);\n            }\n            throw (new Error(errorMsg));\n        }\n    };\n}\n\nexport function Expect_isNotNull(cond) {\n    const actual = Expect_isNull$0027(cond);\n    return (msg) => {\n        Expect_notEqual(actual, true, msg);\n    };\n}\n\nexport function Expect_isNotNaN(cond, msg) {\n    if (Number.isNaN(cond)) {\n        throw (new Error(msg));\n    }\n}\n\nexport function Expect_isNotInfinity(cond, msg) {\n    if (isInfinity(cond)) {\n        throw (new Error(msg));\n    }\n}\n\nexport function Expect_isTrue(cond) {\n    return (msg) => {\n        let copyOfStruct;\n        const actual = cond;\n        const expected_1 = true;\n        const msg_1 = msg;\n        if ((actual === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n            assertEqual(actual, expected_1, msg_1);\n        }\n        else {\n            let errorMsg;\n            if (contains((copyOfStruct = actual, bool_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n                Equals: equals_1,\n                GetHashCode: structuralHash,\n            })) {\n                const arg20 = toString(actual);\n                const arg10 = toString(expected_1);\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg_1);\n            }\n            else {\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual)(msg_1);\n            }\n            throw (new Error(errorMsg));\n        }\n    };\n}\n\nexport function Expect_isFalse(cond) {\n    return (msg) => {\n        let copyOfStruct;\n        const actual = cond;\n        const expected_1 = false;\n        const msg_1 = msg;\n        if ((actual === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n            assertEqual(actual, expected_1, msg_1);\n        }\n        else {\n            let errorMsg;\n            if (contains((copyOfStruct = actual, bool_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n                Equals: equals_1,\n                GetHashCode: structuralHash,\n            })) {\n                const arg20 = toString(actual);\n                const arg10 = toString(expected_1);\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg_1);\n            }\n            else {\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual)(msg_1);\n            }\n            throw (new Error(errorMsg));\n        }\n    };\n}\n\nexport function Expect_isZero(cond) {\n    return (msg) => {\n        let copyOfStruct;\n        const actual = cond | 0;\n        const expected_1 = 0;\n        const msg_1 = msg;\n        if ((actual === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n            assertEqual(actual, expected_1, msg_1);\n        }\n        else {\n            let errorMsg;\n            if (contains((copyOfStruct = actual, int32_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n                Equals: equals_1,\n                GetHashCode: structuralHash,\n            })) {\n                const arg20 = int32ToString(actual);\n                const arg10 = int32ToString(expected_1);\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg_1);\n            }\n            else {\n                errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual)(msg_1);\n            }\n            throw (new Error(errorMsg));\n        }\n    };\n}\n\nexport function Expect_isEmpty(x, msg) {\n    if (!isEmpty(x)) {\n        throw (new Error(msg));\n    }\n}\n\nexport function Expect_pass() {\n    let copyOfStruct;\n    const actual = true;\n    const expected = true;\n    const msg = \"The test passed\";\n    if ((actual === expected) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n        assertEqual(actual, expected, msg);\n    }\n    else {\n        let errorMsg;\n        if (contains((copyOfStruct = actual, bool_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n            Equals: equals_1,\n            GetHashCode: structuralHash,\n        })) {\n            const arg20 = toString(actual);\n            const arg10 = toString(expected);\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg);\n        }\n        else {\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected)(actual)(msg);\n        }\n        throw (new Error(errorMsg));\n    }\n}\n\nexport function Expect_passWithMsg(message) {\n    let copyOfStruct;\n    const actual = true;\n    const expected = true;\n    const msg = message;\n    if ((actual === expected) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n        assertEqual(actual, expected, msg);\n    }\n    else {\n        let errorMsg;\n        if (contains((copyOfStruct = actual, bool_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n            Equals: equals_1,\n            GetHashCode: structuralHash,\n        })) {\n            const arg20 = toString(actual);\n            const arg10 = toString(expected);\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg);\n        }\n        else {\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected)(actual)(msg);\n        }\n        throw (new Error(errorMsg));\n    }\n}\n\nexport function Expect_exists(x, a, msg) {\n    if (!exists(a, x)) {\n        throw (new Error(msg));\n    }\n}\n\nexport function Expect_all(x, a, msg) {\n    if (!forAll(a, x)) {\n        throw (new Error(msg));\n    }\n}\n\nexport function Expect_isNonEmpty(x, msg) {\n    if (!isEmpty(x)) {\n        toFail(printf(\"%s. Expected seq to be empty\"))(msg);\n    }\n}\n\nexport function Expect_isNotEmpty(x, msg) {\n    Expect_isNotNull(x)(msg);\n    Expect_isNonEmpty(x, msg);\n}\n\nexport function Expect_hasLength(x, number, msg) {\n    let copyOfStruct;\n    const actual = length(x) | 0;\n    const expected = number | 0;\n    const msg_1 = toText(printf(\"%s. Expected %A to have length %i\"))(msg)(x)(number);\n    if ((actual === expected) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n        assertEqual(actual, expected, msg_1);\n    }\n    else {\n        let errorMsg;\n        if (contains((copyOfStruct = actual, int32_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n            Equals: equals_1,\n            GetHashCode: structuralHash,\n        })) {\n            const arg20_1 = int32ToString(actual);\n            const arg10_1 = int32ToString(expected);\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10_1)(arg20_1)(msg_1);\n        }\n        else {\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected)(actual)(msg_1);\n        }\n        throw (new Error(errorMsg));\n    }\n}\n\nexport function Expect_isOk(x, message) {\n    if (x.tag === 1) {\n        toFail(printf(\"%s. Expected Ok, was Error(\\\"%s\\\").\"))(message)(x.fields[0]);\n    }\n    else {\n        Expect_passWithMsg(message);\n    }\n}\n\nexport function Expect_stringContains(subject, substring, message) {\n    if (!(subject.indexOf(substring) >= 0)) {\n        toFail(printf(\"%s. Expected subject string \\u0027%s\\u0027 to contain substring \\u0027%s\\u0027.\"))(message)(subject)(substring);\n    }\n    else {\n        Expect_passWithMsg(message);\n    }\n}\n\nexport function Expect_isError(x, message) {\n    if (x.tag === 0) {\n        toFail(printf(\"%s. Expected Error _, was Ok(%A).\"))(message)(x.fields[0]);\n    }\n    else {\n        Expect_passWithMsg(message);\n    }\n}\n\nexport function Expect_isSome(x, message) {\n    if (x == null) {\n        toFail(printf(\"%s. Expected Some _, was None.\"))(message);\n    }\n    else {\n        Expect_passWithMsg(message);\n    }\n}\n\nexport function Expect_isNone(x, message) {\n    if (x != null) {\n        const x$0027 = value(x);\n        toFail(printf(\"%s. Expected None, was Some(%A).\"))(message)(x$0027);\n    }\n    else {\n        Expect_passWithMsg(message);\n    }\n}\n\nfunction Expect_throws$0027(f) {\n    try {\n        f();\n        return void 0;\n    }\n    catch (exn) {\n        return exn;\n    }\n}\n\nexport function Expect_throws(f, msg) {\n    const matchValue = Expect_throws$0027(f);\n    if (matchValue != null) {\n    }\n    else {\n        toFail(printf(\"%s. Expected f to throw.\"))(msg);\n    }\n}\n\nexport function Expect_throwsC(f, cont) {\n    const matchValue = Expect_throws$0027(f);\n    if (matchValue != null) {\n        return cont(matchValue);\n    }\n    else {\n        return toFail(printf(\"Expected f to throw.\"));\n    }\n}\n\nclass Html_Node extends Record {\n    constructor(Tag, Attributes, Content, Children) {\n        super();\n        this.Tag = Tag;\n        this.Attributes = Attributes;\n        this.Content = Content;\n        this.Children = Children;\n    }\n}\n\nfunction Html_Node$reflection() {\n    return record_type(\"Fable.Mocha.Html.Node\", [], Html_Node, () => [[\"Tag\", string_type], [\"Attributes\", list_type(tuple_type(string_type, string_type))], [\"Content\", string_type], [\"Children\", list_type(Html_Node$reflection())]]);\n}\n\nfunction Html_createNode(node) {\n    const el = document.createElement(node.Tag);\n    el.innerHTML = node.Content;\n    const enumerator = getEnumerator(node.Attributes);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const forLoopVar = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            el.setAttribute(forLoopVar[0], forLoopVar[1]);\n        }\n    }\n    finally {\n        disposeSafe(enumerator);\n    }\n    const enumerator_1 = getEnumerator(node.Children);\n    try {\n        while (enumerator_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const childElement = Html_createNode(enumerator_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            el.appendChild(childElement);\n        }\n    }\n    finally {\n        disposeSafe(enumerator_1);\n    }\n    return el;\n}\n\nfunction Html_simpleDiv(attrs, content) {\n    return new Html_Node(\"div\", attrs, content, empty());\n}\n\nfunction Html_div(attrs, children) {\n    return new Html_Node(\"div\", attrs, \"\", children);\n}\n\nexport function Mocha_isFocused(test) {\n    let pattern_matching_result, tests, tests_1;\n    if (test.tag === 1) {\n        if (test.fields[2].tag === 2) {\n            pattern_matching_result = 1;\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n    }\n    else if (test.tag === 2) {\n        pattern_matching_result = 2;\n        tests = test.fields[1];\n    }\n    else if (test.tag === 3) {\n        pattern_matching_result = 3;\n        tests_1 = test.fields[1];\n    }\n    else if (test.fields[2].tag === 2) {\n        pattern_matching_result = 0;\n    }\n    else {\n        pattern_matching_result = 4;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return true;\n        }\n        case 2: {\n            return exists_1(Mocha_isFocused, tests);\n        }\n        case 3: {\n            return exists_1(Mocha_isFocused, tests_1);\n        }\n        case 4: {\n            return false;\n        }\n    }\n}\n\nfunction Mocha_runSyncTestInBrowser(name, test, padding) {\n    try {\n        test();\n        return Html_simpleDiv(ofArray([[\"data-test\", name], [\"class\", \"passed\"], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:green\"))(padding)]]), toText(printf(\"✔ %s\"))(name));\n    }\n    catch (ex) {\n        const error = new Html_Node(\"div\", singleton([\"style\", \"font-size:16px;color:red;margin:10px; padding:10px; border: 1px solid red; border-radius: 10px;\"]), ex.message, empty());\n        return Html_div(empty(), ofArray([Html_simpleDiv(ofArray([[\"data-test\", name], [\"class\", \"failed\"], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:red\"))(padding)]]), toText(printf(\"✘ %s\"))(name)), error]));\n    }\n}\n\nfunction Mocha_runAsyncTestInBrowser(name, test, padding) {\n    let id;\n    let copyOfStruct = newGuid();\n    id = copyOfStruct;\n    startImmediate(singleton_1.Delay(() => singleton_1.Bind(sleep(1000), () => singleton_1.Bind(catchAsync(test), (_arg2) => {\n        if (_arg2.tag === 1) {\n            const div_1 = document.getElementById(id);\n            div_1.innerHTML = toText(printf(\"✘ %s\"))(name);\n            const error = new Html_Node(\"div\", singleton([\"style\", \"margin:10px; padding:10px; border: 1px solid red; border-radius: 10px\"]), _arg2.fields[0].message, empty());\n            div_1.setAttribute(\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:red\"))(padding));\n            div_1.setAttribute(\"class\", \"failed\");\n            div_1.appendChild(Html_createNode(error));\n            return singleton_1.Zero();\n        }\n        else {\n            const div = document.getElementById(id);\n            div.innerHTML = toText(printf(\"✔ %s\"))(name);\n            div.setAttribute(\"class\", \"passed\");\n            div.setAttribute(\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:green\"))(padding));\n            return singleton_1.Zero();\n        }\n    }))));\n    return Html_simpleDiv(ofArray([[\"id\", id], [\"data-test\", name], [\"class\", \"executing\"], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:gray\"))(padding)]]), toText(printf(\"⏳ %s\"))(name));\n}\n\nfunction Mocha_runAsyncSequentialTestInBrowser(name, test, padding) {\n    let id;\n    let copyOfStruct = newGuid();\n    id = copyOfStruct;\n    return [singleton_1.Delay(() => singleton_1.Bind(sleep(1000), () => singleton_1.Bind(catchAsync(test), (_arg2) => {\n        if (_arg2.tag === 1) {\n            const div_1 = document.getElementById(id);\n            div_1.innerHTML = toText(printf(\"✘ %s\"))(name);\n            const error = new Html_Node(\"div\", singleton([\"style\", \"margin:10px; padding:10px; border: 1px solid red; border-radius: 10px\"]), _arg2.fields[0].message, empty());\n            div_1.setAttribute(\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:red\"))(padding));\n            div_1.setAttribute(\"class\", \"failed\");\n            div_1.appendChild(Html_createNode(error));\n            return singleton_1.Zero();\n        }\n        else {\n            const div = document.getElementById(id);\n            div.innerHTML = toText(printf(\"✔ %s\"))(name);\n            div.setAttribute(\"class\", \"passed\");\n            div.setAttribute(\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:green\"))(padding));\n            return singleton_1.Zero();\n        }\n    }))), Html_simpleDiv(ofArray([[\"id\", id], [\"data-test\", name], [\"class\", \"executing\"], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx;color:gray\"))(padding)]]), toText(printf(\"⏳ %s\"))(name))];\n}\n\nfunction Mocha_flattenTests(lastName, _arg1) {\n    switch (_arg1.tag) {\n        case 1: {\n            const name_1 = _arg1.fields[0];\n            return singleton(new TestCase(1, isNullOrWhiteSpace(lastName) ? name_1 : toText(printf(\"%s - %s\"))(lastName)(name_1), _arg1.fields[1], _arg1.fields[2]));\n        }\n        case 2: {\n            return toList(delay(() => collect((test_2) => Mocha_flattenTests(_arg1.fields[0], test_2), _arg1.fields[1])));\n        }\n        case 3: {\n            return toList(delay(() => collect((test_3) => Mocha_flattenTests(_arg1.fields[0], test_3), _arg1.fields[1])));\n        }\n        default: {\n            const name = _arg1.fields[0];\n            return singleton(new TestCase(0, isNullOrWhiteSpace(lastName) ? name : toText(printf(\"%s - %s\"))(lastName)(name), _arg1.fields[1], _arg1.fields[2]));\n        }\n    }\n}\n\nfunction Mocha_renderBrowserTests(hasFocusedTests, tests, padding) {\n    return map((_arg1) => {\n        switch (_arg1.tag) {\n            case 1: {\n                const test_1 = _arg1.fields[1];\n                const name_1 = _arg1.fields[0];\n                const focus_1 = _arg1.fields[2];\n                let pattern_matching_result;\n                if (focus_1.tag === 0) {\n                    if (hasFocusedTests) {\n                        pattern_matching_result = 0;\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n                switch (pattern_matching_result) {\n                    case 0: {\n                        return Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_1], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to other focused tests\"))(name_1));\n                    }\n                    case 1: {\n                        switch (focus_1.tag) {\n                            case 1: {\n                                return Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_1], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to it being marked as pending\"))(name_1));\n                            }\n                            case 2: {\n                                return Mocha_runAsyncTestInBrowser(name_1, test_1, padding);\n                            }\n                            default: {\n                                return Mocha_runAsyncTestInBrowser(name_1, test_1, padding);\n                            }\n                        }\n                    }\n                }\n            }\n            case 2: {\n                const name_2 = _arg1.fields[0];\n                const tests_1 = Html_div(empty(), Mocha_renderBrowserTests(hasFocusedTests, _arg1.fields[1], padding + 10));\n                return Html_div(empty(), singleton(new Html_Node(\"div\", ofArray([[\"class\", \"module\"], [\"data-module\", name_2], [\"style\", toText(printf(\"font-size:20px; padding:%dpx\"))(padding)]]), name_2, singleton(tests_1))));\n            }\n            case 3: {\n                const name_3 = _arg1.fields[0];\n                const xs = choose((_arg2) => {\n                    switch (_arg2.tag) {\n                        case 0: {\n                            const focusedState = _arg2.fields[2];\n                            let pattern_matching_result_1;\n                            if (focusedState.tag === 0) {\n                                if (hasFocusedTests) {\n                                    pattern_matching_result_1 = 0;\n                                }\n                                else {\n                                    pattern_matching_result_1 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                            switch (pattern_matching_result_1) {\n                                case 0: {\n                                    return [singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => singleton_1.Return())), Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_3], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to other focused tests\"))(name_3))];\n                                }\n                                case 1: {\n                                    switch (focusedState.tag) {\n                                        case 2:\n                                        case 0: {\n                                            return Mocha_runAsyncSequentialTestInBrowser(_arg2.fields[0], singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => {\n                                                _arg2.fields[1]();\n                                                return singleton_1.Zero();\n                                            })), padding + 10);\n                                        }\n                                        default: {\n                                            return [singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => singleton_1.Return())), Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_3], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to it being marked as pending\"))(name_3))];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        case 1: {\n                            const focusedState_1 = _arg2.fields[2];\n                            let pattern_matching_result_2;\n                            if (focusedState_1.tag === 0) {\n                                if (hasFocusedTests) {\n                                    pattern_matching_result_2 = 0;\n                                }\n                                else {\n                                    pattern_matching_result_2 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                            switch (pattern_matching_result_2) {\n                                case 0: {\n                                    return [singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => singleton_1.Return())), Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_3], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to other focused tests\"))(name_3))];\n                                }\n                                case 1: {\n                                    switch (focusedState_1.tag) {\n                                        case 2:\n                                        case 0: {\n                                            return Mocha_runAsyncSequentialTestInBrowser(_arg2.fields[0], _arg2.fields[1], padding + 10);\n                                        }\n                                        default: {\n                                            return [singleton_1.Delay(() => singleton_1.Bind(sleep(10), () => singleton_1.Return())), Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name_3], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to it being marked as pending\"))(name_3))];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        default: {\n                            return void 0;\n                        }\n                    }\n                }, Mocha_flattenTests(\"\", new TestCase(3, \"\", _arg1.fields[1])));\n                const tests_2 = Html_div(empty(), map((tuple) => tuple[1], xs));\n                const header_1 = new Html_Node(\"div\", ofArray([[\"class\", \"module\"], [\"data-module\", name_3], [\"style\", toText(printf(\"font-size:20px; padding:%dpx\"))(padding)]]), name_3, singleton(tests_2));\n                const asyncOps = map((tuple_1) => tuple_1[0], xs);\n                startImmediate(ignore(singleton_1.Delay(() => singleton_1.Combine(singleton_1.For(asyncOps, (_arg8) => singleton_1.Bind(_arg8, () => {\n                    return singleton_1.Zero();\n                })), singleton_1.Delay(() => singleton_1.Return())))));\n                return Html_div(empty(), singleton(header_1));\n            }\n            default: {\n                const test = _arg1.fields[1];\n                const name = _arg1.fields[0];\n                const focus = _arg1.fields[2];\n                let pattern_matching_result_3;\n                if (focus.tag === 0) {\n                    if (hasFocusedTests) {\n                        pattern_matching_result_3 = 0;\n                    }\n                    else {\n                        pattern_matching_result_3 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_3 = 1;\n                }\n                switch (pattern_matching_result_3) {\n                    case 0: {\n                        return Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to other focused tests\"))(name));\n                    }\n                    case 1: {\n                        switch (focus.tag) {\n                            case 1: {\n                                return Html_simpleDiv(ofArray([[\"class\", \"pending\"], [\"data-test\", name], [\"style\", toText(printf(\"font-size:16px; padding-left:%dpx; color:#B8860B\"))(padding)]]), toText(printf(\"🚧 skipping \\u0027%s\\u0027 due to it being marked as pending\"))(name));\n                            }\n                            case 2: {\n                                return Mocha_runSyncTestInBrowser(name, test, padding);\n                            }\n                            default: {\n                                return Mocha_runSyncTestInBrowser(name, test, padding);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }, tests);\n}\n\nfunction Mocha_configureAsyncTest(test, finished) {\n    startImmediate(singleton_1.Delay(() => singleton_1.Bind(catchAsync(test), (_arg1) => {\n        if (_arg1.tag === 1) {\n            finished(_arg1.fields[0]);\n            return singleton_1.Zero();\n        }\n        else {\n            finished();\n            return singleton_1.Zero();\n        }\n    })));\n}\n\nexport function Mocha_invalidateTestResults() {\n    startImmediate(singleton_1.Delay(() => {\n        const passedCount = (document.getElementsByClassName(\"passed\").length) | 0;\n        const failedCount = (document.getElementsByClassName(\"failed\").length) | 0;\n        const executingCount = (document.getElementsByClassName(\"executing\").length) | 0;\n        const skippedCount = (document.getElementsByClassName(\"pending\").length) | 0;\n        const total = (((passedCount + failedCount) + executingCount) + skippedCount) | 0;\n        (document.getElementById(\"total-tests\")).innerHTML = toText(printf(\"Test Results (%d total)\"))(total);\n        (document.getElementById(\"passed-tests\")).innerHTML = toText(printf(\"✔ %d passed\"))(passedCount);\n        (document.getElementById(\"failed-tests\")).innerHTML = toText(printf(\"✘ %d failed\"))(failedCount);\n        (document.getElementById(\"executing-tests\")).innerHTML = toText(printf(\"⏳ %d being executed (async)\"))(executingCount);\n        (document.getElementById(\"skipped-tests\")).innerHTML = toText(printf(\"🚧 %d pending\"))(skippedCount);\n        return (executingCount > 0) ? singleton_1.Bind(sleep(50), () => {\n            Mocha_invalidateTestResults();\n            return singleton_1.Zero();\n        }) : singleton_1.Return();\n    }));\n}\n\nfunction Mocha_runViaMocha(test) {\n    switch (test.tag) {\n        case 1: {\n            const test_2 = test.fields[1];\n            const msg_1 = test.fields[0];\n            const focus_1 = test.fields[2];\n            switch (focus_1.tag) {\n                case 1: {\n                    it.skip(msg_1, ((finished_1) => {\n                        Mocha_configureAsyncTest(test_2, finished_1);\n                    }));\n                    break;\n                }\n                case 2: {\n                    it.only(msg_1, ((finished_2) => {\n                        Mocha_configureAsyncTest(test_2, finished_2);\n                    }));\n                    break;\n                }\n                default: {\n                    it(msg_1, ((finished) => {\n                        Mocha_configureAsyncTest(test_2, finished);\n                    }));\n                }\n            }\n            break;\n        }\n        case 2: {\n            describe(test.fields[0], () => {\n                iterate((test_3) => {\n                    Mocha_runViaMocha(test_3);\n                }, test.fields[1]);\n            });\n            break;\n        }\n        case 3: {\n            describe(test.fields[0], () => {\n                iterate((test_4) => {\n                    Mocha_runViaMocha(test_4);\n                }, test.fields[1]);\n            });\n            break;\n        }\n        default: {\n            const test_1 = test.fields[1];\n            const msg = test.fields[0];\n            const focus = test.fields[2];\n            switch (focus.tag) {\n                case 1: {\n                    it.skip(msg, test_1);\n                    break;\n                }\n                case 2: {\n                    it.only(msg, test_1);\n                    break;\n                }\n                default: {\n                    it(msg, test_1);\n                }\n            }\n        }\n    }\n}\n\nexport function Mocha_runViaDotnet(test) {\n    throw (new Error(\"Currently not implemented, use Expecto for now.\"));\n    return 1;\n}\n\nexport function Mocha_runTests(test) {\n    if (Env_insideBrowser ? true : (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)) {\n        const renderedTests = Mocha_renderBrowserTests(Mocha_isFocused(test), singleton(test), 0);\n        const testResults = Html_div(singleton([\"style\", \"margin-bottom: 20px\"]), ofArray([Html_simpleDiv(ofArray([[\"id\", \"total-tests\"], [\"style\", \"font-size:20px; margin-bottom:5px\"]]), \"Test Results\"), Html_simpleDiv(ofArray([[\"id\", \"passed-tests\"], [\"style\", \"color:green; margin-left:5px;\"]]), \"Passed\"), Html_simpleDiv(ofArray([[\"id\", \"skipped-tests\"], [\"style\", \"color:#B8860B\"]]), \"Pending\"), Html_simpleDiv(ofArray([[\"id\", \"failed-tests\"], [\"style\", \"color:red;margin-left:5px\"]]), \"Failed\"), Html_simpleDiv(ofArray([[\"id\", \"executing-tests\"], [\"style\", \"color:gray;margin-left:5px\"]]), \"Executing\")]));\n        const element = Html_createNode(Html_div(singleton([\"style\", \"padding:20px;\"]), toList(delay(() => append(singleton_2(testResults), delay(() => renderedTests))))));\n        (document.body).appendChild(element);\n        Mocha_invalidateTestResults();\n        return 0;\n    }\n    else {\n        Mocha_runViaMocha(test);\n        return 0;\n    }\n}\n\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\n// export function makeRangeStepFunction(step: Long, last: Long, unsigned: boolean) {\n//   const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Long) => {\n//     const comparedWithLast = LongLib.compare(x, last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\nexport function divRem(x, y, out) {\n    const div = op_Division(x, y);\n    const rem = op_Modulus(x, y);\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","import { Union } from \"../../fable_modules/fable-library.3.7.2/Types.js\";\nimport { union_type, string_type } from \"../../fable_modules/fable-library.3.7.2/Reflection.js\";\n\nexport class NodeType extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Input\", \"Output\", \"Default\", \"Custom\"];\n    }\n}\n\nexport function NodeType$reflection() {\n    return union_type(\"Feliz.ReactFlow.NodeType\", [], NodeType, () => [[], [], [], [[\"Item\", string_type]]]);\n}\n\nexport function NodeType__toString(this$) {\n    switch (this$.tag) {\n        case 1: {\n            return \"output\";\n        }\n        case 2: {\n            return \"default\";\n        }\n        case 3: {\n            return this$.fields[0];\n        }\n        default: {\n            return \"input\";\n        }\n    }\n}\n\n","import { singleton, concat, map, empty, iterate } from \"../fable-library.3.7.2/List.js\";\nimport { singleton as singleton_1 } from \"../fable-library.3.7.2/AsyncBuilder.js\";\nimport { startImmediate, catchAsync } from \"../fable-library.3.7.2/Async.js\";\nimport { Timer_delay } from \"./prelude.fs.js\";\n\nexport function Cmd_exec(onError, dispatch, cmd) {\n    iterate((call) => {\n        try {\n            call(dispatch);\n        }\n        catch (ex) {\n            onError(ex);\n        }\n    }, cmd);\n}\n\nexport function Cmd_none() {\n    return empty();\n}\n\nexport function Cmd_map(f, cmd) {\n    return map((g) => ((arg_1) => {\n        g((arg) => {\n            arg_1(f(arg));\n        });\n    }), cmd);\n}\n\nexport function Cmd_batch(cmds) {\n    return concat(cmds);\n}\n\nexport function Cmd_ofSub(sub) {\n    return singleton(sub);\n}\n\nexport function Cmd_OfFunc_either(task, arg, ofSuccess, ofError) {\n    return singleton((dispatch) => {\n        try {\n            return dispatch(ofSuccess(task(arg)));\n        }\n        catch (x) {\n            return dispatch(ofError(x));\n        }\n    });\n}\n\nexport function Cmd_OfFunc_perform(task, arg, ofSuccess) {\n    return singleton((dispatch) => {\n        try {\n            dispatch(ofSuccess(task(arg)));\n        }\n        catch (x) {\n        }\n    });\n}\n\nexport function Cmd_OfFunc_attempt(task, arg, ofError) {\n    return singleton((dispatch) => {\n        try {\n            task(arg);\n        }\n        catch (x) {\n            dispatch(ofError(x));\n        }\n    });\n}\n\nexport function Cmd_OfFunc_result(msg) {\n    return singleton((dispatch) => {\n        dispatch(msg);\n    });\n}\n\nexport function Cmd_OfAsyncWith_either(start, task, arg, ofSuccess, ofError) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\n            const r = _arg1;\n            arg_1((r.tag === 1) ? ofError(r.fields[0]) : ofSuccess(r.fields[0]));\n            return singleton_1.Zero();\n        })));\n    });\n}\n\nexport function Cmd_OfAsyncWith_perform(start, task, arg, ofSuccess) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\n            const r = _arg1;\n            if (r.tag === 0) {\n                arg_1(ofSuccess(r.fields[0]));\n                return singleton_1.Zero();\n            }\n            else {\n                return singleton_1.Zero();\n            }\n        })));\n    });\n}\n\nexport function Cmd_OfAsyncWith_attempt(start, task, arg, ofError) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\n            const r = _arg1;\n            if (r.tag === 1) {\n                arg_1(ofError(r.fields[0]));\n                return singleton_1.Zero();\n            }\n            else {\n                return singleton_1.Zero();\n            }\n        })));\n    });\n}\n\nexport function Cmd_OfAsyncWith_result(start, task) {\n    return singleton((arg) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(task, (_arg1) => {\n            arg(_arg1);\n            return singleton_1.Zero();\n        })));\n    });\n}\n\nexport function Cmd_OfAsync_start(x) {\n    Timer_delay(0, (_arg1) => {\n        startImmediate(x);\n    });\n}\n\nexport function Cmd_OfPromise_either(task, arg, ofSuccess, ofError) {\n    return singleton((dispatch) => {\n        task(arg).then((arg_1) => dispatch(ofSuccess(arg_1))).catch((arg_3) => dispatch(ofError(arg_3)));\n    });\n}\n\nexport function Cmd_OfPromise_perform(task, arg, ofSuccess) {\n    return singleton((dispatch) => {\n        task(arg).then((arg_1) => dispatch(ofSuccess(arg_1)));\n    });\n}\n\nexport function Cmd_OfPromise_attempt(task, arg, ofError) {\n    return singleton((dispatch) => {\n        task(arg).catch((arg_2) => {\n            dispatch(ofError(arg_2));\n        });\n    });\n}\n\nexport function Cmd_OfPromise_result(task) {\n    return singleton((dispatch) => {\n        task.then(dispatch);\n    });\n}\n\nexport function Cmd_attemptFunc(task, arg, ofError) {\n    return Cmd_OfFunc_attempt(task, arg, ofError);\n}\n\n","import { some } from \"../fable-library.3.7.2/Option.js\";\nimport { create, isLeapYear } from \"../fable-library.3.7.2/Date.js\";\nimport { parse } from \"../fable-library.3.7.2/Int32.js\";\nimport { split, isNullOrWhiteSpace } from \"../fable-library.3.7.2/String.js\";\nimport { equalsWith } from \"../fable-library.3.7.2/Array.js\";\nimport react from \"react\";\n\nexport function DateParsing_$007CBetween$007C_$007C(x, y, input) {\n    if ((input >= x) && (input <= y)) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function DateParsing_isLeapYear(year) {\n    return isLeapYear(year);\n}\n\nexport function DateParsing_$007CInt$007C_$007C(input) {\n    try {\n        return parse(input, 511, false, 32);\n    }\n    catch (matchValue) {\n        return void 0;\n    }\n}\n\nexport function DateParsing_parse(input) {\n    try {\n        if (isNullOrWhiteSpace(input)) {\n            return void 0;\n        }\n        else {\n            const parts = split(input, [\"-\"], null, 0);\n            let patternInput;\n            let pattern_matching_result, month, year;\n            if ((!equalsWith((x, y) => (x === y), parts, null)) && (parts.length === 2)) {\n                const activePatternResult6959 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                if (activePatternResult6959 != null) {\n                    const activePatternResult6960 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                    if (activePatternResult6960 != null) {\n                        pattern_matching_result = 0;\n                        month = activePatternResult6960;\n                        year = activePatternResult6959;\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    patternInput = [year, month, 1, 0, 0];\n                    break;\n                }\n                case 1: {\n                    let pattern_matching_result_1, day, month_1, year_1;\n                    if ((!equalsWith((x_1, y_1) => (x_1 === y_1), parts, null)) && (parts.length === 3)) {\n                        const activePatternResult6956 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                        if (activePatternResult6956 != null) {\n                            const activePatternResult6957 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                            if (activePatternResult6957 != null) {\n                                const activePatternResult6958 = DateParsing_$007CInt$007C_$007C(parts[2]);\n                                if (activePatternResult6958 != null) {\n                                    pattern_matching_result_1 = 0;\n                                    day = activePatternResult6958;\n                                    month_1 = activePatternResult6957;\n                                    year_1 = activePatternResult6956;\n                                }\n                                else {\n                                    pattern_matching_result_1 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            patternInput = [year_1, month_1, day, 0, 0];\n                            break;\n                        }\n                        case 1: {\n                            let pattern_matching_result_2, day_1, month_2, year_2;\n                            if ((!equalsWith((x_2, y_2) => (x_2 === y_2), parts, null)) && (parts.length === 3)) {\n                                const activePatternResult6954 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                                if (activePatternResult6954 != null) {\n                                    const activePatternResult6955 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                                    if (activePatternResult6955 != null) {\n                                        pattern_matching_result_2 = 0;\n                                        day_1 = parts[2];\n                                        month_2 = activePatternResult6955;\n                                        year_2 = activePatternResult6954;\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_2 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                            switch (pattern_matching_result_2) {\n                                case 0: {\n                                    if (day_1.indexOf(\"T\") >= 0) {\n                                        const matchValue = split(day_1, [\"T\"], null, 0);\n                                        let pattern_matching_result_3, parsedDay, time;\n                                        if ((!equalsWith((x_3, y_3) => (x_3 === y_3), matchValue, null)) && (matchValue.length === 2)) {\n                                            const activePatternResult6953 = DateParsing_$007CInt$007C_$007C(matchValue[0]);\n                                            if (activePatternResult6953 != null) {\n                                                pattern_matching_result_3 = 0;\n                                                parsedDay = activePatternResult6953;\n                                                time = matchValue[1];\n                                            }\n                                            else {\n                                                pattern_matching_result_3 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 1;\n                                        }\n                                        switch (pattern_matching_result_3) {\n                                            case 0: {\n                                                const matchValue_1 = split(time, [\":\"], null, 0);\n                                                let pattern_matching_result_4, hour, minute;\n                                                if ((!equalsWith((x_4, y_4) => (x_4 === y_4), matchValue_1, null)) && (matchValue_1.length === 2)) {\n                                                    const activePatternResult6951 = DateParsing_$007CInt$007C_$007C(matchValue_1[0]);\n                                                    if (activePatternResult6951 != null) {\n                                                        const activePatternResult6952 = DateParsing_$007CInt$007C_$007C(matchValue_1[1]);\n                                                        if (activePatternResult6952 != null) {\n                                                            pattern_matching_result_4 = 0;\n                                                            hour = activePatternResult6951;\n                                                            minute = activePatternResult6952;\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_4 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_4 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_4 = 1;\n                                                }\n                                                switch (pattern_matching_result_4) {\n                                                    case 0: {\n                                                        const matchValue_2 = [hour, minute];\n                                                        let pattern_matching_result_5;\n                                                        if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[0]) != null) {\n                                                            if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[1]) != null) {\n                                                                pattern_matching_result_5 = 0;\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_5 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_5 = 1;\n                                                        }\n                                                        switch (pattern_matching_result_5) {\n                                                            case 0: {\n                                                                patternInput = [year_2, month_2, parsedDay, hour, minute];\n                                                                break;\n                                                            }\n                                                            case 1: {\n                                                                patternInput = [-1, 1, 1, 0, 0];\n                                                                break;\n                                                            }\n                                                        }\n                                                        break;\n                                                    }\n                                                    case 1: {\n                                                        patternInput = [-1, 1, 1, 0, 0];\n                                                        break;\n                                                    }\n                                                }\n                                                break;\n                                            }\n                                            case 1: {\n                                                patternInput = [-1, 1, 1, 0, 0];\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        patternInput = [-1, 1, 1, 0, 0];\n                                    }\n                                    break;\n                                }\n                                case 1: {\n                                    patternInput = [-1, 1, 1, 0, 0];\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n            const year_3 = patternInput[0] | 0;\n            const month_3 = patternInput[1] | 0;\n            const minute_1 = patternInput[4] | 0;\n            const hour_1 = patternInput[3] | 0;\n            const day_2 = patternInput[2] | 0;\n            if (year_3 <= 0) {\n                return void 0;\n            }\n            else {\n                const matchValue_3 = [month_3, day_2];\n                let pattern_matching_result_6;\n                if (matchValue_3[0] === 2) {\n                    if (DateParsing_$007CBetween$007C_$007C(1, 29, matchValue_3[1]) != null) {\n                        if (DateParsing_isLeapYear(year_3)) {\n                            pattern_matching_result_6 = 0;\n                        }\n                        else {\n                            pattern_matching_result_6 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_6 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_6 = 1;\n                }\n                switch (pattern_matching_result_6) {\n                    case 0: {\n                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                    }\n                    case 1: {\n                        let pattern_matching_result_7;\n                        if (matchValue_3[0] === 2) {\n                            if (DateParsing_$007CBetween$007C_$007C(1, 28, matchValue_3[1]) != null) {\n                                if (!DateParsing_isLeapYear(year_3)) {\n                                    pattern_matching_result_7 = 0;\n                                }\n                                else {\n                                    pattern_matching_result_7 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_7 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_7 = 1;\n                        }\n                        switch (pattern_matching_result_7) {\n                            case 0: {\n                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                            }\n                            case 1: {\n                                let pattern_matching_result_8;\n                                if (matchValue_3[0] === 1) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 3) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 5) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 7) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 8) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 10) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 12) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_8 = 1;\n                                }\n                                switch (pattern_matching_result_8) {\n                                    case 0: {\n                                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                                    }\n                                    case 1: {\n                                        let pattern_matching_result_9;\n                                        if (matchValue_3[0] === 4) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 6) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 9) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 11) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_9 = 1;\n                                        }\n                                        switch (pattern_matching_result_9) {\n                                            case 0: {\n                                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                                            }\n                                            case 1: {\n                                                return void 0;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    catch (matchValue_4) {\n        return void 0;\n    }\n}\n\nexport const Interop_reactApi = react;\n\n","import { useLayoutEffectWithDeps, useLayoutEffect, useEffectWithDeps, useEffect, useDebugValue } from \"./ReactInterop.js\";\nimport { class_type } from \"../fable-library.3.7.2/Reflection.js\";\nimport { iterate } from \"../fable-library.3.7.2/Seq.js\";\nimport { defaultArg, some, toArray } from \"../fable-library.3.7.2/Option.js\";\nimport { Interop_reactApi } from \"./Interop.fs.js\";\nimport { disposeSafe, curry, uncurry } from \"../fable-library.3.7.2/Util.js\";\nimport { useState } from \"react\";\nimport * as react from \"react\";\n\nexport const ReactInterop_useDebugValueWithFormatter = useDebugValue;\n\nexport const ReactInterop_useEffect = useEffect;\n\nexport const ReactInterop_useEffectWithDeps = useEffectWithDeps;\n\nexport const ReactInterop_useLayoutEffect = useLayoutEffect;\n\nexport const ReactInterop_useLayoutEffectWithDeps = useLayoutEffectWithDeps;\n\nexport class Internal {\n    constructor() {\n    }\n}\n\nexport function Internal$reflection() {\n    return class_type(\"Feliz.Internal\", void 0, Internal);\n}\n\nexport function Internal_$ctor() {\n    return new Internal();\n}\n\n\nexport function Internal_functionComponent_Z1B155329(renderElement, name, withKey) {\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    console.warn(some(\"Feliz: using React.functionComponent in Fable 3 is obsolete, please consider using the [\\u003cReactComponent\\u003e] attribute instead which makes Feliz output better Javascript code that is compatible with react-refresh\"));\n    return (props) => {\n        const props_2 = Internal_propsWithKey(withKey, props);\n        return Interop_reactApi.createElement(renderElement, props_2);\n    };\n}\n\nexport function Internal_memo_Z603636D8(renderElement, name, areEqual, withKey) {\n    const memoElementType = Interop_reactApi.memo(renderElement, uncurry(2, defaultArg(curry(2, areEqual), null)));\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    return (props) => {\n        const props_2 = Internal_propsWithKey(withKey, props);\n        return Interop_reactApi.createElement(memoElementType, props_2);\n    };\n}\n\nfunction Internal_propsWithKey(withKey, props) {\n    if (withKey == null) {\n        return props;\n    }\n    else {\n        const f = withKey;\n        props.key = f(props);\n        return props;\n    }\n}\n\nexport class React {\n    constructor() {\n    }\n}\n\nexport function React$reflection() {\n    return class_type(\"Feliz.React\", void 0, React);\n}\n\nexport function React_createDisposable_3A5B6456(dispose) {\n    return {\n        Dispose() {\n            dispose();\n        },\n    };\n}\n\nexport function useReact_useState_FCFD9EF(initializer) {\n    return Interop_reactApi.useState(initializer);\n}\n\nexport function useReact_useReducer_2B9E6EA0(update, initialState) {\n    const arg00 = update;\n    return Interop_reactApi.useReducer(arg00, initialState);\n}\n\nexport function useReact_useEffect_Z5ECA432F(effect) {\n    ReactInterop_useEffect(effect);\n}\n\nexport function useReact_useEffect_Z5234A374(effect, dependencies) {\n    ReactInterop_useEffectWithDeps(effect, dependencies);\n}\n\nexport function useReact_useLayoutEffect_Z5ECA432F(effect) {\n    ReactInterop_useLayoutEffect(effect);\n}\n\nexport function useReact_useLayoutEffect_Z5234A374(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps(effect, dependencies);\n}\n\nexport function useReact_useLayoutEffect_3A5B6456(effect) {\n    ReactInterop_useLayoutEffect((_arg1) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\nexport function useReact_useLayoutEffect_Z101E1A95(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps((_arg2) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\nexport function useReact_useEffectOnce_3A5B6456(effect) {\n    useReact_useEffect_Z101E1A95(effect, []);\n}\n\nexport function useReact_useEffectOnce_Z5ECA432F(effect) {\n    useReact_useEffect_Z5234A374(effect, []);\n}\n\nexport function useReact_useEffectOnce_6E825304(effect) {\n    useReact_useEffect_Z5234A374(() => {\n        const disposeOption = effect();\n        return {\n            Dispose() {\n                ((option) => {\n                    iterate((d) => {\n                        let copyOfStruct = d;\n                        disposeSafe(copyOfStruct);\n                    }, toArray(option));\n                })(disposeOption);\n            },\n        };\n    }, []);\n}\n\nexport function useReact_useEffect_3A5B6456(effect) {\n    ReactInterop_useEffect((_arg3) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\nexport function useReact_useEffect_Z101E1A95(effect, dependencies) {\n    ReactInterop_useEffectWithDeps((_arg4) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\nexport function useReact_useDebugValue_Z721C83C5(value) {\n    ReactInterop_useDebugValueWithFormatter(value, (x) => x);\n}\n\nexport function useReact_useDebugValue_77A55D6D(value, formatter) {\n    ReactInterop_useDebugValueWithFormatter(value, formatter);\n}\n\nexport function useReact_useCallback_93353E(callbackFunction, dependencies) {\n    const arg10 = defaultArg(dependencies, []);\n    return Interop_reactApi.useCallback(callbackFunction, arg10);\n}\n\nexport function useReact_useRef_1505(initialValue) {\n    return Interop_reactApi.useRef(initialValue);\n}\n\nexport function useReact_useInputRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useButtonRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useElementRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useMemo_CF4EA67(createFunction, dependencies) {\n    const arg10 = defaultArg(dependencies, []);\n    return Interop_reactApi.useMemo(createFunction, arg10);\n}\n\nexport function React_functionComponent_2F9D7239(render, withKey) {\n    return Internal_functionComponent_Z1B155329(render, void 0, withKey);\n}\n\nexport function React_functionComponent_Z4C5FE1BE(name, render, withKey) {\n    return Internal_functionComponent_Z1B155329(render, name, withKey);\n}\n\nexport function React_functionComponent_19A12FB2(render, withKey) {\n    return Internal_functionComponent_Z1B155329((arg) => {\n        const arg00 = render(arg);\n        return react.createElement(react.Fragment, {}, ...arg00);\n    }, void 0, withKey);\n}\n\nexport function React_functionComponent_2E1DD889(name, render, withKey) {\n    return Internal_functionComponent_Z1B155329((arg) => {\n        const arg00 = render(arg);\n        return react.createElement(react.Fragment, {}, ...arg00);\n    }, name, withKey);\n}\n\nexport function React_memo_62A0F746(render, withKey, areEqual) {\n    return Internal_memo_Z603636D8(render, void 0, areEqual, withKey);\n}\n\nexport function React_memo_6648A89D(name, render, withKey, areEqual) {\n    return Internal_memo_Z603636D8(render, name, areEqual, withKey);\n}\n\nexport function React_memo_C2C6BED(render, withKey, areEqual) {\n    return Internal_memo_Z603636D8((arg) => {\n        const arg00 = render(arg);\n        return react.createElement(react.Fragment, {}, ...arg00);\n    }, void 0, areEqual, withKey);\n}\n\nexport function React_memo_Z4FCC584A(name, render, withKey, areEqual) {\n    return Internal_memo_Z603636D8((arg) => {\n        const arg00 = render(arg);\n        return react.createElement(react.Fragment, {}, ...arg00);\n    }, name, areEqual, withKey);\n}\n\nexport function React_createContext_1AE444D8(name, defaultValue) {\n    const contextObject = Interop_reactApi.createContext(defaultArg(defaultValue, void 0));\n    iterate((name_1) => {\n        contextObject.displayName = name_1;\n    }, toArray(name));\n    return contextObject;\n}\n\nexport function React_contextProvider_34D9BBBD(contextObject, contextValue, child) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, child);\n}\n\nexport function React_contextProvider_138D2F56(contextObject, contextValue, children) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, ...children);\n}\n\nexport function React_contextConsumer_Z68910595(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, null, render);\n}\n\nexport function React_contextConsumer_56D53A40(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, null, (arg) => {\n        const arg00 = render(arg);\n        return react.createElement(react.Fragment, {}, ...arg00);\n    });\n}\n\nexport function useReact_useContext_37FA55CF(contextObject) {\n    return Interop_reactApi.useContext(contextObject);\n}\n\nexport function useReact_useCallbackRef_7C4B0DD6(callback) {\n    const lastRenderCallbackRef = useReact_useRef_1505(callback);\n    const callbackRef = useReact_useCallback_93353E((arg) => lastRenderCallbackRef.current(arg), []);\n    useReact_useLayoutEffect_3A5B6456(() => {\n        lastRenderCallbackRef.current = callback;\n    });\n    return callbackRef;\n}\n\nexport const React_useStateWithUpdater_1505 = useState;\n\nexport function React_forwardRef_3790D881(render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    return (tupledArg) => {\n        const propsObj = Object.assign({}, tupledArg[0]);\n        propsObj.ref = tupledArg[1];\n        return Interop_reactApi.createElement(forwardRefType, propsObj);\n    };\n}\n\nexport function React_forwardRef_7DC3DB1A(name, render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    render.displayName = name;\n    return (tupledArg) => {\n        const propsObj = Object.assign({}, tupledArg[0]);\n        propsObj.ref = tupledArg[1];\n        return Interop_reactApi.createElement(forwardRefType, propsObj);\n    };\n}\n\nexport function React_strictMode_6E3A73D(children) {\n    return Interop_reactApi.createElement(Interop_reactApi.StrictMode, void 0, ...children);\n}\n\nexport function React_lazy$0027_4712D3AE(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(() => dynamicImport), props);\n}\n\nexport function React_lazy$0027_Z3D8450FC(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(dynamicImport), props);\n}\n\nexport function React_suspense_6E3A73D(children) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: null,\n    }, Object.assign({}, o)), ...children);\n}\n\nexport function React_suspense_Z3796A576(children, fallback) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: fallback,\n    }, Object.assign({}, o)), ...children);\n}\n\nexport function useReact_useImperativeHandle_596DDC25(ref, createHandle) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle);\n}\n\nexport function useReact_useImperativeHandle_Z12F09548(ref, createHandle, dependencies) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle, dependencies);\n}\n\nexport function useFeliz_React__React_useState_Static_1505(initial) {\n    return Interop_reactApi.useState(initial);\n}\n\nexport const Feliz_React__React_useStateWithUpdater_Static_FCFD9EF = useState;\n\n","import { isNode, isEdge, Controls, MiniMap, Background, Handle } from \"react-flow-renderer\";\nimport react_flow_renderer from \"react-flow-renderer\";\n\nexport const Interop_reactFlow = react_flow_renderer;\n\nexport const Interop_handle = Handle;\n\nexport const Interop_background = Background;\n\nexport const Interop_miniMap = MiniMap;\n\nexport const Interop_controls = Controls;\n\nexport const Helpers_isEdge = isEdge;\n\nexport const Helpers_isNode = isNode;\n\n","import { Union, Record } from \"../../fable_modules/fable-library.3.7.2/Types.js\";\nimport { union_type, list_type, class_type, record_type, string_type } from \"../../fable_modules/fable-library.3.7.2/Reflection.js\";\nimport { NodeType, NodeType__toString } from \"../Feliz.ReactFlow/Types.js\";\nimport { singleton, concat, ofArray } from \"../../fable_modules/fable-library.3.7.2/List.js\";\nimport { Cmd_none } from \"../../fable_modules/Fable.Elmish.3.1.0/cmd.fs.js\";\nimport { useFeliz_React__React_useState_Static_1505 } from \"../../fable_modules/Feliz.1.58.1/React.fs.js\";\nimport { createElement } from \"react\";\nimport * as react from \"react\";\nimport { createObj } from \"../../fable_modules/fable-library.3.7.2/Util.js\";\nimport { Interop_reactApi } from \"../../fable_modules/Feliz.1.58.1/Interop.fs.js\";\nimport { Interop_reactFlow, Interop_controls, Interop_miniMap, Interop_background, Interop_handle } from \"../Feliz.ReactFlow/Interop.js\";\nimport { Interop_reactApi as Interop_reactApi_1 } from \"../../fable_modules/Feliz.1.58.1/Interop.fs.js\";\nimport { singleton as singleton_1, append, delay, toArray } from \"../../fable_modules/fable-library.3.7.2/Seq.js\";\nimport { some } from \"../../fable_modules/fable-library.3.7.2/Option.js\";\nimport { keyValueList } from \"../../fable_modules/fable-library.3.7.2/MapUtil.js\";\n\nexport class FlowElement extends Record {\n    constructor(Id, Descr) {\n        super();\n        this.Id = Id;\n        this.Descr = Descr;\n    }\n}\n\nexport function FlowElement$reflection() {\n    return record_type(\"Index.FlowElement\", [], FlowElement, () => [[\"Id\", string_type], [\"Descr\", string_type]]);\n}\n\nexport class Model extends Record {\n    constructor(NodeList$) {\n        super();\n        this.NodeList = NodeList$;\n    }\n}\n\nexport function Model$reflection() {\n    return record_type(\"Index.Model\", [], Model, () => [[\"NodeList\", list_type(class_type(\"Feliz.ReactFlow.IElement\"))]]);\n}\n\nexport class Msg extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"AddFlowElement\"];\n    }\n}\n\nexport function Msg$reflection() {\n    return union_type(\"Index.Msg\", [], Msg, () => [[[\"Item\", FlowElement$reflection()]]]);\n}\n\nexport const initNodes = ofArray([{\n    id: \"1\",\n    type: NodeType__toString(new NodeType(0)),\n    data: {\n        label: \"Erdgas Einsatz\",\n    },\n    style: {\n        background: \"yellow\",\n        color: \"#332\",\n        border: \"1px solid #222138\",\n        width: 180,\n    },\n    position: {\n        x: 50,\n        y: 30,\n    },\n}, {\n    id: \"2\",\n    type: NodeType__toString(new NodeType(2)),\n    data: {\n        label: \"CityCube\",\n    },\n    style: {\n        background: \"#2e88c9\",\n        color: \"white\",\n        border: \"1px solid #222138\",\n        width: 180,\n    },\n    position: {\n        x: 400,\n        y: 30,\n    },\n}, {\n    id: \"3\",\n    type: NodeType__toString(new NodeType(1)),\n    data: {\n        label: \"Strom Absatz\",\n    },\n    style: {\n        background: \"lightblue\",\n        color: \"#333\",\n        border: \"1px solid #222138\",\n        width: 180,\n    },\n    position: {\n        x: 300,\n        y: 200,\n    },\n}, {\n    id: \"4\",\n    type: NodeType__toString(new NodeType(1)),\n    data: {\n        label: \"Wärme Absatz\",\n    },\n    style: {\n        background: \"red\",\n        color: \"white\",\n        border: \"1px solid #222138\",\n        width: 180,\n    },\n    position: {\n        x: 500,\n        y: 200,\n    },\n}, {\n    id: \"5\",\n    type: NodeType__toString(new NodeType(3, \"test\")),\n    data: {\n        label: \"Test\",\n    },\n    position: {\n        x: 50,\n        y: 120,\n    },\n    style: {\n        background: \"lightgreen\",\n        border: \"1px solid black\",\n        width: 180,\n    },\n}]);\n\nexport function init() {\n    return [new Model(initNodes), Cmd_none()];\n}\n\nexport function createNode(flowElement) {\n    return {\n        id: flowElement.Id,\n        type: NodeType__toString(new NodeType(2)),\n        data: {\n            label: flowElement.Descr,\n        },\n        style: {\n            background: \"red\",\n            color: \"white\",\n            border: \"1px solid #222138\",\n            width: 180,\n        },\n        position: {\n            x: 700,\n            y: 50,\n        },\n    };\n}\n\nexport function update(msg, model) {\n    return [new Model(concat([model.NodeList, singleton(createNode(msg.fields[0]))])), Cmd_none()];\n}\n\nexport function Counter() {\n    let elems;\n    const patternInput = useFeliz_React__React_useState_Static_1505(0);\n    const count = patternInput[0] | 0;\n    return createElement(\"div\", createObj(ofArray([[\"style\", {\n        padding: 10,\n    }], (elems = [Interop_reactApi.createElement(Interop_handle, {\n        type: \"target\",\n        position: \"top\",\n    }), createElement(\"button\", {\n        style: {\n            marginRight: 5,\n        },\n        onClick: (_arg1) => {\n            patternInput[1](count + 1);\n        },\n        children: \"Increment\",\n    }), count], [\"children\", Interop_reactApi_1.Children.toArray(Array.from(elems))])])));\n}\n\nexport function view(model, dispatch) {\n    let props_14, children;\n    const gridSize = 20;\n    const props_15 = [[\"style\", {\n        height: 800,\n    }]];\n    const children_1 = [(props_14 = [[\"nodeTypes\", {\n        test: () => createElement(Counter, null),\n    }], [\"snapGrid\", [gridSize, gridSize]], [\"snapToGrid\", true], [\"elements\", toArray(delay(() => append(model.NodeList, delay(() => append(singleton_1({\n        id: \"e1-2\",\n        source: \"1\",\n        target: \"2\",\n        animated: false,\n        label: \"100 MWh\",\n        type: \"smoothstep\",\n        arrowHeadType: \"arrowclosed\",\n        style: {\n            stroke: \"blue\",\n        },\n        labelStyle: {\n            fill: \"black\",\n            fontWeight: 700,\n        },\n    }), delay(() => append(singleton_1({\n        id: \"e2-3\",\n        source: \"2\",\n        target: \"3\",\n        animated: true,\n        label: \"50 MWh\",\n        type: \"smoothstep\",\n        arrowHeadType: \"arrowclosed\",\n        style: {\n            stroke: \"blue\",\n        },\n        labelStyle: {\n            fill: \"blue\",\n            fontWeight: 700,\n        },\n    }), delay(() => append(singleton_1({\n        id: \"e2-4\",\n        source: \"2\",\n        target: \"4\",\n        animated: true,\n        label: \"55 MWh\",\n        type: \"smoothstep\",\n        arrowHeadType: \"arrowclosed\",\n        style: {\n            stroke: \"red\",\n        },\n        labelStyle: {\n            fill: \"red\",\n            fontWeight: 700,\n        },\n    }), delay(() => singleton_1({\n        id: \"e1-5\",\n        source: \"1\",\n        target: \"5\",\n        type: \"smoothstep\",\n        style: {\n            stroke: \"black\",\n        },\n    })))))))))))], [\"onElementClick\", (delegateArg0, delegateArg1) => {\n        console.log(some(delegateArg0));\n        window.alert(some(\"You clicked me!\"));\n    }], [\"onNodeDragStop\", (delegateArg0_1, delegateArg1_1) => {\n        console.log(some(delegateArg0_1));\n        window.alert(some(\"You dragged me!\"));\n    }], [\"onElementsRemove\", (elements_1) => {\n        console.log(some(elements_1));\n        window.alert(some(\"You removed me!\"));\n    }], [\"onConnect\", (ev_2) => {\n        console.log(some(ev_2));\n        window.alert(some(\"You connected me!\"));\n    }], [\"onConnectStart\", (delegateArg0_2, delegateArg1_2) => {\n        console.log(some(delegateArg0_2));\n        window.alert(some(\"You started to connect me!\"));\n    }], (children = ofArray([Interop_reactApi.createElement(Interop_background, {\n        gap: gridSize,\n        size: 1,\n        variant: \"dots\",\n        color: \"lightgrey\",\n    }), Interop_reactApi.createElement(Interop_miniMap, {\n        nodeColor: \"lightgreen\",\n        maskColor: \"gray\",\n    }), Interop_reactApi.createElement(Interop_controls, {\n        onZoomIn: () => {\n            console.log(some(\"Zoomed in\"));\n        },\n        onZoomOut: () => {\n            console.log(some(\"Zoomed out\"));\n        },\n        onInteractiveChange: (status) => {\n            console.log(some(`Locked: ${(!status)}`));\n        },\n    })]), [\"children\", Interop_reactApi_1.Children.toArray(Array.from(children))])], Interop_reactApi.createElement(Interop_reactFlow, createObj(props_14)))];\n    return react.createElement(\"div\", keyValueList(props_15, 1), ...children_1);\n}\n\n","import { trim } from \"./String.js\";\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[\\(\\{]{0,2}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[\\)\\}]{0,2}$/;\nconst guidRegexNoHyphen = /^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/;\nconst guidRegexHex = /^\\{0x[0-9a-f]{8},(0x[0-9a-f]{4},){2}\\{(0x[0-9a-f]{2},){7}0x[0-9a-f]{2}\\}\\}$/;\nconst guidHexCaptures = /^([0-9a-f]{8})-(([0-9a-f]{4})-)(([0-9a-f]{4})-)([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;\nexport function toString(str, format, _provider) {\n    if (format && (format === null || format === void 0 ? void 0 : format.length) > 0) {\n        switch (format) {\n            case \"N\":\n                return str.replace(/-/g, '');\n            case \"D\":\n                return str;\n            case \"B\":\n                return \"{\" + str + \"}\";\n            case \"P\":\n                return \"(\" + str + \")\";\n            case \"X\":\n                return str.replace(guidHexCaptures, \"{0x$1,0x$3,0x$5,{0x$6,0x$7,0x$8,0x$9,0x$10,0x$11,0x$12,0x$13}}\");\n            default:\n                throw new Error(\"Unrecognized Guid print format\");\n        }\n    }\n    else {\n        return str;\n    }\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). */\nexport function parse(str) {\n    function hyphenateGuid(str) {\n        return str.replace(guidRegexNoHyphen, \"$1-$2-$3-$4-$5\");\n    }\n    const wsTrimAndLowered = str.trim().toLowerCase();\n    if (guidRegex.test(wsTrimAndLowered)) {\n        return trim(wsTrimAndLowered, \"{\", \"}\", \"(\", \")\");\n    }\n    else if (guidRegexNoHyphen.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered);\n    }\n    else if (guidRegexHex.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered.replace(/[\\{\\},]|0x/g, ''));\n    }\n    else {\n        throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n    }\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = parse(str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n    return guid;\n}\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\nexport function divRem(x, y, out) {\n    const div = ~~(x / y);\n    const rem = x % y;\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","import { Record } from \"../../fable_modules/fable-library.3.7.2/Types.js\";\nimport { lambda_type, list_type, unit_type, record_type, string_type, class_type } from \"../../fable_modules/fable-library.3.7.2/Reflection.js\";\nimport { printf, toText, isNullOrWhiteSpace } from \"../../fable_modules/fable-library.3.7.2/String.js\";\nimport { newGuid } from \"../../fable_modules/fable-library.3.7.2/Guid.js\";\n\nexport class Todo extends Record {\n    constructor(Id, Description) {\n        super();\n        this.Id = Id;\n        this.Description = Description;\n    }\n}\n\nexport function Todo$reflection() {\n    return record_type(\"Shared.Todo\", [], Todo, () => [[\"Id\", class_type(\"System.Guid\")], [\"Description\", string_type]]);\n}\n\nexport function TodoModule_isValid(description) {\n    return !isNullOrWhiteSpace(description);\n}\n\nexport function TodoModule_create(description) {\n    return new Todo(newGuid(), description);\n}\n\nexport function Route_builder(typeName, methodName) {\n    return toText(printf(\"/api/%s/%s\"))(typeName)(methodName);\n}\n\nexport class ITodosApi extends Record {\n    constructor(getTodos, addTodo) {\n        super();\n        this.getTodos = getTodos;\n        this.addTodo = addTodo;\n    }\n}\n\nexport function ITodosApi$reflection() {\n    return record_type(\"Shared.ITodosApi\", [], ITodosApi, () => [[\"getTodos\", lambda_type(unit_type, class_type(\"Microsoft.FSharp.Control.FSharpAsync`1\", [list_type(Todo$reflection())]))], [\"addTodo\", lambda_type(Todo$reflection(), class_type(\"Microsoft.FSharp.Control.FSharpAsync`1\", [Todo$reflection()]))]]);\n}\n\n","import { Test_testCase, Test_testList } from \"../fable_modules/Fable.Mocha.2.12.0/Mocha.fs.js\";\nimport { TodoModule_isValid } from \"../src/Shared/Shared.js\";\nimport { structuralHash, assertEqual } from \"../fable_modules/fable-library.3.7.2/Util.js\";\nimport { singleton, ofArray, contains } from \"../fable_modules/fable-library.3.7.2/List.js\";\nimport { equals, class_type, string_type, float64_type, int32_type, bool_type } from \"../fable_modules/fable-library.3.7.2/Reflection.js\";\nimport { toString } from \"../fable_modules/fable-library.3.7.2/Types.js\";\nimport { printf, toText } from \"../fable_modules/fable-library.3.7.2/String.js\";\n\nexport const shared = Test_testList(\"Shared\", singleton(Test_testCase(\"Empty string is not a valid description\", () => {\n    let copyOfStruct;\n    const actual_1 = TodoModule_isValid(\"\");\n    const expected_1 = false;\n    const msg = \"Should be false\";\n    if ((actual_1 === expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n        assertEqual(actual_1, expected_1, msg);\n    }\n    else {\n        let errorMsg;\n        if (contains((copyOfStruct = actual_1, bool_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n            Equals: equals,\n            GetHashCode: structuralHash,\n        })) {\n            const arg20 = toString(actual_1);\n            const arg10 = toString(expected_1);\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg);\n        }\n        else {\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual_1)(msg);\n        }\n        throw (new Error(errorMsg));\n    }\n})));\n\n","import { Mocha_runTests, Test_testCase, Test_testList } from \"./fable_modules/Fable.Mocha.2.12.0/Mocha.fs.js\";\nimport { createNode, init, Msg, update, FlowElement } from \"./src/Client/Index.js\";\nimport { singleton, last, ofArray, contains, length } from \"./fable_modules/fable-library.3.7.2/List.js\";\nimport { equals as equals_1, int32ToString, structuralHash, assertEqual } from \"./fable_modules/fable-library.3.7.2/Util.js\";\nimport { equals, class_type, string_type, float64_type, bool_type, int32_type } from \"./fable_modules/fable-library.3.7.2/Reflection.js\";\nimport { printf, toText } from \"./fable_modules/fable-library.3.7.2/String.js\";\nimport { toString } from \"./fable_modules/fable-library.3.7.2/Types.js\";\nimport { shared } from \"./Shared/Shared.Tests.js\";\n\nexport const client = Test_testList(\"Client\", singleton(Test_testCase(\"Added flowElement\", () => {\n    let copyOfStruct, copyOfStruct_1;\n    const flowElement = new FlowElement(\"6\", \"AdditionalFlowElement\");\n    const model_1 = update(new Msg(0, flowElement), init()[0])[0];\n    const actual = 6;\n    const expected = length(model_1.NodeList) | 0;\n    const msg = \"There should be 7 FlowElements\";\n    if ((actual === expected) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n        assertEqual(actual, expected, msg);\n    }\n    else {\n        let errorMsg;\n        if (contains((copyOfStruct = actual, int32_type), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n            Equals: equals,\n            GetHashCode: structuralHash,\n        })) {\n            const arg20 = int32ToString(actual);\n            const arg10 = int32ToString(expected);\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10)(arg20)(msg);\n        }\n        else {\n            errorMsg = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected)(actual)(msg);\n        }\n        throw (new Error(errorMsg));\n    }\n    const actual_1 = createNode(flowElement);\n    const expected_1 = last(model_1.NodeList);\n    const msg_1 = \"NodeList should equal new nodeElement\";\n    if (equals_1(actual_1, expected_1) ? true : (!(new Function(\"try {return this===window;}catch(e){ return false;}\"))())) {\n        assertEqual(actual_1, expected_1, msg_1);\n    }\n    else {\n        let errorMsg_1;\n        if (contains((copyOfStruct_1 = actual_1, class_type(\"Feliz.ReactFlow.IElement\")), ofArray([int32_type, bool_type, float64_type, string_type, class_type(\"System.Decimal\"), class_type(\"System.Guid\")]), {\n            Equals: equals,\n            GetHashCode: structuralHash,\n        })) {\n            const arg20_2 = toString(actual_1);\n            const arg10_2 = toString(expected_1);\n            errorMsg_1 = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(arg10_2)(arg20_2)(msg_1);\n        }\n        else {\n            errorMsg_1 = toText(printf(\"\\u003cspan style=\\u0027color:black\\u0027\\u003eExpected:\\u003c/span\\u003e \\u003cbr /\\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eActual:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px;color:crimson\\u0027\\u003e%A\\u003c/div\\u003e\\u003cbr /\\u003e\\u003cspan style=\\u0027color:black\\u0027\\u003eMessage:\\u003c/span\\u003e \\u003c/br \\u003e\\u003cdiv style=\\u0027margin-left:20px; color:crimson\\u0027\\u003e%s\\u003c/div\\u003e\"))(expected_1)(actual_1)(msg_1);\n        }\n        throw (new Error(errorMsg_1));\n    }\n})));\n\nexport const all = Test_testList(\"All\", ofArray([shared, client]));\n\n(function (_arg1) {\n    return Mocha_runTests(all);\n})(typeof process === 'object' ? process.argv.slice(2) : []);\n\n"],"sourceRoot":""}